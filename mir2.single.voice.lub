--- BLOCK #0 1-43, warpins: 1 ---
local voice = {}
voice[1] = listenner
voice.downloads = {}
voice.setListenner = function (listenner)
	--- BLOCK #0 1-3, warpins: 1 ---
	voice.listenner = listenner

	return 
	--- END OF BLOCK #0 ---



end
voice.removeListenner = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	voice.listenner = nil

	return 
	--- END OF BLOCK #0 ---



end
voice.call = function (key, ...)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if voice.listenner then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if voice.listenner[key] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-14, warpins: 1 ---
	voice.listenner[key](...)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-15, warpins: 3 ---
	return 
	--- END OF BLOCK #3 ---



end
voice.filename = function (user, msgID)
	--- BLOCK #0 1-12, warpins: 1 ---
	return string.sub(crypto.md5(user .. msgID .. "mir2voice"), 1, 16)
	--- END OF BLOCK #0 ---



end
voice.isRecording = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if voice.record == nil then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	slot0 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 7-7, warpins: 1 ---
	slot0 = true

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 8-8, warpins: 2 ---
	return slot0
	--- END OF BLOCK #3 ---



end
voice.canRecord = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if voice.record then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	return false, "语音控件正在处理上一条信息, 请稍候再试！"
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-9, warpins: 2 ---
	return true
	--- END OF BLOCK #2 ---



end
voice.startRecord = function (player)
	--- BLOCK #0 1-42, warpins: 1 ---
	local msgID = string.sub(crypto.md5(socket.gettime()), 1, 8)
	local filename = voice.filename(player, msgID)
	voice.record = {
		player = player,
		msgID = msgID,
		wav = cache.getVoiceWav() .. filename .. ".wav",
		amr = cache.getVoiceAmr() .. filename .. ".amr"
	}

	audio.stopAllSounds()
	--- END OF BLOCK #0 ---

	slot3 = if voice.recordHandle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 43-50, warpins: 1 ---
	scheduler.unscheduleGlobal(voice.recordHandle)

	voice.recordHandle = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 51-61, warpins: 2 ---
	voice.recordHandle = scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-8, warpins: 1 ---
		voice.stopRecord()
		voice.call("onRecordTimeout")

		return 
		--- END OF BLOCK #0 ---



	end, 60)

	--- END OF BLOCK #2 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 62-65, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 66-76, warpins: 2 ---
	luaoc.callStaticMethod("voice", "call", {
		type = "start:",
		path = voice.record.wav
	})
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #5 77-80, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if device.platform == "android" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 81-92, warpins: 1 ---
	luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "voice", "start", {
		voice.record.amr
	})

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 93-93, warpins: 3 ---
	return 
	--- END OF BLOCK #7 ---



end
voice.stopRecord = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if voice.recordHandle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-12, warpins: 1 ---
	scheduler.unscheduleGlobal(voice.recordHandle)

	voice.recordHandle = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-17, warpins: 2 ---
	local ok, ret = nil
	--- END OF BLOCK #2 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 18-21, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 22-30, warpins: 2 ---
	ok, ret = luaoc.callStaticMethod("voice", "call", {
		type = "stop:"
	})
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #5 31-34, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if device.platform == "android" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 35-45, warpins: 1 ---
	ok, ret = luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "voice", "stop", {}, "()F")
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 46-47, warpins: 3 ---
	--- END OF BLOCK #7 ---

	slot0 = if ok then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 48-49, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot1 = if not ret then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 50-59, warpins: 2 ---
	voice.record = nil

	voice.call("onRecordEnd", false, "发生未知错误.")

	return 

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 60-62, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if ret < 1 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 63-72, warpins: 1 ---
	voice.record = nil

	voice.call("onRecordEnd", false, "录制时间过短!")

	return 

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 73-77, warpins: 1 ---
	local function finish()
		--- BLOCK #0 1-18, warpins: 1 ---
		local record = voice.record
		voice.record = nil

		voice.call("onRecordEnd", true, record)
		voice.upload(record.amr, ret, record.msgID)

		return 
		--- END OF BLOCK #0 ---



	end

	--- END OF BLOCK #12 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 78-81, warpins: 1 ---
	--- END OF BLOCK #13 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 82-98, warpins: 2 ---
	luaoc.callStaticMethod("voice", "call", {
		type = "convert2amr:",
		inPath = voice.record.wav,
		outPath = voice.record.amr,
		callback = function (ok)
			--- BLOCK #0 1-2, warpins: 1 ---
			--- END OF BLOCK #0 ---

			slot0 = if ok then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #2
			end


			--- BLOCK #1 3-5, warpins: 1 ---
			finish()

			--- END OF BLOCK #1 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #3


			--- BLOCK #2 6-14, warpins: 1 ---
			voice.record = nil

			voice.call("onRecordEnd", false, "语音录制失败!")

			--- END OF BLOCK #2 ---

			FLOW; TARGET BLOCK #3


			--- BLOCK #3 15-15, warpins: 2 ---
			return 
			--- END OF BLOCK #3 ---



		end
	})
	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #15 99-102, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if device.platform == "android" then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 103-104, warpins: 1 ---
	finish()

	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 105-106, warpins: 3 ---
	return 
	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 107-107, warpins: 2 ---
	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 108-108, warpins: 2 ---
	--- END OF BLOCK #19 ---



end
voice.cancelRecord = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if voice.recordHandle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-12, warpins: 1 ---
	scheduler.unscheduleGlobal(voice.recordHandle)

	voice.recordHandle = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-16, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 17-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 21-27, warpins: 2 ---
	luaoc.callStaticMethod("voice", "call", {
		type = "cancel:"
	})
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #5 28-31, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if device.platform == "android" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 32-38, warpins: 1 ---
	luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "voice", "cancel")

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 39-42, warpins: 3 ---
	voice.record = nil

	return 
	--- END OF BLOCK #7 ---



end
voice.upload = function (path, dur, msgID)
	--- BLOCK #0 1-7, warpins: 1 ---
	yaya.uploadVoice(path, dur, msgID)

	return 
	--- END OF BLOCK #0 ---



end
voice.uploadEnd = function (result, errMsg, url, text, dur, expand)
	--- BLOCK #0 1-11, warpins: 1 ---
	voice.call("onUploadEnd", result, errMsg, text, url, dur, expand)

	return 
	--- END OF BLOCK #0 ---



end
voice.isPlaying = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if voice.playing then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-8, warpins: 1 ---
	slot0 = not voice.playing.loading

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-9, warpins: 2 ---
	return slot0
	--- END OF BLOCK #2 ---



end
voice.play = function (user, msgID, channel, url, dur)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot5 = if voice.isPlaying()

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #1 6-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if voice.playing.msgID ~= msgID then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-12, warpins: 1 ---
	slot5 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 13-13, warpins: 1 ---
	local isLastMsg = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 14-24, warpins: 2 ---
	voice.stopPlay(voice.playing.msgID, voice.playing.channel)
	--- END OF BLOCK #4 ---

	slot5 = if isLastMsg then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 25-29, warpins: 1 ---
	voice.call("onPlayEndSound")

	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 30-44, warpins: 3 ---
	voice.playing = {
		msgID = msgID,
		channel = channel,
		dur = dur
	}
	local filename = voice.filename(user, msgID)
	--- END OF BLOCK #6 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 45-48, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 49-56, warpins: 2 ---
	path = cache.getVoiceWav() .. filename .. ".wav"
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #9 57-60, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if device.platform == "android" then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 61-67, warpins: 1 ---
	path = cache.getVoiceAmr() .. filename .. ".amr"

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 68-73, warpins: 3 ---
	--- END OF BLOCK #11 ---

	slot6 = if io.exists(path)
	 then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 74-81, warpins: 1 ---
	voice.startPlay(msgID, channel, dur, path)

	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #13 82-92, warpins: 1 ---
	voice.playing.loading = true

	voice.download(msgID, channel, filename, url)
	--- END OF BLOCK #13 ---

	FLOW; TARGET BLOCK #14


	--- BLOCK #14 93-97, warpins: 2 ---
	voice.call("onPlayStartSound")

	return 
	--- END OF BLOCK #14 ---



end
voice.autoPlay = function (user, msgID, channel, url, dur)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot5 = if voice.playing then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-5, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-14, warpins: 2 ---
	voice.play(user, msgID, channel, url, dur)

	return 
	--- END OF BLOCK #2 ---



end
voice.startPlay = function (msgID, channel, dur, path)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if voice.playHandle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-12, warpins: 1 ---
	scheduler.unscheduleGlobal(voice.playHandle)

	voice.playHandle = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-34, warpins: 2 ---
	voice.playHandle = scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-10, warpins: 1 ---
		voice.stopPlay(msgID, channel)
		voice.call("onPlayEndSound")

		return 
		--- END OF BLOCK #0 ---



	end, dur + 0.5)

	audio.stopAllSounds()
	audio.playSound(path)
	voice.call("onStartPlay", msgID, channel)

	return 
	--- END OF BLOCK #2 ---



end
voice.stopPlay = function (msgID, channel)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if voice.playHandle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-12, warpins: 1 ---
	scheduler.unscheduleGlobal(voice.playHandle)

	voice.playHandle = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-25, warpins: 2 ---
	audio.stopAllSounds()

	voice.playing = nil

	voice.call("onStopPlay", msgID, channel)

	return 
	--- END OF BLOCK #2 ---



end
voice.download = function (msgID, channel, filename, url)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if voice.downloads[msgID] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-6, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-28, warpins: 1 ---
	voice.downloads[msgID] = true

	voice.call("onDownloading", msgID, channel)

	local path = cache.getVoiceAmr() .. filename .. ".amr"

	--- END OF BLOCK #2 ---

	slot5 = if not io.exists(path)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 29-37, warpins: 1 ---
	local request = network.createHTTPRequest(function (event)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if event.name ~= "completed" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-4, warpins: 1 ---
		return 

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 5-10, warpins: 2 ---
		local request = event.request
		local code = request.getResponseStatusCode(request)

		--- END OF BLOCK #2 ---

		if code ~= 200 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 11-17, warpins: 1 ---
		voice.downloadEnd(false, msgID, channel)

		return 

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 18-33, warpins: 2 ---
		io.writefile(path, request.getResponseData(request))
		voice.downloadEnd(true, msgID, channel, filename, path)

		return 
		--- END OF BLOCK #4 ---



	end, url)

	request.start(request)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 38-45, warpins: 1 ---
	voice.downloadEnd(true, msgID, channel, filename, path)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 46-47, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 48-48, warpins: 2 ---
	--- END OF BLOCK #6 ---



end
voice.downloadEnd = function (result, msgID, channel, filename, amrPath)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if result then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #1 3-7, warpins: 1 ---
	local function finish(ok, path)
		--- BLOCK #0 1-14, warpins: 1 ---
		voice.downloads[msgID] = nil

		voice.call("onDownloadEnd", msgID, channel, ok)

		--- END OF BLOCK #0 ---

		slot0 = if ok then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 15-18, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot2 = if voice.playing then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 19-24, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if voice.playing.msgID == msgID then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 25-39, warpins: 1 ---
		voice.playing.loading = nil

		voice.startPlay(msgID, voice.playing.channel, voice.playing.dur, path)

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 40-40, warpins: 4 ---
		return 
		--- END OF BLOCK #4 ---



	end

	--- END OF BLOCK #1 ---

	if device.platform ~= "mac" then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-28, warpins: 2 ---
	local wavPath = cache.getVoiceWav() .. filename .. ".wav"

	luaoc.callStaticMethod("voice", "call", {
		type = "convert2wav:",
		inPath = amrPath,
		outPath = wavPath,
		callback = function (ok)
			--- BLOCK #0 1-5, warpins: 1 ---
			finish(ok, wavPath)

			return 
			--- END OF BLOCK #0 ---



		end
	})
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #4 29-32, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if device.platform == "android" then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 33-36, warpins: 1 ---
	finish(true, amrPath)

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 37-37, warpins: 3 ---
	return 

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 38-48, warpins: 1 ---
	voice.downloads[msgID] = nil

	voice.call("onDownloadEnd", msgID, channel, false)
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 49-50, warpins: 2 ---
	--- END OF BLOCK #8 ---



end

return voice
--- END OF BLOCK #0 ---



