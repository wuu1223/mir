--- BLOCK #0 1-86, warpins: 1 ---
local def = {}

table.merge(def, import(".def.weapon"))
table.merge(def, import(".def.hp"))
table.merge(def, import(".def.state"))

def.humFrame = 600
def.size = {
	w = 50,
	h = 85
}
def.speed = {
	rushKung = 0.3,
	normal = 0.6,
	spell = 0.4,
	rush = 0.3,
	attack = 0.9,
	fast = 0.2
}
def.state = {}
def.dir = {
	leftBottom = 5,
	up = 0,
	leftUp = 7,
	bottom = 4,
	rightBottom = 3,
	rightUp = 1,
	left = 6,
	right = 2,
	_0 = {
		0,
		-1
	},
	_1 = {
		1,
		-1
	},
	_2 = {
		1,
		0
	},
	_3 = {
		1,
		1
	},
	_4 = {
		0,
		1
	},
	_5 = {
		-1,
		1
	},
	_6 = {
		-1,
		0
	},
	_7 = {
		-1,
		-1
	}
}
def.namecolorcnt = 9
def.namecolors = {
	249,
	216,
	250,
	252,
	253,
	255,
	152,
	149,
	70
}
def.config = {}
def.config.dress = json.decode(res.getfile("config/dress.txt"))
def.config.weapon = json.decode(res.getfile("config/weapon.txt"))
def.dress = function (dressid)
	--- BLOCK #0 1-9, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not def.config.dress[tostring(dressid)

	] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-10, warpins: 1 ---
	slot1 = {}

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 11-11, warpins: 2 ---
	return slot1
	--- END OF BLOCK #2 ---



end
def.weapon = function (weapon)
	--- BLOCK #0 1-9, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not def.config.weapon[tostring(weapon)

	] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-10, warpins: 1 ---
	slot1 = {}

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 11-11, warpins: 2 ---
	return slot1
	--- END OF BLOCK #2 ---



end
def.hair = function (feature)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if feature.get(feature, "sex")

	 == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 7-23, warpins: 1 ---
	local hairs = {}
	hairs[1] = {
		"hair",
		0
	}
	hairs[2] = {
		"hair",
		4
	}
	hairs[3] = {
		"hair2",
		6
	}
	hairs[4] = {
		"hair2",
		7
	}

	--- END OF BLOCK #1 ---

	slot2 = if not hairs[feature.get(feature, "hair")

	 + 1] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 24-24, warpins: 1 ---
	local ret = {
		"hair",
		0
	}

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 25-28, warpins: 2 ---
	return unpack(ret)

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #4 29-45, warpins: 1 ---
	local hairs = {}
	hairs[1] = {
		"hair",
		3
	}
	hairs[2] = {
		"hair",
		5
	}
	hairs[3] = {
		"hair2",
		6
	}
	hairs[4] = {
		"hair2",
		7
	}

	--- END OF BLOCK #4 ---

	slot2 = if not hairs[feature.get(feature, "hair")

	 + 1] then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 46-46, warpins: 1 ---
	local ret = {
		"hair",
		0
	}

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 47-49, warpins: 2 ---
	return unpack(ret)
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 50-50, warpins: 2 ---
	return 
	--- END OF BLOCK #7 ---



end
def.makeTFeature = function (feature)
	--- BLOCK #0 1-29, warpins: 1 ---
	return getRecord("TFeature", {
		race = Byte(feature),
		sex = Hibyte(Hiword(feature))%2,
		hair = Byte(Hiword(feature)),
		weapon = Hibyte(feature),
		dress = Hiword(feature)
	})
	--- END OF BLOCK #0 ---



end
def.getMoveDir = function (destx, desty, x, y)
	--- BLOCK #0 1-11, warpins: 1 ---
	local offX = x - destx
	local offY = y - desty
	local angle = math.atan(offY/offX)

	--- END OF BLOCK #0 ---

	if angle <= math.pi/8 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 12-17, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if -math.pi/8 < angle then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #2 18-20, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if 0 < offX then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 21-25, warpins: 1 ---
	return def.dir.right
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #4 26-30, warpins: 1 ---
	return def.dir.left
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #5 31-36, warpins: 2 ---
	--- END OF BLOCK #5 ---

	if angle < (math.pi*3)/8 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #6 37-41, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if math.pi/8 < angle then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 42-44, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if 0 < offX then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 45-49, warpins: 1 ---
	return def.dir.rightBottom
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #9 50-54, warpins: 1 ---
	return def.dir.leftUp
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #10 55-56, warpins: 2 ---
	--- END OF BLOCK #10 ---

	if offX ~= 0 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #11 57-62, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if (math.pi*3)/8 > angle then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 63-69, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if angle < (-math.pi*3)/8 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #13 70-72, warpins: 3 ---
	--- END OF BLOCK #13 ---

	if 0 < offY then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 73-77, warpins: 1 ---
	return def.dir.bottom
	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #15 78-82, warpins: 1 ---
	return def.dir.up
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #16 83-88, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if angle <= -math.pi/8 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #17 89-95, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if (-math.pi*3)/8 < angle then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #18 96-98, warpins: 1 ---
	--- END OF BLOCK #18 ---

	if offY < 0 then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 99-103, warpins: 1 ---
	return def.dir.rightUp
	--- END OF BLOCK #19 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #20 104-107, warpins: 1 ---
	return def.dir.leftBottom
	--- END OF BLOCK #20 ---

	FLOW; TARGET BLOCK #21


	--- BLOCK #21 108-111, warpins: 10 ---
	return def.dir.bottom
	--- END OF BLOCK #21 ---



end
def.getAttackDir = function (destx, desty, x, y)
	--- BLOCK #0 1-12, warpins: 1 ---
	local disx = math.abs(x - destx)
	local disy = math.abs(y - desty)
	local dir = nil
	--- END OF BLOCK #0 ---

	if disx <= 1 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 13-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if y < desty then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-19, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot6 = if not def.dir.up then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 20-22, warpins: 2 ---
	dir = def.dir.bottom
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 23-23, warpins: 2 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #5 24-25, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if x < destx then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #6 26-28, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if disy <= 1 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 29-32, warpins: 1 ---
	dir = def.dir.left
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #8 33-34, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if y < desty then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 35-38, warpins: 1 ---
	dir = def.dir.leftUp
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #10 39-42, warpins: 1 ---
	dir = def.dir.leftBottom
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #11 43-44, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if destx < x then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #12 45-47, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if disy <= 1 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 48-51, warpins: 1 ---
	dir = def.dir.right
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #14 52-53, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if y < desty then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 54-57, warpins: 1 ---
	dir = def.dir.rightUp
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #16 58-60, warpins: 1 ---
	dir = def.dir.rightBottom

	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 61-61, warpins: 8 ---
	return dir
	--- END OF BLOCK #17 ---



end

return def
--- END OF BLOCK #0 ---



