--- BLOCK #0 1-20, warpins: 1 ---
local common = import(".common")
local plugCheck = {}
local state, loading = nil
local initWait = 1
local initcnt = 0
local initSendMin = 2
local initErrCount = {}
local initErrAllow = 20
local normalWait = 5
local timeout = 60
local timecnt = 0
local allowDiff = 5
local allowErr = 8
local allowSendTimeLong = 10
local errCode = {
	speed = -1,
	timeOut = 1,
	initErr = 2,
	sendTimeLong = 3
}
--- END OF BLOCK #0 ---

slot16 = if not PLUG_CHECK_DATA then
JUMP TO BLOCK #1
else
JUMP TO BLOCK #2
end


--- BLOCK #1 21-31, warpins: 1 ---
slot16 = {
	inited,
	diff,
	warning,
	errCount,
	sendTimeLongCount
}
--- END OF BLOCK #1 ---

FLOW; TARGET BLOCK #2


--- BLOCK #2 32-42, warpins: 2 ---
PLUG_CHECK_DATA = slot16
plugCheck.get = function ()
	--- BLOCK #0 1-11, warpins: 1 ---
	loading = socket.gettime()

	net.send_old({
		CM_SPEEDHACKUSER
	})

	return 
	--- END OF BLOCK #0 ---



end
plugCheck.update = function (dt)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if state == "kill" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-7, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot1 = if loading then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 8-14, warpins: 1 ---
	timecnt = timecnt + dt

	--- END OF BLOCK #3 ---

	if timeout < timecnt then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 15-19, warpins: 1 ---
	plugCheck.kill("timeOut", state)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 20-20, warpins: 2 ---
	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 21-24, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot1 = if PLUG_CHECK_DATA.inited then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 25-28, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot1 = if PLUG_CHECK_DATA.warning then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 29-30, warpins: 1 ---
	state = "warning"
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #9 31-32, warpins: 1 ---
	state = "normal"
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #10 33-33, warpins: 1 ---
	state = "init"
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 34-36, warpins: 3 ---
	--- END OF BLOCK #11 ---

	if state == "init" then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #12 37-43, warpins: 1 ---
	initcnt = initcnt + dt

	--- END OF BLOCK #12 ---

	if initWait < initcnt then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #13 44-47, warpins: 1 ---
	plugCheck.get()

	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #14 48-50, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if state == "normal" then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #15 51-57, warpins: 1 ---
	timecnt = timecnt + dt

	--- END OF BLOCK #15 ---

	if normalWait < timecnt then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #16 58-61, warpins: 1 ---
	plugCheck.get()
	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #17 62-64, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if state == "warning" then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 65-67, warpins: 1 ---
	plugCheck.get()

	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 68-68, warpins: 6 ---
	return 
	--- END OF BLOCK #19 ---



end
plugCheck.verify = function (serverTime)
	--- BLOCK #0 1-14, warpins: 1 ---
	local currentTime = socket.gettime()
	local sendTime = loading
	loading = false
	timecnt = 0
	local clientTime = math.modf(currentTime)
	--- END OF BLOCK #0 ---

	slot4 = if not PLUG_CHECK_DATA.inited then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #1 15-18, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if currentTime - sendTime < initSendMin then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 19-35, warpins: 1 ---
	PLUG_CHECK_DATA.inited = true
	PLUG_CHECK_DATA.diff = math.abs(clientTime - serverTime)
	PLUG_CHECK_DATA.errCount = {}
	PLUG_CHECK_DATA.sendTimeLongCount = {}
	state = "normal"
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #3 36-46, warpins: 1 ---
	initErrCount[#initErrCount + 1] = currentTime - sendTime
	--- END OF BLOCK #3 ---

	if initErrAllow < #initErrCount then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #4 47-51, warpins: 1 ---
	local detail = ""

	--- END OF BLOCK #4 ---

	for i, v in ipairs(initErrCount)


	LOOP BLOCK #5
	GO OUT TO BLOCK #7


	--- BLOCK #5 52-60, warpins: 1 ---
	local time = string.format("%.2f", v)
	detail = detail .. time .. "-"

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 61-62, warpins: 2 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #7 63-67, warpins: 1 ---
	plugCheck.kill("initErr", detail)

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 68-68, warpins: 3 ---
	return 

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 69-72, warpins: 2 ---
	--- END OF BLOCK #9 ---

	if allowDiff < currentTime - sendTime then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #10 73-89, warpins: 1 ---
	PLUG_CHECK_DATA.warning = true
	PLUG_CHECK_DATA.sendTimeLongCount[#PLUG_CHECK_DATA.sendTimeLongCount + 1] = currentTime - sendTime
	--- END OF BLOCK #10 ---

	if allowSendTimeLong < #PLUG_CHECK_DATA.sendTimeLongCount then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #11 90-95, warpins: 1 ---
	local detail = ""

	--- END OF BLOCK #11 ---

	for i, v in ipairs(PLUG_CHECK_DATA.sendTimeLongCount)


	LOOP BLOCK #12
	GO OUT TO BLOCK #14


	--- BLOCK #12 96-104, warpins: 1 ---
	local time = string.format("%.2f", v)
	detail = detail .. time .. "-"

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 105-106, warpins: 2 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #14 107-111, warpins: 1 ---
	plugCheck.kill("sendTimeLong", detail)

	--- END OF BLOCK #14 ---

	FLOW; TARGET BLOCK #15


	--- BLOCK #15 112-113, warpins: 2 ---
	return 

	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #16 114-116, warpins: 1 ---
	PLUG_CHECK_DATA.sendTimeLongCount = {}
	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 117-129, warpins: 2 ---
	local diff = math.abs(math.abs(clientTime - serverTime) - PLUG_CHECK_DATA.diff)
	--- END OF BLOCK #17 ---

	if allowDiff < diff then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #18 130-145, warpins: 1 ---
	PLUG_CHECK_DATA.warning = true
	PLUG_CHECK_DATA.errCount[#PLUG_CHECK_DATA.errCount + 1] = diff
	--- END OF BLOCK #18 ---

	if allowErr < #PLUG_CHECK_DATA.errCount then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #19 146-151, warpins: 1 ---
	local detail = ""

	--- END OF BLOCK #19 ---

	for i, v in ipairs(PLUG_CHECK_DATA.errCount)


	LOOP BLOCK #20
	GO OUT TO BLOCK #22


	--- BLOCK #20 152-160, warpins: 1 ---
	local time = string.format("%.2f", v)
	detail = detail .. time .. "-"

	--- END OF BLOCK #20 ---

	FLOW; TARGET BLOCK #21


	--- BLOCK #21 161-162, warpins: 2 ---
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #22 163-168, warpins: 1 ---
	plugCheck.kill("speed", detail)

	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #24


	--- BLOCK #23 169-174, warpins: 1 ---
	PLUG_CHECK_DATA.warning = nil
	PLUG_CHECK_DATA.errCount = {}

	--- END OF BLOCK #23 ---

	FLOW; TARGET BLOCK #24


	--- BLOCK #24 175-175, warpins: 3 ---
	return 
	--- END OF BLOCK #24 ---



end
plugCheck.kill = function (key, detail)
	--- BLOCK #0 1-8, warpins: 1 ---
	net.send({
		CM_SOFTCLOSE
	})
	--- END OF BLOCK #0 ---

	if key == "speed" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-26, warpins: 1 ---
	an.newMsgbox({
		{
			"请爱护游戏环境\n"
		},
		{
			"此次开加速辅助已被系统记录！",
			cc.c3b(255, 0, 0)
		}
	}, function ()
		--- BLOCK #0 1-5, warpins: 1 ---
		os.exit(0)

		return 
		--- END OF BLOCK #0 ---



	end, {
		fontSize = 17
	})
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 27-36, warpins: 1 ---
	an.newMsgbox("与服务器断开连接. (错误代码: " .. errCode[key] .. ")", function ()
		--- BLOCK #0 1-5, warpins: 1 ---
		os.exit(0)

		return 
		--- END OF BLOCK #0 ---



	end, {
		center = true
	})

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 37-38, warpins: 2 ---
	state = "kill"

	return 
	--- END OF BLOCK #3 ---



end

return plugCheck
--- END OF BLOCK #2 ---



