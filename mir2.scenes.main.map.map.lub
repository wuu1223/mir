--- BLOCK #0 1-148, warpins: 1 ---
local current = ...
local mapDef = import(".def")
local maptile = import(".maptile")
local role = import("..role.role")
local hero = import("..role.hero")
local npc = import("..role.npc")
local mon = import("..role.mon")
local roleInfo = import("..role.info")
local stall = import("..role.stall")
local magic = import("..common.magic")
local settingLogic = import("..common.settingLogic")
local map = class("map", function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	return ycMap:create()
	--- END OF BLOCK #0 ---



end)
local __position = cc.Node.setPosition

table.merge(map, {
	isStage = false
})

map.ctor = function (self, mapid)
	--- BLOCK #0 1-13, warpins: 1 ---
	self.mapid = mapid
	self.replaceMapid = g_data.map.mapReplace[mapid]

	--- END OF BLOCK #0 ---

	slot2 = if not def.map.isHasRes(self.mapid)

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 14-18, warpins: 1 ---
	slot2 = def.map.isHasRes(self.replaceMapid)
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 19-51, warpins: 2 ---
	self.hasRes = slot2
	self.player = nil
	self.gray = false
	self.mons = {}
	self.npcs = {}
	self.heros = {}
	self.items = {}
	self.doors = {}
	self.stalls = {}
	self.safezoneEffs = {}
	self.events = {}
	self.readyTiles = {}
	self.roleXYs = {}
	self.msgs = newList()
	slot2 = res.loadmap
	--- END OF BLOCK #2 ---

	slot3 = if not self.replaceMapid then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 52-52, warpins: 1 ---
	slot3 = self.mapid
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 53-182, warpins: 2 ---
	self.file = slot2(slot3)

	print("=====================================\nself.file", self.file)

	self.h = self.file:geth()
	self.w = self.file:getw()
	self.layers = {
		bg = display.newNode():addto(self),
		mid = display.newNode():addto(self),
		obj = display.newNode():addto(self),
		itemName = display.newNode():addto(self),
		itemEff = display.newNode():addto(self),
		infoHpBg = display.newNode():addto(self),
		infoHpSpr = display.newNode():addto(self),
		infoHpOut = display.newNode():addto(self)
	}
	self.tiles = {}

	self.size(self, self.file:getw()*mapDef.tile.w, self.file:geth()*mapDef.tile.h)
	self.runForever(self, transition.sequence({
		cc.DelayTime:create(20),
		cc.CallFunc:create(handler(self, self.clearTiles))
	}))
	--- END OF BLOCK #4 ---

	slot2 = if not self.hasRes then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #5 183-185, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot2 = if main_scene then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 186-189, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot2 = if main_scene.ui then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 190-195, warpins: 1 ---
	main_scene.ui:tip("该地图的环境正在施工中.")

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 196-215, warpins: 4 ---
	self.relationHandler = handler(self, self.onRelationUpdate)

	g_data.relation:addNotifyListener(self.relationHandler)

	self.onCleanup = function ()
		--- BLOCK #0 1-8, warpins: 1 ---
		g_data.relation:removeNotifyListener(self.relationHandler)

		return 
		--- END OF BLOCK #0 ---



	end
	self.blocks = {}

	self.updateMapScale(self)

	return 
	--- END OF BLOCK #8 ---



end
map.onRelationUpdate = function (self, _, rel, ole, new)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if rel ~= "attention" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-4, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if rel == "attentionColor" then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #2 5-6, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot3 = if not ole then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 7-8, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot4 = if new then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #4 9-10, warpins: 2 ---
	--- END OF BLOCK #4 ---

	slot3 = if ole then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 11-16, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot5 = if not ole.get(ole, "name")

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 17-20, warpins: 2 ---
	local name = new.get(new, "name")
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 21-25, warpins: 2 ---
	local role = nil

	--- END OF BLOCK #7 ---

	for k, v in pairs(self.heros)

	LOOP BLOCK #8
	GO OUT TO BLOCK #11


	--- BLOCK #8 26-38, warpins: 1 ---
	print(v.info:getName(), name)
	--- END OF BLOCK #8 ---

	if v.info:getName()

	 == name then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 39-40, warpins: 1 ---
	role = v

	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #10 41-42, warpins: 2 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #11 43-44, warpins: 2 ---
	--- END OF BLOCK #11 ---

	slot6 = if role then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #12 45-46, warpins: 1 ---
	--- END OF BLOCK #12 ---

	slot4 = if new then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 47-55, warpins: 1 ---
	role.info:setNameColor(new.get(new, "color"))
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #14 56-58, warpins: 1 ---
	--- END OF BLOCK #14 ---

	slot7 = if ole.realNameColor then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 59-63, warpins: 1 ---
	role.info:setNameColor(ole.realNameColor)

	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 64-64, warpins: 6 ---
	return 
	--- END OF BLOCK #16 ---



end
map.updateMapScale = function (self, s)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not s then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-6, warpins: 1 ---
	local scale = g_data.setting.display.mapScale
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-29, warpins: 2 ---
	self.screenw = math.ceil(display.width/mapDef.tile.w/scale)
	self.screenh = math.ceil(display.height/mapDef.tile.h/scale)

	return 
	--- END OF BLOCK #2 ---



end
map.setAllRoleInScreen = function (self, inScreen)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, roles in pairs(self.roleXYs)

	LOOP BLOCK #1
	GO OUT TO BLOCK #6


	--- BLOCK #1 5-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k, v in pairs(roles)


	LOOP BLOCK #2
	GO OUT TO BLOCK #5


	--- BLOCK #2 9-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v.isInScreen ~= inScreen then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-15, warpins: 1 ---
	v.isInScreen = inScreen

	v.uptIsIgnore(v)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 16-17, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #5 18-19, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #6 20-20, warpins: 1 ---
	return 
	--- END OF BLOCK #6 ---



end
map.updateRoleInScreen = function (self, x, y, endx, endy, inScreen)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if endx < x then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-5, warpins: 1 ---
	endx = x
	x = endx
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-7, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if endy < y then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 8-10, warpins: 1 ---
	endy = y
	y = endy
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 11-16, warpins: 2 ---
	local uptIsIgnore = role.uptIsIgnore
	--- END OF BLOCK #4 ---

	for mx=x, endx, 1
	LOOP BLOCK #5
	GO OUT TO BLOCK #14

	--- BLOCK #5 17-21, warpins: 2 ---
	local mx = mx*10000
	--- END OF BLOCK #5 ---

	for my=y + mx, endy + mx, 1
	LOOP BLOCK #6
	GO OUT TO BLOCK #13

	--- BLOCK #6 22-25, warpins: 2 ---
	local roles = self.roleXYs[my]

	--- END OF BLOCK #6 ---

	slot15 = if roles then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #7 26-29, warpins: 1 ---
	--- END OF BLOCK #7 ---

	for k, v in pairs(roles)


	LOOP BLOCK #8
	GO OUT TO BLOCK #12


	--- BLOCK #8 30-32, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if v.isInScreen ~= inScreen then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #9 33-37, warpins: 1 ---
	v.isInScreen = inScreen

	uptIsIgnore(v)

	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #10 38-38, warpins: 0 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #11 39-40, warpins: 2 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #12 41-41, warpins: 4 ---
	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #13 42-42, warpins: 1 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #14 43-43, warpins: 1 ---
	return 
	--- END OF BLOCK #14 ---



end
map.load = function (self, x, y, ofsx, ofsy)
	--- BLOCK #0 1-12, warpins: 1 ---
	local function loadArea(beginx, beginy, endx, endy)
		--- BLOCK #0 1-48, warpins: 1 ---
		beginx = math.max(0, math.min(self.w, beginx))
		endx = math.max(0, math.min(self.w, endx))
		beginy = math.max(0, math.min(self.h, beginy))
		endy = math.max(0, math.min(self.h, endy))

		--- END OF BLOCK #0 ---

		for i=beginx, endx, 1
		LOOP BLOCK #1
		GO OUT TO BLOCK #4

		--- BLOCK #1 49-52, warpins: 2 ---
		--- END OF BLOCK #1 ---

		for j=beginy, endy, 1
		LOOP BLOCK #2
		GO OUT TO BLOCK #3

		--- BLOCK #2 53-59, warpins: 2 ---
		self:addTile(i, j)

		--- END OF BLOCK #2 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #1


		--- BLOCK #3 60-60, warpins: 1 ---
		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #0


		--- BLOCK #4 61-61, warpins: 1 ---
		return 
		--- END OF BLOCK #4 ---



	end

	local screenw = self.screenw
	local screenh = self.screenh
	local rangew = screenw + mapDef.loadOutsideArea*2
	local newx = x
	local newy = y
	local beginx, endx, beginy, endy = nil
	--- END OF BLOCK #0 ---

	slot3 = if ofsx then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #1 13-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot4 = if ofsy then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #2 15-19, warpins: 1 ---
	newy = y + ofsy
	newx = x + ofsx
	--- END OF BLOCK #2 ---

	if ofsx ~= 0 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #3 20-23, warpins: 1 ---
	local rbeginx, rendx, ey = nil
	--- END OF BLOCK #3 ---

	if 0 < ofsx then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 24-39, warpins: 1 ---
	beginx = math.floor(x + rangew/2)
	endx = beginx + ofsx
	rendx = math.floor(x - rangew/2) - 1
	rbeginx = rendx - ofsx - 1
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #5 40-54, warpins: 1 ---
	endx = math.floor(x - rangew/2) - 1
	beginx = (endx + ofsx) - 1
	rbeginx = math.floor(x + rangew/2)
	rendx = rbeginx - ofsx
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 55-79, warpins: 2 ---
	beginy = math.floor(y - screenh/2 - mapDef.loadOutsideArea) + ofsy
	ey = beginy + screenh
	endy = ey + mapDef.loadOutsideAreaBottom + mapDef.loadOutsideArea

	loadArea(beginx, beginy, endx, endy)
	--- END OF BLOCK #6 ---

	if screenw <= 24 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 80-95, warpins: 1 ---
	self.updateRoleInScreen(self, rbeginx, beginy, rendx, ey, false)
	self.updateRoleInScreen(self, beginx, beginy, endx, ey, true)

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 96-97, warpins: 3 ---
	--- END OF BLOCK #8 ---

	if ofsy ~= 0 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #9 98-101, warpins: 1 ---
	local rbeginy, rendy, by, ey = nil
	--- END OF BLOCK #9 ---

	if 0 < ofsy then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 102-123, warpins: 1 ---
	beginy = math.floor(y + screenh/2 + mapDef.loadOutsideAreaBottom)
	by = beginy - mapDef.loadOutsideAreaBottom
	endy = beginy + ofsy
	ey = endy
	rendy = math.floor(y - screenh/2)
	rbeginy = rendy - ofsy
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #11 124-144, warpins: 1 ---
	endy = math.floor(y - screenh/2 - mapDef.loadOutsideArea)
	ey = endy + mapDef.loadOutsideArea
	beginy = endy + ofsy
	by = beginy
	rbeginy = math.floor(y + screenh/2)
	rendy = rbeginy - ofsy
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 145-161, warpins: 2 ---
	beginx = math.floor(x - rangew/2 + ofsx)
	endx = beginx + rangew

	loadArea(beginx, beginy, endx, endy)
	--- END OF BLOCK #12 ---

	if screenh <= 24 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #13 162-178, warpins: 1 ---
	self.updateRoleInScreen(self, beginx, rbeginy + 2, endx, rendy + 1, false)
	self.updateRoleInScreen(self, beginx, by, endx, ey, true)

	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #14 179-217, warpins: 2 ---
	endx = math.floor(x + rangew/2)
	beginx = math.floor(x - rangew/2)
	endy = math.floor(y + screenh/2 + mapDef.loadOutsideAreaBottom)
	beginy = math.floor(y - screenh/2 - mapDef.loadOutsideArea)

	loadArea(beginx, beginy, endx, endy)
	--- END OF BLOCK #14 ---

	if 24 < screenh then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #15 218-220, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if 24 < screenw then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 221-225, warpins: 1 ---
	self.setAllRoleInScreen(self, true)
	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #17 226-245, warpins: 2 ---
	self.setAllRoleInScreen(self, false)
	self.updateRoleInScreen(self, beginx, math.floor(y - screenh/2), endx, math.floor(y + screenh/2), true)

	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 246-257, warpins: 5 ---
	local safezonexDatas = g_data.map:isSeeSafeZoneEdge(self.mapid, newx, newy, screenw, screenh)

	--- END OF BLOCK #18 ---

	slot15 = if safezonexDatas then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #19 258-261, warpins: 1 ---
	--- END OF BLOCK #19 ---

	for i, v in ipairs(safezonexDatas)

	LOOP BLOCK #20
	GO OUT TO BLOCK #22


	--- BLOCK #20 262-267, warpins: 1 ---
	self.addSafeZoneEff(self, v.x, v.y, v.rang)

	--- END OF BLOCK #20 ---

	FLOW; TARGET BLOCK #21


	--- BLOCK #21 268-269, warpins: 2 ---
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #22 270-271, warpins: 2 ---
	return 
	--- END OF BLOCK #22 ---



end
map.updateLookArea = function (self, x, y)
	--- BLOCK #0 1-36, warpins: 1 ---
	self.lookArea = cc.rect(x - display.cx/g_data.setting.display.mapScale, y - display.cy/g_data.setting.display.mapScale, display.width/g_data.setting.display.mapScale, display.height/g_data.setting.display.mapScale + 500)

	return 
	--- END OF BLOCK #0 ---



end
map.scroll = function (self, isAnima, dura)
	--- BLOCK #0 1-13, warpins: 1 ---
	local tw = mapDef.tile.w
	local th = mapDef.tile.h
	local x, y = self.player.node:getPosition()
	--- END OF BLOCK #0 ---

	slot1 = if isAnima then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 14-17, warpins: 1 ---
	slot8 = self
	slot7 = self.moveTo
	--- END OF BLOCK #1 ---

	slot9 = if not dura then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 18-18, warpins: 1 ---
	slot9 = 0.2

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 19-32, warpins: 2 ---
	slot7(slot8, slot9, (-x + display.cx) - tw/2, (-y + display.cy) - th/2)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 33-47, warpins: 1 ---
	self.pos(self, (-x + display.cx) - tw/2, (-y + display.cy) - th/2)
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 48-53, warpins: 2 ---
	self.updateLookArea(self, x, y)

	return 
	--- END OF BLOCK #5 ---



end
map.setGrayState = function (self)
	--- BLOCK #0 1-10, warpins: 1 ---
	self.gray = true
	local f = res.getFilter("gray")

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.tiles)

	LOOP BLOCK #1
	GO OUT TO BLOCK #14


	--- BLOCK #1 11-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k2, v2 in pairs(v)

	LOOP BLOCK #2
	GO OUT TO BLOCK #13


	--- BLOCK #2 15-18, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot12 = if v2.sprites.bg then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 19-24, warpins: 1 ---
	v2.sprites.bg:setFilter(f)
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 25-28, warpins: 2 ---
	--- END OF BLOCK #4 ---

	slot12 = if v2.sprites.mid then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 29-34, warpins: 1 ---
	v2.sprites.mid:setFilter(f)
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 35-38, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot12 = if v2.sprites.midAni then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 39-44, warpins: 1 ---
	v2.sprites.midAni:setFilter(f)
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 45-48, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot12 = if v2.sprites.obj then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 49-54, warpins: 1 ---
	v2.sprites.obj:setFilter(f)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 55-58, warpins: 2 ---
	--- END OF BLOCK #10 ---

	slot12 = if v2.sprites.ani then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 59-64, warpins: 1 ---
	v2.sprites.ani:setFilter(f)
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 65-66, warpins: 3 ---
	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #13 67-68, warpins: 2 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #14 69-72, warpins: 1 ---
	--- END OF BLOCK #14 ---

	for k, v in pairs(self.heros)

	LOOP BLOCK #15
	GO OUT TO BLOCK #17


	--- BLOCK #15 73-76, warpins: 1 ---
	v.openFilter(v, "die")
	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 77-78, warpins: 2 ---
	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #17 79-82, warpins: 1 ---
	--- END OF BLOCK #17 ---

	for k, v in pairs(self.mons)

	LOOP BLOCK #18
	GO OUT TO BLOCK #20


	--- BLOCK #18 83-86, warpins: 1 ---
	v.openFilter(v, "die")
	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 87-88, warpins: 2 ---
	--- END OF BLOCK #19 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #20 89-92, warpins: 1 ---
	--- END OF BLOCK #20 ---

	for k, v in pairs(self.npcs)

	LOOP BLOCK #21
	GO OUT TO BLOCK #23


	--- BLOCK #21 93-96, warpins: 1 ---
	v.openFilter(v, "die")

	--- END OF BLOCK #21 ---

	FLOW; TARGET BLOCK #22


	--- BLOCK #22 97-98, warpins: 2 ---
	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #20


	--- BLOCK #23 99-99, warpins: 1 ---
	return 
	--- END OF BLOCK #23 ---



end
map.getMapPosWithScreenPos = function (self, x, y)
	--- BLOCK #0 1-39, warpins: 1 ---
	local tw = mapDef.tile.w
	local th = mapDef.tile.h
	local diffx = x - display.cx
	local diffy = y - display.cy
	local node = self.player.node

	return node.getPositionX(node) + tw/2 + diffx/main_scene.ground:getScale(), node.getPositionY(node) + th/2 + diffy/main_scene.ground:getScale()
	--- END OF BLOCK #0 ---



end
map.getMapPos = function (self, gameX, gameY)
	--- BLOCK #0 1-11, warpins: 1 ---
	return gameX*mapDef.tile.w, (self.h - gameY)*mapDef.tile.h
	--- END OF BLOCK #0 ---



end
map.getGamePos = function (self, x, y)
	--- BLOCK #0 1-18, warpins: 1 ---
	return math.floor(x/mapDef.tile.w), math.floor(self.h - y/mapDef.tile.h + 1)
	--- END OF BLOCK #0 ---



end
map.addDoorTile = function (self, data, x, y)
	--- BLOCK #0 1-10, warpins: 1 ---
	local idx = ycFunction:band(data.doorIndex, 127)
	local door = self.doors[idx]
	--- END OF BLOCK #0 ---

	slot5 = if not door then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-13, warpins: 1 ---
	door = {}
	self.doors[idx] = door

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 14-17, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for k, v in pairs(door)


	LOOP BLOCK #3
	GO OUT TO BLOCK #7


	--- BLOCK #3 18-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v.x == x then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 21-23, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if v.y == y then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 24-24, warpins: 1 ---
	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 25-26, warpins: 4 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #7 27-34, warpins: 1 ---
	door[#door + 1] = {
		x = x,
		y = y,
		data = data
	}

	return 
	--- END OF BLOCK #7 ---



end
map.setDoorState = function (self, isOpen, x, y)
	--- BLOCK #0 1-8, warpins: 1 ---
	local data = self.file:gettile(x, y)
	--- END OF BLOCK #0 ---

	slot4 = if data then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #1 9-18, warpins: 1 ---
	local idx = ycFunction:band(data.doorIndex, 127)
	local door = self.doors[idx]

	--- END OF BLOCK #1 ---

	slot6 = if door then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 19-22, warpins: 1 ---
	--- END OF BLOCK #2 ---

	for k, v in pairs(door)


	LOOP BLOCK #3
	GO OUT TO BLOCK #6


	--- BLOCK #3 23-29, warpins: 1 ---
	local tile = self.tiles[v.x][v.y]
	--- END OF BLOCK #3 ---

	slot12 = if tile then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 30-35, warpins: 1 ---
	v.data.doorOpen = isOpen

	tile.setDoorState(tile, v.data)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 36-37, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 38-38, warpins: 3 ---
	return 
	--- END OF BLOCK #6 ---



end
map.addSafeZoneEff = function (self, x, y, range)
	--- BLOCK #0 1-9, warpins: 1 ---
	local key = self.xy2key(self, x, y)

	--- END OF BLOCK #0 ---

	slot5 = if self.safezoneEffs[key] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-10, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 11-47, warpins: 2 ---
	self.safezoneEffs[key] = true
	local points = {}
	points[1] = {
		flag = 0,
		x = x - range,
		y = y - range - 1
	}
	points[2] = {
		flag = 2,
		x = x + range,
		y = y - range - 1
	}
	points[3] = {
		flag = 4,
		x = x + range,
		y = (y + range) - 1
	}
	points[4] = {
		flag = 6,
		x = x - range,
		y = (y + range) - 1
	}
	--- END OF BLOCK #2 ---

	for i=1, range*2 + 1, 1
	LOOP BLOCK #3
	GO OUT TO BLOCK #4

	--- BLOCK #3 48-91, warpins: 2 ---
	points[#points + 1] = {
		flag = 1,
		x = (x - range + i) - 1,
		y = y - range - 1
	}
	points[#points + 1] = {
		flag = 3,
		x = x + range,
		y = (y - range + i) - 2
	}
	points[#points + 1] = {
		flag = 5,
		x = (x - range + i) - 1,
		y = y + range + 1
	}
	points[#points + 1] = {
		flag = 7,
		x = x - range - 2,
		y = (y - range + i) - 2
	}

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #4 92-95, warpins: 1 ---
	--- END OF BLOCK #4 ---

	for i, v in ipairs(points)


	LOOP BLOCK #5
	GO OUT TO BLOCK #13


	--- BLOCK #5 96-100, warpins: 1 ---
	local x = v.x
	local y = v.y
	--- END OF BLOCK #5 ---

	if self.mapid == "0" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #6 101-103, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if 319 <= x then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #7 104-106, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if x <= 337 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #8 107-109, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if 261 <= y then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #9 110-112, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if y <= 276 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 113-113, warpins: 1 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #11 114-144, warpins: 5 ---
	local spr = m2spr.playAnimation("magic10", v.flag*10 + 2040, 4, 0.2, true, nil, nil, nil, nil, 1):addto(self.layers.mid, 99999)

	__position(spr, x*mapDef.tile.w, (self.h - y)*mapDef.tile.h)

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 145-146, warpins: 3 ---
	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #13 147-147, warpins: 1 ---
	return 
	--- END OF BLOCK #13 ---



end
map.canWalk = function (self, gamex, gamey, params)
	--- BLOCK #0 1-3, warpins: 1 ---
	local ret = {}

	--- END OF BLOCK #0 ---

	slot3 = if params then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 4-6, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot5 = if params.useBlockInfo then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 7-14, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot5 = if self.file:getblock(gamex, gamey)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #3 15-17, warpins: 1 ---
	ret.block = "block"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #4 18-25, warpins: 2 ---
	local data = self.file:gettile(gamex, gamey)

	--- END OF BLOCK #4 ---

	slot5 = if data then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #5 26-34, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if 0 < ycFunction:band(data.doorIndex, 128)

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 35-37, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot6 = if not data.doorOpen then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 38-41, warpins: 1 ---
	ret.block = "door"
	ret.data = data
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #8 42-44, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot6 = if not data.canWalk then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 45-46, warpins: 1 ---
	ret.block = "map"
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 47-49, warpins: 6 ---
	--- END OF BLOCK #10 ---

	slot5 = if not ret.block then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 50-55, warpins: 1 ---
	ret = self.isObjblock(self, gamex, gamey)

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 56-56, warpins: 2 ---
	return ret
	--- END OF BLOCK #12 ---



end
map.canFly = function (self, gamex, gamey, params)
	--- BLOCK #0 1-8, warpins: 1 ---
	local data = self.file:gettile(gamex, gamey)

	return data.canFly
	--- END OF BLOCK #0 ---



end
map.getObjeBlocks = function (self)
	--- BLOCK #0 1-15, warpins: 1 ---
	local objects = {}

	local function checkRoles(roles)
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		for k, v in pairs(roles)


		LOOP BLOCK #1
		GO OUT TO BLOCK #5


		--- BLOCK #1 5-7, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot6 = if not v.isDummy then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 8-10, warpins: 1 ---
		--- END OF BLOCK #2 ---

		slot6 = if not v.die then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 11-20, warpins: 1 ---
		objects[#objects + 1] = cc.p(v.x, v.y)

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 21-22, warpins: 4 ---
		--- END OF BLOCK #4 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #0


		--- BLOCK #5 23-23, warpins: 1 ---
		return 
		--- END OF BLOCK #5 ---



	end

	checkRoles(self.mons)
	checkRoles(self.npcs)
	checkRoles(self.heros)
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.stalls)

	LOOP BLOCK #1
	GO OUT TO BLOCK #8


	--- BLOCK #1 16-18, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot8 = if not v.isDummy then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #2 19-28, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot8 = if not g_data.map:isInSafeZone(self.mapid, v.x, v.y)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #3 29-32, warpins: 1 ---
	--- END OF BLOCK #3 ---

	for i=0, 2, 1
	LOOP BLOCK #4
	GO OUT TO BLOCK #7

	--- BLOCK #4 33-36, warpins: 2 ---
	--- END OF BLOCK #4 ---

	for j=0, 2, 1
	LOOP BLOCK #5
	GO OUT TO BLOCK #6

	--- BLOCK #5 37-46, warpins: 2 ---
	objects[#objects] = cc.p(v.x + i, v.y + j)

	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #6 47-47, warpins: 1 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #7 48-49, warpins: 4 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #8 50-51, warpins: 1 ---
	return objects
	--- END OF BLOCK #8 ---



end
map.isObjblock = function (self, gamex, gamey)
	--- BLOCK #0 1-4, warpins: 1 ---
	local ret = {}

	--- END OF BLOCK #0 ---

	slot4 = if not ret.block then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #1 5-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k, v in pairs(self.mons)


	LOOP BLOCK #2
	GO OUT TO BLOCK #8


	--- BLOCK #2 9-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot9 = if not v.isDummy then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #3 12-14, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if gamex == v.x then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #4 15-17, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if gamey == v.y then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #5 18-20, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 21-23, warpins: 1 ---
	ret.block = "mon"

	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 24-25, warpins: 5 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #8 26-28, warpins: 3 ---
	--- END OF BLOCK #8 ---

	slot4 = if not ret.block then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #9 29-32, warpins: 1 ---
	--- END OF BLOCK #9 ---

	for k, v in pairs(self.npcs)


	LOOP BLOCK #10
	GO OUT TO BLOCK #16


	--- BLOCK #10 33-35, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot9 = if not v.isDummy then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #11 36-38, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if gamex == v.x then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #12 39-41, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if gamey == v.y then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #13 42-44, warpins: 1 ---
	--- END OF BLOCK #13 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 45-47, warpins: 1 ---
	ret.block = "npc"

	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #15 48-49, warpins: 5 ---
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #16 50-52, warpins: 3 ---
	--- END OF BLOCK #16 ---

	slot4 = if not ret.block then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #17 53-56, warpins: 1 ---
	--- END OF BLOCK #17 ---

	for k, v in pairs(self.heros)


	LOOP BLOCK #18
	GO OUT TO BLOCK #24


	--- BLOCK #18 57-59, warpins: 1 ---
	--- END OF BLOCK #18 ---

	slot9 = if not v.isDummy then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #19 60-62, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if gamex == v.x then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #20 63-65, warpins: 1 ---
	--- END OF BLOCK #20 ---

	if gamey == v.y then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #21 66-68, warpins: 1 ---
	--- END OF BLOCK #21 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #22 69-71, warpins: 1 ---
	ret.block = "hero"

	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #24


	--- BLOCK #23 72-73, warpins: 5 ---
	--- END OF BLOCK #23 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #24 74-76, warpins: 3 ---
	--- END OF BLOCK #24 ---

	slot4 = if not ret.block then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #33
	end


	--- BLOCK #25 77-80, warpins: 1 ---
	--- END OF BLOCK #25 ---

	for k, v in pairs(self.stalls)


	LOOP BLOCK #26
	GO OUT TO BLOCK #33


	--- BLOCK #26 81-83, warpins: 1 ---
	--- END OF BLOCK #26 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #27
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #27 84-86, warpins: 1 ---
	--- END OF BLOCK #27 ---

	if v.x <= gamex then
	JUMP TO BLOCK #28
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #28 87-90, warpins: 1 ---
	--- END OF BLOCK #28 ---

	if gamex <= v.x + 2 then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #29 91-93, warpins: 1 ---
	--- END OF BLOCK #29 ---

	if v.y <= gamey then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #30 94-97, warpins: 1 ---
	--- END OF BLOCK #30 ---

	if gamey <= v.y + 2 then
	JUMP TO BLOCK #31
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #31 98-100, warpins: 1 ---
	ret.block = "map"

	--- END OF BLOCK #31 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #33


	--- BLOCK #32 101-102, warpins: 6 ---
	--- END OF BLOCK #32 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #25


	--- BLOCK #33 103-103, warpins: 3 ---
	return ret
	--- END OF BLOCK #33 ---



end
map.procAllRoles = function (self, f)
	--- BLOCK #0 1-10, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, roles in ipairs({
		self.heros,
		self.npcs,
		self.mons
	})

	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 11-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k, v in pairs(roles)

	LOOP BLOCK #2
	GO OUT TO BLOCK #4


	--- BLOCK #2 15-17, warpins: 1 ---
	f(v)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 18-19, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #4 20-21, warpins: 2 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 22-22, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end
map.findRole = function (self, roleid, params)
	--- BLOCK #0 1-5, warpins: 1 ---
	local role = nil
	role = self.heros[roleid]

	--- END OF BLOCK #0 ---

	slot3 = if role then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-6, warpins: 1 ---
	return role

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-10, warpins: 2 ---
	role = self.npcs[roleid]

	--- END OF BLOCK #2 ---

	slot3 = if role then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 11-11, warpins: 1 ---
	return role

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 12-15, warpins: 2 ---
	role = self.mons[roleid]

	--- END OF BLOCK #4 ---

	slot3 = if role then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 16-16, warpins: 1 ---
	return role

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 17-18, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot2 = if params then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #7 19-21, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot4 = if params.feature then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #8 22-26, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if type(params.feature)

	 == "number" then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 27-32, warpins: 1 ---
	params.feature = def.role.makeTFeature(params.feature)

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 33-38, warpins: 2 ---
	return self.newRole(self, params), true
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 39-39, warpins: 3 ---
	return 
	--- END OF BLOCK #11 ---



end
map.findRoelWithPos = function (self, x, y, type)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if type then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-4, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if type == "hero" then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #2 5-8, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for k, v in pairs(self.heros)


	LOOP BLOCK #3
	GO OUT TO BLOCK #7


	--- BLOCK #3 9-11, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v.x == x then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 12-14, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if v.y == y then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 15-15, warpins: 1 ---
	return v

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 16-17, warpins: 4 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #7 18-19, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot3 = if type then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 20-21, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if type == "mon" then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #9 22-25, warpins: 2 ---
	--- END OF BLOCK #9 ---

	for k, v in pairs(self.mons)


	LOOP BLOCK #10
	GO OUT TO BLOCK #14


	--- BLOCK #10 26-28, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if v.x == x then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #11 29-31, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if v.y == y then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 32-32, warpins: 1 ---
	return v

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 33-34, warpins: 4 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #14 35-36, warpins: 2 ---
	--- END OF BLOCK #14 ---

	slot3 = if type then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 37-38, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if type == "npc" then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #16 39-42, warpins: 2 ---
	--- END OF BLOCK #16 ---

	for k, v in pairs(self.npcs)


	LOOP BLOCK #17
	GO OUT TO BLOCK #21


	--- BLOCK #17 43-45, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if v.x == x then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #18 46-48, warpins: 1 ---
	--- END OF BLOCK #18 ---

	if v.y == y then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 49-49, warpins: 1 ---
	return v
	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 50-51, warpins: 4 ---
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #21 52-52, warpins: 2 ---
	return 
	--- END OF BLOCK #21 ---



end
map.findHeroWithName = function (self, name)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.heros)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.info:getName()

	 == name then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-11, warpins: 1 ---
	return v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 12-13, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 14-14, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
map.findNPCWithName = function (self, name)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.npcs)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.info:getName()

	 == name then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-11, warpins: 1 ---
	return v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 12-13, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 14-14, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
map.findNearMon = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local bestDis, bestMon = nil

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.mons)


	LOOP BLOCK #1
	GO OUT TO BLOCK #7


	--- BLOCK #1 6-12, warpins: 1 ---
	local name = v.info:getName()

	--- END OF BLOCK #1 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 13-17, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot9 = if not v.isPolice(v)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 18-39, warpins: 1 ---
	local x = math.abs(self.player.x - v.x)
	local y = math.abs(self.player.y - v.y)
	local dis = math.sqrt(x*x + y*y)
	--- END OF BLOCK #3 ---

	slot1 = if bestDis then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 40-41, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if dis < bestDis then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 42-43, warpins: 2 ---
	bestDis = dis
	bestMon = v

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 44-45, warpins: 5 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 46-46, warpins: 1 ---
	return bestMon
	--- END OF BLOCK #7 ---



end
map.newRole = function (self, params)
	--- BLOCK #0 1-13, warpins: 1 ---
	assert(params.roleid, "map.newRole -> roleid must be not nil")

	params.map = self
	local race = params.feature:get("race")
	local ret = nil
	--- END OF BLOCK #0 ---

	if race ~= 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 14-15, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if race ~= 1 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 16-17, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if race == 150 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #3 18-34, warpins: 3 ---
	ret = hero.new(params)

	ret.node:addTo(self.layers.obj)

	self.heros[params.roleid] = ret

	--- END OF BLOCK #3 ---

	slot4 = if params.isPlayer then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #4 35-39, warpins: 1 ---
	self.setPlayer(self, ret)

	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #5 40-41, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if race == 50 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 42-56, warpins: 1 ---
	ret = npc.new(params)

	ret.node:addTo(self.layers.obj)

	self.npcs[params.roleid] = ret
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 57-70, warpins: 1 ---
	ret = mon.new(params)

	ret.node:addTo(self.layers.obj)

	self.mons[params.roleid] = ret

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 71-73, warpins: 4 ---
	--- END OF BLOCK #8 ---

	slot4 = if main_scene then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #9 74-79, warpins: 1 ---
	--- END OF BLOCK #9 ---

	slot4 = if main_scene.ui.panels.minimap then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 80-87, warpins: 1 ---
	main_scene.ui.panels.minimap:addPoint(ret)
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 88-95, warpins: 3 ---
	self.uptRoleXY(self, ret, false, params.x, params.y)

	return ret
	--- END OF BLOCK #11 ---



end
map.removeRole = function (self, roleid)
	--- BLOCK #0 1-5, warpins: 1 ---
	local role = nil
	role = self.heros[roleid]

	--- END OF BLOCK #0 ---

	slot2 = if role then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-18, warpins: 1 ---
	self.uptRoleXY(self, role, true)
	role.info:remove()
	role.node:removeSelf()

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 19-25, warpins: 2 ---
	self.heros[roleid] = nil
	role = self.npcs[roleid]

	--- END OF BLOCK #2 ---

	slot2 = if role then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 26-38, warpins: 1 ---
	self.uptRoleXY(self, role, true)
	role.info:remove()
	role.node:removeSelf()

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 39-45, warpins: 2 ---
	self.npcs[roleid] = nil
	role = self.mons[roleid]

	--- END OF BLOCK #4 ---

	slot2 = if role then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 46-58, warpins: 1 ---
	self.uptRoleXY(self, role, true)
	role.info:remove()
	role.node:removeSelf()

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 59-64, warpins: 2 ---
	self.mons[roleid] = nil

	--- END OF BLOCK #6 ---

	slot3 = if main_scene then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 65-70, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot3 = if main_scene.ui.panels.minimap then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 71-78, warpins: 1 ---
	main_scene.ui.panels.minimap:removePoint(roleid)

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 79-79, warpins: 3 ---
	return 
	--- END OF BLOCK #9 ---



end
map.setPlayer = function (self, player)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.player then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-12, warpins: 1 ---
	self.removeTopRenderNode(self, self.player)
	self.player.node:removeSelf()

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-19, warpins: 2 ---
	self.player = player

	self.addTopRenderNode(self, self.player.node)

	return 
	--- END OF BLOCK #2 ---



end
map.xy2key = function (self, x, y)
	--- BLOCK #0 1-3, warpins: 1 ---
	return x*10000 + y
	--- END OF BLOCK #0 ---



end
map.uptRoleXY = function (self, role, isRemove, x, y)
	--- BLOCK #0 1-3, warpins: 1 ---
	local oldKey = role.xyKey
	--- END OF BLOCK #0 ---

	slot6 = if x then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot6 = if y then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 6-10, warpins: 1 ---
	local newKey = self.xy2key(self, x, y)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 11-12, warpins: 3 ---
	--- END OF BLOCK #3 ---

	if oldKey == newKey then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 13-13, warpins: 1 ---
	return 

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 14-15, warpins: 2 ---
	--- END OF BLOCK #5 ---

	slot5 = if oldKey then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #6 16-19, warpins: 1 ---
	local roles = self.roleXYs[oldKey]

	--- END OF BLOCK #6 ---

	slot7 = if roles then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #7 20-23, warpins: 1 ---
	--- END OF BLOCK #7 ---

	for i, v in ipairs(roles)

	LOOP BLOCK #8
	GO OUT TO BLOCK #11


	--- BLOCK #8 24-25, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if v == role then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 26-31, warpins: 1 ---
	table.remove(roles, i)

	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #10 32-33, warpins: 2 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #11 34-35, warpins: 4 ---
	--- END OF BLOCK #11 ---

	slot2 = if isRemove then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 36-36, warpins: 1 ---
	return 

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 37-40, warpins: 2 ---
	local roles = self.roleXYs[newKey]
	--- END OF BLOCK #13 ---

	slot7 = if not roles then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 41-43, warpins: 1 ---
	roles = {}
	self.roleXYs[newKey] = roles
	--- END OF BLOCK #14 ---

	FLOW; TARGET BLOCK #15


	--- BLOCK #15 44-49, warpins: 2 ---
	roles[#roles + 1] = role

	--- END OF BLOCK #15 ---

	slot8 = if self.player then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #16 50-52, warpins: 1 ---
	--- END OF BLOCK #16 ---

	slot8 = if not self.isStage then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #17 53-64, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if math.abs(x - self.player.x + 1)
	 <= self.screenw/2 + 1 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 65-75, warpins: 1 ---
	--- END OF BLOCK #18 ---

	if math.abs(y - self.player.y)

	 >= self.screenh/2 + 2 then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 76-77, warpins: 2 ---
	slot8 = false
	--- END OF BLOCK #19 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #21


	--- BLOCK #20 78-78, warpins: 1 ---
	slot8 = true
	--- END OF BLOCK #20 ---

	FLOW; TARGET BLOCK #21


	--- BLOCK #21 79-80, warpins: 2 ---
	role.isInScreen = slot8
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #23


	--- BLOCK #22 81-82, warpins: 2 ---
	role.isInScreen = true

	--- END OF BLOCK #22 ---

	FLOW; TARGET BLOCK #23


	--- BLOCK #23 83-86, warpins: 2 ---
	--- END OF BLOCK #23 ---

	for i, v in ipairs(roles)

	LOOP BLOCK #24
	GO OUT TO BLOCK #26


	--- BLOCK #24 87-89, warpins: 1 ---
	v.uptIsIgnore(v)
	--- END OF BLOCK #24 ---

	FLOW; TARGET BLOCK #25


	--- BLOCK #25 90-91, warpins: 2 ---
	--- END OF BLOCK #25 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #23


	--- BLOCK #26 92-96, warpins: 1 ---
	role.uptIsIgnore(role)

	role.xyKey = newKey

	return 
	--- END OF BLOCK #26 ---



end
map.showItem = function (self, isshow, itemid, gamex, gamey, name, imgid, owner, state)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if self.items[itemid] == nil then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	slot9 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 7-7, warpins: 1 ---
	slot9 = true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 8-9, warpins: 2 ---
	--- END OF BLOCK #3 ---

	if isshow ~= slot9 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #4 10-11, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot1 = if isshow then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #5 12-98, warpins: 1 ---
	local x, y = self.getMapPos(self, gamex, gamey)
	local item = {}
	item.x = gamex
	item.y = gamey
	item.owner = owner
	item.imgid = imgid
	item.itemid = itemid
	item.spr = m2spr.new("dnitems", imgid, {
		asyncPriority = 1
	}):addto(self.layers.obj, gamey):pos(x + mapDef.tile.w/2, y + mapDef.tile.h/2):runs({
		cc.DelayTime:create(math.random(3000)/1000),
		cc.RepeatForever:create(transition.sequence({
			cc.CallFunc:create(function ()
				--- BLOCK #0 1-28, warpins: 1 ---
				local spr = m2spr.playAnimation("prguse", 410, 9, 0.08, true, true, true, nil, nil, 1):addto(self.layers.itemEff)

				__position(spr, x, y + mapDef.tile.h)

				return 
				--- END OF BLOCK #0 ---



			end),
			cc.DelayTime:create(0.54),
			cc.DelayTime:create(5)
		}))
	})
	local isGood = false
	local showName = false
	--- END OF BLOCK #5 ---

	slot8 = if state then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 99-101, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if 0 < state then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 102-111, warpins: 1 ---
	isGood = g_data.setting.getGoodAttItemSetting().isGood
	showName = g_data.setting.getGoodAttItemSetting().hintName
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 112-113, warpins: 3 ---
	--- END OF BLOCK #8 ---

	slot12 = if not isGood then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 114-118, warpins: 1 ---
	isGood = settingLogic.isGoodItem(name)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 119-120, warpins: 2 ---
	--- END OF BLOCK #10 ---

	slot13 = if not showName then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 121-125, warpins: 1 ---
	showName = settingLogic.showItemName(name)
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 126-127, warpins: 2 ---
	--- END OF BLOCK #12 ---

	slot13 = if not showName then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 128-129, warpins: 1 ---
	--- END OF BLOCK #13 ---

	slot12 = if isGood then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #14 130-134, warpins: 2 ---
	local nameColor = def.colors.skyBlue
	--- END OF BLOCK #14 ---

	slot12 = if isGood then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 135-137, warpins: 1 ---
	nameColor = def.colors.clRed
	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 138-139, warpins: 2 ---
	--- END OF BLOCK #16 ---

	slot8 = if state then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #17 140-142, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if 0 < state then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 143-145, warpins: 1 ---
	nameColor = def.colors.clpurple
	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 146-165, warpins: 3 ---
	item.state = state
	item.name = an.newLabel(name, 12, 1, {
		bufferChannel = 8,
		color = nameColor
	}):addto(self.layers.itemName)

	__position(item.name, x, y + 20)

	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 166-169, warpins: 2 ---
	self.items[itemid] = item
	item.itemName = name

	return 

	--- END OF BLOCK #20 ---

	FLOW; TARGET BLOCK #21


	--- BLOCK #21 170-178, warpins: 1 ---
	local item = self.items[itemid]

	item.spr:removeSelf()
	--- END OF BLOCK #21 ---

	slot10 = if item.name then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #22 179-182, warpins: 1 ---
	item.name:removeSelf()

	--- END OF BLOCK #22 ---

	FLOW; TARGET BLOCK #23


	--- BLOCK #23 183-185, warpins: 2 ---
	self.items[itemid] = nil
	--- END OF BLOCK #23 ---

	FLOW; TARGET BLOCK #24


	--- BLOCK #24 186-187, warpins: 3 ---
	--- END OF BLOCK #24 ---



end
map.updateItems = function (self)
	--- BLOCK #0 1-7, warpins: 1 ---
	local t = self.items
	self.items = {}

	--- END OF BLOCK #0 ---

	for k, v in pairs(t)

	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 8-14, warpins: 1 ---
	v.spr:removeSelf()
	--- END OF BLOCK #1 ---

	slot7 = if v.name then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-18, warpins: 1 ---
	v.name:removeSelf()
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 19-29, warpins: 2 ---
	self.showItem(self, true, k, v.x, v.y, v.itemName, v.imgid, v.owner, v.state)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 30-31, warpins: 2 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 32-32, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end
map.getItems = function (self, x, y)
	--- BLOCK #0 1-5, warpins: 1 ---
	local ret = {}

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)


	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 6-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.x == x then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 9-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v.y == y then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-14, warpins: 1 ---
	ret[#ret + 1] = v

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 15-16, warpins: 4 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 17-17, warpins: 1 ---
	return ret
	--- END OF BLOCK #5 ---



end
map.showMagic = function (self, roleid, effectType, effectID, x, y, target)
	--- BLOCK #0 1-6, warpins: 1 ---
	local role = self.findRole(self, roleid)

	--- END OF BLOCK #0 ---

	slot7 = if not role then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-7, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-17, warpins: 2 ---
	magic.showMagic(self, role, target, x, y, effectID)

	return 
	--- END OF BLOCK #2 ---



end
map.showEffectForName = function (self, name, params)
	--- BLOCK #0 1-7, warpins: 1 ---
	magic.showWithName(self, name, params)

	return 
	--- END OF BLOCK #0 ---



end
local __position = cc.Node.setPosition
map.showEvent = function (self, serverID, x, y, type, eventMsg)
	--- BLOCK #0 1-8, warpins: 1 ---
	self.hideEvent(self, serverID)

	--- END OF BLOCK #0 ---

	if mapDef.ET_FIRE == type then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-42, warpins: 1 ---
	local imgid = "magic"
	local begin = 1630
	local frame = 6
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = m2spr.playAnimation(imgid, begin, frame, 0.08, true):opacity(76.5):addto(self.layers.obj, y + mapDef.tile.h)
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #2 43-46, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if mapDef.ET_HOLYCURTAIN == type then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 47-76, warpins: 1 ---
	local imgid = "magic"
	local begin = 1390
	local frame = 10
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = m2spr.playAnimation(imgid, begin, frame, 0.08, true):addto(self.layers.obj, y + mapDef.tile.h)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #4 77-80, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if mapDef.ET_PILESTONES == type then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 81-109, warpins: 1 ---
	local imgid = "effect"
	local begin = 64
	local frame = 5
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = m2spr.playAnimation(imgid, begin, frame, 0.12, false, false, true):addto(self.layers.mid, 99999)
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #6 110-113, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if mapDef.ET_DIGOUTZOMBI == type then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 114-142, warpins: 1 ---
	local imgid = "mon6"
	local begin = 420
	local frame = 6
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = m2spr.playAnimation(imgid, begin, frame, 0.3, false, false, true):addto(self.layers.mid, 99999)
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #8 143-146, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if mapDef.ET_YanHuaTextEvent == type then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 147-183, warpins: 1 ---
	x, y = self.getMapPos(self, x, y)
	x = x - 130
	self.events[serverID] = an.newLabel(eventMsg.get(eventMsg, "desc"), 100, 0.5, {
		color = cc.c3b(255, 255, 0),
		sc = display.COLOR_WHITE
	}):addto(self.layers.obj, 99999)
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #10 184-187, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if mapDef.ET_CAKEFIRE == type then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 188-218, warpins: 1 ---
	local imgid = "prguse3"
	local begin = mapDef.CAKEFIREBASE
	local frame = 30
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = m2spr.playAnimation(imgid, begin, frame, 0.08, true):addto(self.layers.obj, y + mapDef.tile.h)
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #12 219-222, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if mapDef.ET_INTENTLY <= type then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #13 223-226, warpins: 1 ---
	--- END OF BLOCK #13 ---

	if type <= mapDef.ET_SUCHASFOGDREAM then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 227-262, warpins: 1 ---
	local frameBegin = {
		20,
		20,
		16,
		16,
		16,
		16,
		16
	}
	local imgid = "magic3"
	local begin = (type - mapDef.ET_INTENTLY)*20 + 60
	local frame = frameBegin[type - mapDef.ET_INTENTLY + 1]
	x, y = self.getMapPos(self, x, y)

	m2spr.playAnimation(imgid, begin, frame, 0.12, true, true, true):addto(self.layers.mid, 99999)

	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #15 263-266, warpins: 2 ---
	--- END OF BLOCK #15 ---

	if mapDef.ET_STALL_EVENT == type then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 267-294, warpins: 1 ---
	x, y = self.getMapPos(self, x, y)
	self.events[serverID] = stall.new({
		x = x,
		y = y,
		serverID = serverID,
		map = self,
		data = eventMsg
	}):addto(self.layers.obj, 99999)
	self.stalls[serverID] = self.events[serverID]

	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 295-298, warpins: 9 ---
	--- END OF BLOCK #17 ---

	slot6 = if self.events[serverID] then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 299-308, warpins: 1 ---
	self.events[serverID]:pos(x, y + mapDef.tile.h)

	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 309-309, warpins: 2 ---
	return 
	--- END OF BLOCK #19 ---



end
map.hideEvent = function (self, serverID)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.events[serverID] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-12, warpins: 1 ---
	self.events[serverID]:removeSelf()

	self.events[serverID] = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-13, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
map.removeStall = function (self, serverID)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.stalls[serverID] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	self.stalls[serverID] = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-8, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
map.getHeroNameList = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local ret = {}

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.heros)

	LOOP BLOCK #1
	GO OUT TO BLOCK #7


	--- BLOCK #1 6-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot7 = if not v.isPlayer then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 9-14, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot7 = if v.info:getName()
	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 15-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot7 = if not v.info:isHero()

	 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 21-23, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot7 = if not v.isDummy then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 24-30, warpins: 1 ---
	ret[#ret + 1] = v.info:getName()

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 31-32, warpins: 6 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 33-33, warpins: 1 ---
	return ret
	--- END OF BLOCK #7 ---



end
map.addTile = function (self, x, y)
	--- BLOCK #0 1-11, warpins: 1 ---
	self.readyTiles[self.xy2key(self, x, y)] = {
		x,
		y
	}

	return 
	--- END OF BLOCK #0 ---



end
map.processTile = function (self, x, y)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if not self.tiles[x] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	self.tiles[x] = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-12, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot3 = if not self.tiles[x][y] then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 13-23, warpins: 1 ---
	self.tiles[x][y] = maptile.new(self, x, y)

	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-24, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
map.processTiles = function (self, dt)
	--- BLOCK #0 1-5, warpins: 1 ---
	local cnt = 0

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.readyTiles)


	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 6-15, warpins: 1 ---
	self.readyTiles[k] = nil

	--- END OF BLOCK #1 ---

	slot8 = if self.processTile(self, v[1], v[2])

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 16-20, warpins: 1 ---
	cnt = cnt + 1

	--- END OF BLOCK #2 ---

	if mapDef.loadNum < cnt then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 21-21, warpins: 1 ---
	return 

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 22-23, warpins: 4 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 24-26, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot3 = if self.gray then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 27-29, warpins: 1 ---
	self.setGrayState(self)

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 30-30, warpins: 2 ---
	return 
	--- END OF BLOCK #7 ---



end
map.clearTiles = function (self)
	--- BLOCK #0 1-21, warpins: 1 ---
	local x = self.player.x
	local y = self.player.y
	local dis = math.floor(display.width/mapDef.tile.w) + mapDef.loadOutsideAreaBottom*2

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.tiles)

	LOOP BLOCK #1
	GO OUT TO BLOCK #7


	--- BLOCK #1 22-25, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k2, v2 in pairs(v)

	LOOP BLOCK #2
	GO OUT TO BLOCK #6


	--- BLOCK #2 26-31, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if dis >= math.abs(x - k)
	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 32-37, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if dis < math.abs(y - k2)
	 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 38-44, warpins: 2 ---
	v2.remove(v2)

	self.tiles[k][k2] = nil

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 45-46, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #6 47-48, warpins: 2 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 49-52, warpins: 1 ---
	--- END OF BLOCK #7 ---

	for k, v in pairs(self.readyTiles)

	LOOP BLOCK #8
	GO OUT TO BLOCK #12


	--- BLOCK #8 53-59, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if dis >= math.abs(x - v[1])
	 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 60-66, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if dis < math.abs(y - v[2])

	 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 67-69, warpins: 2 ---
	self.readyTiles[k] = nil

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 70-71, warpins: 3 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #12 72-72, warpins: 1 ---
	return 
	--- END OF BLOCK #12 ---



end
map.addMsg = function (self, params)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if params.remove then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	local tmpList = newList()

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-10, warpins: 3 ---
	--- END OF BLOCK #2 ---

	slot3 = if not self.msgs.isEmpty()

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 11-11, warpins: 1 ---
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 12-18, warpins: 1 ---
	local msg = self.msgs.popFront()

	--- END OF BLOCK #4 ---

	if msg.roleid ~= params.roleid then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #5 19-22, warpins: 1 ---
	tmpList.pushBack(msg)

	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 23-28, warpins: 1 ---
	self.msgs = tmpList

	self.removeRole(self, params.roleid)

	return 

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 29-33, warpins: 2 ---
	self.msgs.pushBack(params)

	return 
	--- END OF BLOCK #7 ---



end
map.processMsg = function (self, v)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if v.roleid then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #1 4-10, warpins: 1 ---
	local role, isNewCreate = self.findRole(self, v.roleid, v)

	--- END OF BLOCK #1 ---

	slot2 = if role then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #2 11-13, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot4 = if v.ident then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 14-23, warpins: 1 ---
	role.processMsg(role, v.ident, v.x, v.y, v.dir, v.feature, v.state, v.roleParams)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-26, warpins: 2 ---
	--- END OF BLOCK #4 ---

	slot4 = if v.job then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 27-28, warpins: 1 ---
	role.job = v.job
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 29-31, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot4 = if v.name then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #7 32-36, warpins: 1 ---
	local race = role.getRace(role)

	--- END OF BLOCK #7 ---

	if race ~= 98 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #8 37-38, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if race == 153 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 39-39, warpins: 1 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #10 40-44, warpins: 1 ---
	role.info:setName(v.name)

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 45-45, warpins: 5 ---
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 46-48, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if role.__cname == "hero" then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #13 49-60, warpins: 1 ---
	local pName = role.info:getName()
	local attData = g_data.relation:getAttention(pName)
	--- END OF BLOCK #13 ---

	slot5 = if attData then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #14 61-72, warpins: 1 ---
	local colorIdx = attData.get(attData, "color")

	role.info:setNameColor(colorIdx)

	--- END OF BLOCK #14 ---

	slot7 = if v.nameColor then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #15 73-75, warpins: 1 ---
	attData.realNameColor = v.nameColor

	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #16 76-78, warpins: 2 ---
	--- END OF BLOCK #16 ---

	slot4 = if v.nameColor then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #17 79-84, warpins: 1 ---
	role.info:setNameColor(v.nameColor)
	--- END OF BLOCK #17 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #18 85-85, warpins: 0 ---
	--- END OF BLOCK #18 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #11


	--- BLOCK #19 86-88, warpins: 4 ---
	--- END OF BLOCK #19 ---

	slot4 = if v.hp then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #20 89-91, warpins: 1 ---
	--- END OF BLOCK #20 ---

	slot4 = if v.maxhp then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 92-98, warpins: 1 ---
	role.info:setHP(v.hp, v.maxhp, v.outhp)

	--- END OF BLOCK #21 ---

	FLOW; TARGET BLOCK #22


	--- BLOCK #22 99-100, warpins: 3 ---
	--- END OF BLOCK #22 ---

	slot3 = if isNewCreate then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #23 101-106, warpins: 1 ---
	--- END OF BLOCK #23 ---

	if v.roleid == g_data.hero.roleid then
	JUMP TO BLOCK #24
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #24 107-108, warpins: 1 ---
	self.player.hero = role

	--- END OF BLOCK #24 ---

	FLOW; TARGET BLOCK #25


	--- BLOCK #25 109-111, warpins: 5 ---
	--- END OF BLOCK #25 ---

	slot2 = if v.magic then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #26 112-117, warpins: 1 ---
	self.showMagic(self, unpack(v.magic))
	--- END OF BLOCK #26 ---

	FLOW; TARGET BLOCK #27


	--- BLOCK #27 118-120, warpins: 2 ---
	--- END OF BLOCK #27 ---

	slot2 = if v.effect then
	JUMP TO BLOCK #28
	else
	JUMP TO BLOCK #29
	end


	--- BLOCK #28 121-127, warpins: 1 ---
	self.showEffectForName(self, v.effect[1], v.effect[2])

	--- END OF BLOCK #28 ---

	FLOW; TARGET BLOCK #29


	--- BLOCK #29 128-128, warpins: 2 ---
	return 
	--- END OF BLOCK #29 ---



end
map.processMsgs = function (self, dt)
	--- BLOCK #0 1-3, warpins: 1 ---
	local begin = socket.gettime()

	--- END OF BLOCK #0 ---

	FLOW; TARGET BLOCK #1


	--- BLOCK #1 4-8, warpins: 3 ---
	--- END OF BLOCK #1 ---

	slot3 = if not self.msgs.isEmpty()
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 9-9, warpins: 1 ---
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 10-22, warpins: 1 ---
	self.processMsg(self, self.msgs.popFront())
	--- END OF BLOCK #3 ---

	if 0.01 < socket.gettime()

	 - begin then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #1
	end


	--- BLOCK #4 23-23, warpins: 1 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #5 24-24, warpins: 0 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #6 25-25, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
map.update = function (self, dt)
	--- BLOCK #0 1-30, warpins: 1 ---
	self.processTiles(self, dt)
	self.processMsgs(self, dt)

	local roleSize = def.role.size
	local infoUpdate = roleInfo.update
	local roleUpdate = role.update
	local uptIsIgnore = role.uptIsIgnore
	local getPosition = role.getPosition
	local rnum = 0

	--- END OF BLOCK #0 ---

	for k, roles in ipairs({
		self.heros,
		self.npcs,
		self.mons
	})

	LOOP BLOCK #1
	GO OUT TO BLOCK #9


	--- BLOCK #1 31-34, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k, v in pairs(roles)


	LOOP BLOCK #2
	GO OUT TO BLOCK #8


	--- BLOCK #2 35-39, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if 0 >= #v.acts then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 40-42, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot18 = if v.isPlayer then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 43-47, warpins: 2 ---
	rnum = rnum + 1

	roleUpdate(v, dt)
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 48-51, warpins: 2 ---
	--- END OF BLOCK #5 ---

	slot18 = if v.info.dirty then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 52-55, warpins: 1 ---
	infoUpdate(v.info, dt)

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 56-57, warpins: 3 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #8 58-59, warpins: 2 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #9 60-61, warpins: 1 ---
	self.current_frame_updatedRoles = rnum

	return 
	--- END OF BLOCK #9 ---



end
map.checkFlyTo = function (self, from, to)
	--- BLOCK #0 1-18, warpins: 1 ---
	local i, adist, dist, dir = nil
	local x = from.x
	local y = from.y
	local tx = to.x
	local ty = to.y
	adist = math.abs(x - tx) + math.abs(y - ty)
	--- END OF BLOCK #0 ---

	for i=0, 8, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #10

	--- BLOCK #1 19-39, warpins: 2 ---
	dir = self.getNextDirection(self, x, y, tx, ty)
	local ok = nil
	x, y, ok = self.getNextPosition(self, x, y, dir, 1)

	--- END OF BLOCK #1 ---

	slot15 = if ok then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 40-46, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot16 = if not self.canFly(self, x, y)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 47-48, warpins: 2 ---
	return false
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 49-50, warpins: 2 ---
	--- END OF BLOCK #4 ---

	if x == tx then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #5 51-52, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if y == ty then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 53-55, warpins: 1 ---
	return true

	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #7 56-66, warpins: 2 ---
	dist = math.abs(x - tx) + math.abs(y - ty)

	--- END OF BLOCK #7 ---

	if adist < dist then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 67-68, warpins: 1 ---
	return true
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 69-69, warpins: 3 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #10 70-71, warpins: 1 ---
	return true
	--- END OF BLOCK #10 ---



end
map.getNextDirection = function (self, x, y, tx, ty)
	--- BLOCK #0 1-3, warpins: 1 ---
	local fx, fy = nil
	--- END OF BLOCK #0 ---

	if x < tx then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	fx = 1
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #2 6-7, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if x == tx then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 8-9, warpins: 1 ---
	fx = 0
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 10-10, warpins: 1 ---
	fx = -1

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 11-17, warpins: 3 ---
	--- END OF BLOCK #5 ---

	if 2 < math.abs(y - ty)

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #6 18-20, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if tx - 1 <= x then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 21-23, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if x <= tx + 1 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 24-24, warpins: 1 ---
	fx = 0
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 25-26, warpins: 4 ---
	--- END OF BLOCK #9 ---

	if y < ty then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 27-28, warpins: 1 ---
	fy = 1
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #11 29-30, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if y == ty then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 31-32, warpins: 1 ---
	fy = 0
	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #13 33-33, warpins: 1 ---
	fy = -1

	--- END OF BLOCK #13 ---

	FLOW; TARGET BLOCK #14


	--- BLOCK #14 34-40, warpins: 3 ---
	--- END OF BLOCK #14 ---

	if 2 < math.abs(x - tx)

	 then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #15 41-43, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if ty - 1 < y then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #16 44-46, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if y < ty + 1 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 47-47, warpins: 1 ---
	fy = 0

	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 48-49, warpins: 4 ---
	--- END OF BLOCK #18 ---

	if fx == 0 then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #19 50-51, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if fy == -1 then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #20 52-57, warpins: 1 ---
	return def.role.dir.up
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #21 58-59, warpins: 2 ---
	--- END OF BLOCK #21 ---

	if fx == 1 then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #22 60-61, warpins: 1 ---
	--- END OF BLOCK #22 ---

	if fy == -1 then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #23 62-67, warpins: 1 ---
	return def.role.dir.rightUp
	--- END OF BLOCK #23 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #24 68-69, warpins: 2 ---
	--- END OF BLOCK #24 ---

	if fx == 1 then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #25 70-71, warpins: 1 ---
	--- END OF BLOCK #25 ---

	if fy == 0 then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #26 72-77, warpins: 1 ---
	return def.role.dir.right
	--- END OF BLOCK #26 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #27 78-79, warpins: 2 ---
	--- END OF BLOCK #27 ---

	if fx == 1 then
	JUMP TO BLOCK #28
	else
	JUMP TO BLOCK #30
	end


	--- BLOCK #28 80-81, warpins: 1 ---
	--- END OF BLOCK #28 ---

	if fy == 1 then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #30
	end


	--- BLOCK #29 82-87, warpins: 1 ---
	return def.role.dir.rightBottom
	--- END OF BLOCK #29 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #30 88-89, warpins: 2 ---
	--- END OF BLOCK #30 ---

	if fx == 0 then
	JUMP TO BLOCK #31
	else
	JUMP TO BLOCK #33
	end


	--- BLOCK #31 90-91, warpins: 1 ---
	--- END OF BLOCK #31 ---

	if fy == 1 then
	JUMP TO BLOCK #32
	else
	JUMP TO BLOCK #33
	end


	--- BLOCK #32 92-97, warpins: 1 ---
	return def.role.dir.bottom
	--- END OF BLOCK #32 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #33 98-99, warpins: 2 ---
	--- END OF BLOCK #33 ---

	if fx == -1 then
	JUMP TO BLOCK #34
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #34 100-101, warpins: 1 ---
	--- END OF BLOCK #34 ---

	if fy == 1 then
	JUMP TO BLOCK #35
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #35 102-107, warpins: 1 ---
	return def.role.dir.leftBottom
	--- END OF BLOCK #35 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #36 108-109, warpins: 2 ---
	--- END OF BLOCK #36 ---

	if fx == -1 then
	JUMP TO BLOCK #37
	else
	JUMP TO BLOCK #39
	end


	--- BLOCK #37 110-111, warpins: 1 ---
	--- END OF BLOCK #37 ---

	if fy == 0 then
	JUMP TO BLOCK #38
	else
	JUMP TO BLOCK #39
	end


	--- BLOCK #38 112-117, warpins: 1 ---
	return def.role.dir.left
	--- END OF BLOCK #38 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #39 118-119, warpins: 2 ---
	--- END OF BLOCK #39 ---

	if fx == -1 then
	JUMP TO BLOCK #40
	else
	JUMP TO BLOCK #42
	end


	--- BLOCK #40 120-121, warpins: 1 ---
	--- END OF BLOCK #40 ---

	if fy == -1 then
	JUMP TO BLOCK #41
	else
	JUMP TO BLOCK #42
	end


	--- BLOCK #41 122-127, warpins: 1 ---
	return def.role.dir.leftUp
	--- END OF BLOCK #41 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #43


	--- BLOCK #42 128-132, warpins: 2 ---
	return def.role.dir.up
	--- END OF BLOCK #42 ---

	FLOW; TARGET BLOCK #43


	--- BLOCK #43 133-133, warpins: 9 ---
	return 
	--- END OF BLOCK #43 ---



end
map.getNextPosition = function (self, nx, ny, dir, step)
	--- BLOCK #0 1-8, warpins: 1 ---
	local x = nx
	local y = ny
	--- END OF BLOCK #0 ---

	if dir == def.role.dir.up then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 9-11, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if step - 1 < y then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #2 12-13, warpins: 1 ---
	y = y - step
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #3 14-19, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if dir == def.role.dir.rightUp then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #4 20-22, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if step - 1 < x then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #5 23-26, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if y < self.h - step then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #6 27-29, warpins: 1 ---
	x = x + step
	y = y - step
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #7 30-35, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if dir == def.role.dir.right then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 36-39, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if x < self.w - step then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #9 40-41, warpins: 1 ---
	x = x + step
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #10 42-47, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if dir == def.role.dir.rightBottom then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #11 48-51, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if x < self.w - step then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #12 52-55, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if y < self.h - step then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #13 56-58, warpins: 1 ---
	x = x + step
	y = y + step
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #14 59-64, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if dir == def.role.dir.bottom then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #15 65-68, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if y < self.h - step then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #16 69-70, warpins: 1 ---
	y = y + step
	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #17 71-76, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if dir == def.role.dir.leftBottom then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #18 77-80, warpins: 1 ---
	--- END OF BLOCK #18 ---

	if x < self.w - step then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #19 81-83, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if step - 1 < y then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #20 84-86, warpins: 1 ---
	x = x - step
	y = y + step
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #21 87-92, warpins: 1 ---
	--- END OF BLOCK #21 ---

	if dir == def.role.dir.left then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #22 93-95, warpins: 1 ---
	--- END OF BLOCK #22 ---

	if step - 1 < x then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #23 96-97, warpins: 1 ---
	x = x - step
	--- END OF BLOCK #23 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #24 98-103, warpins: 1 ---
	--- END OF BLOCK #24 ---

	if dir == def.role.dir.leftUp then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #25 104-106, warpins: 1 ---
	--- END OF BLOCK #25 ---

	if step - 1 < x then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #26 107-109, warpins: 1 ---
	--- END OF BLOCK #26 ---

	if step - 1 < y then
	JUMP TO BLOCK #27
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #27 110-111, warpins: 1 ---
	x = x - step
	y = y - step
	--- END OF BLOCK #27 ---

	FLOW; TARGET BLOCK #28


	--- BLOCK #28 112-115, warpins: 21 ---
	slot7 = x
	slot8 = y
	--- END OF BLOCK #28 ---

	if x == nx then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #31
	end


	--- BLOCK #29 116-117, warpins: 1 ---
	--- END OF BLOCK #29 ---

	if y == ny then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #31
	end


	--- BLOCK #30 118-119, warpins: 1 ---
	slot9 = false
	--- END OF BLOCK #30 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #32


	--- BLOCK #31 120-120, warpins: 2 ---
	slot9 = true

	--- END OF BLOCK #31 ---

	FLOW; TARGET BLOCK #32


	--- BLOCK #32 121-121, warpins: 2 ---
	return slot7, slot8, slot9
	--- END OF BLOCK #32 ---



end

return map
--- END OF BLOCK #0 ---



