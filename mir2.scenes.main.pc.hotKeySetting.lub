--- BLOCK #0 1-26, warpins: 1 ---
local common = import("..common.common")
local hotKeySetting = class("hotKeySetting", function ()
	--- BLOCK #0 1-3, warpins: 1 ---
	return display.newNode()
	--- END OF BLOCK #0 ---



end)

table.merge(hotKeySetting, {})

hotKeySetting.ctor = function (self)
	--- BLOCK #0 1-15, warpins: 1 ---
	self.cellList = {}
	self.pressedKey = {}

	self.initUI(self)
	self.registerKeyboardEvent(self)
	self.setNodeEventEnabled(self, true)

	return 
	--- END OF BLOCK #0 ---



end
hotKeySetting.onExit = function (self)
	--- BLOCK #0 1-10, warpins: 1 ---
	print("¡¤hotKeySetting onExit")

	g_data.hotKey.isSettingKey = false

	--- END OF BLOCK #0 ---

	slot1 = if self.listener then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-24, warpins: 1 ---
	cc.Director:getInstance():getEventDispatcher():removeEventListener(self.mouseListener)

	self.listener = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 25-25, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
hotKeySetting.initUI = function (self)
	--- BLOCK #0 1-78, warpins: 1 ---
	local bg = display.newScale9Sprite(res.getframe2("pic/common/black_5.png"), 0, 0, cc.size(480, 390)):addTo(self):anchor(0, 0)
	local scroll = an.newScroll(0, 0, bg.getw(bg), bg.geth(bg), {
		labelM = {
			23,
			1
		}
	}):anchor(0, 0):add2(self)

	scroll.setName(scroll, "hotKeySetting_ScrollView")

	local item_w = 220
	local item_h = 40

	local function getSrollH()
		--- BLOCK #0 1-20, warpins: 1 ---
		local rows = math.ceil((#g_data.hotKey:getHotKeySet() - 1)/2)
		local h = rows*item_h + 30

		--- END OF BLOCK #0 ---

		if h < bg:geth()

		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 21-25, warpins: 1 ---
		h = bg:geth()

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 26-26, warpins: 2 ---
		return h
		--- END OF BLOCK #2 ---



	end

	scroll.setScrollSize(scroll, scroll.getw(scroll), getSrollH())

	local beginX = 20
	local beginY = scroll.getScrollSize(scroll).height - item_h - 15

	local function addSubItem(row, col, info)
		--- BLOCK #0 1-2, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if not info then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 3-3, warpins: 1 ---
		return 

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 4-188, warpins: 1 ---
		local keyInfos = g_data.hotKey:getInfo(info.id)
		local node = display.newNode():addTo(scroll):size(item_w, item_h):anchor(0, 0):pos(beginX + (col - 1)*item_w, beginY - (row - 1)*item_h)
		local lbl_title = an.newLabel(info.title, 23, 1, {
			color = cc.c3b(255, 255, 0)
		}):anchor(0, 0.5):pos(0, item_h/2):add2(node)
		local key_spr_bg = display.newScale9Sprite("pic/scale/edit0.png", 0, 0, cc.size(100, 30)):anchor(0, 0.5):pos(110, item_h/2):add2(node)
		local key_label = an.newLabel(keyInfos.keyName, 21, 1, {
			color = cc.c3b(255, 255, 255)
		}):anchor(0.5, 0.5):pos(key_spr_bg.getw(key_spr_bg)/2, key_spr_bg.geth(key_spr_bg)/2):add2(key_spr_bg)
		local select_spr = display.newScale9Sprite("pic/scale/scale17.png", 0, 0, cc.size(100, 30)):anchor(0, 0.5):pos(110, item_h/2):add2(node)

		select_spr.setVisible(select_spr, false)

		node.key_label = key_label
		node.select_spr = select_spr
		node.id = info.id

		key_label.setTouchEnabled(key_label, false)
		key_spr_bg.setTouchEnabled(key_spr_bg, true)
		key_spr_bg.setTouchSwallowEnabled(key_spr_bg, false)
		key_spr_bg.addNodeEventListener(key_spr_bg, cc.NODE_TOUCH_EVENT, function (event)
			--- BLOCK #0 1-3, warpins: 1 ---
			--- END OF BLOCK #0 ---

			if event.name == "began" then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #3
			end


			--- BLOCK #1 4-5, warpins: 1 ---
			return true

			--- END OF BLOCK #1 ---

			FLOW; TARGET BLOCK #2


			--- BLOCK #2 6-6, warpins: 0 ---
			--- END OF BLOCK #2 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #12


			--- BLOCK #3 7-9, warpins: 1 ---
			--- END OF BLOCK #3 ---

			if event.name == "ended" then
			JUMP TO BLOCK #4
			else
			JUMP TO BLOCK #12
			end


			--- BLOCK #4 10-13, warpins: 1 ---
			--- END OF BLOCK #4 ---

			slot1 = if self.handler then
			JUMP TO BLOCK #5
			else
			JUMP TO BLOCK #11
			end


			--- BLOCK #5 14-25, warpins: 1 ---
			self.pressed = {}
			g_data.hotKey.isSettingKey = true

			--- END OF BLOCK #5 ---

			for _, v in ipairs(self.cellList)

			LOOP BLOCK #6
			GO OUT TO BLOCK #10


			--- BLOCK #6 26-28, warpins: 1 ---
			--- END OF BLOCK #6 ---

			if v == node then
			JUMP TO BLOCK #7
			else
			JUMP TO BLOCK #8
			end


			--- BLOCK #7 29-36, warpins: 1 ---
			v.select_spr:setVisible(true)

			self.cur_select = v

			--- END OF BLOCK #7 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #9


			--- BLOCK #8 37-41, warpins: 1 ---
			v.select_spr:setVisible(false)

			--- END OF BLOCK #8 ---

			FLOW; TARGET BLOCK #9


			--- BLOCK #9 42-43, warpins: 3 ---
			--- END OF BLOCK #9 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #5


			--- BLOCK #10 44-44, warpins: 1 ---
			--- END OF BLOCK #10 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #12


			--- BLOCK #11 45-51, warpins: 1 ---
			self.handler = scheduler.performWithDelayGlobal(function ()
				--- BLOCK #0 1-4, warpins: 1 ---
				self.handler = nil

				return 
				--- END OF BLOCK #0 ---



			end, 0.25)

			--- END OF BLOCK #11 ---

			FLOW; TARGET BLOCK #12


			--- BLOCK #12 52-52, warpins: 4 ---
			return 
			--- END OF BLOCK #12 ---

			FLOW; TARGET BLOCK #13


			--- BLOCK #13 53-53, warpins: 2 ---
			--- END OF BLOCK #13 ---



		end)
		table.insert(self.cellList, node)

		return 
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 189-189, warpins: 2 ---
		--- END OF BLOCK #3 ---



	end

	local hotKeySet = g_data.hotKey:getHotKeySet()

	--- END OF BLOCK #0 ---

	for i=1, #hotKeySet, 2
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 79-94, warpins: 2 ---
	addSubItem((i - 1)/2 + 1, 1, hotKeySet[i])
	addSubItem((i - 1)/2 + 1, 2, hotKeySet[i + 1])

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 95-96, warpins: 1 ---
	return 
	--- END OF BLOCK #2 ---



end
hotKeySetting.registerKeyboardEvent = function (self)
	--- BLOCK #0 1-37, warpins: 1 ---
	self.listener = cc.EventListenerKeyboard:create()

	self.listener:registerScriptHandler(function (keyCode, evt)
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if self.cur_select then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-15, warpins: 1 ---
		table.insert(self.pressed, keyCode)
		self:setHotKey(keyCode)

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 16-16, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end, cc.Handler.EVENT_KEYBOARD_PRESSED)
	self.listener:registerScriptHandler(function (keyCode, evt)
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if self.cur_select then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #1 5-9, warpins: 1 ---
		--- END OF BLOCK #1 ---

		for idx, _keycode in ipairs(self.pressed)

		LOOP BLOCK #2
		GO OUT TO BLOCK #5


		--- BLOCK #2 10-11, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if keyCode == _keycode then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 12-18, warpins: 1 ---
		table.remove(self.pressed, idx)

		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #5


		--- BLOCK #4 19-20, warpins: 2 ---
		--- END OF BLOCK #4 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #1


		--- BLOCK #5 21-21, warpins: 3 ---
		return 
		--- END OF BLOCK #5 ---



	end, cc.Handler.EVENT_KEYBOARD_RELEASED)
	cc.Director:getInstance():getEventDispatcher():addEventListenerWithFixedPriority(self.listener, 1)

	return 
	--- END OF BLOCK #0 ---



end
hotKeySetting.setHotKey = function (self, code)
	--- BLOCK #0 1-10, warpins: 1 ---
	local succeed, errorMsg = g_data.hotKey:resetKey(self.cur_select.id, self.pressed)

	--- END OF BLOCK #0 ---

	slot2 = if succeed then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-20, warpins: 1 ---
	self.updateKeyValue(self)
	cache.saveHotKey(common.getPlayerName())
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #2 21-22, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot3 = if errorMsg then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 23-28, warpins: 1 ---
	main_scene.ui:tip(errorMsg)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 29-29, warpins: 3 ---
	return 
	--- END OF BLOCK #4 ---



end
hotKeySetting.updateKeyValue = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for _, v in ipairs(self.cellList)


	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 5-12, warpins: 1 ---
	local keyInfo = g_data.hotKey:getInfo(v.id)

	--- END OF BLOCK #1 ---

	slot6 = if keyInfo then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 13-18, warpins: 1 ---
	v.key_label:setString(keyInfo.keyName)
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 19-23, warpins: 1 ---
	v.key_label:setString("")

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-25, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 26-26, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end

return hotKeySetting
--- END OF BLOCK #0 ---



