--- BLOCK #0 1-22, warpins: 1 ---
jpush = {}
jpush.init = function ()
	--- BLOCK #0 1-28, warpins: 1 ---
	local listener = cc.EventListenerCustom:create("JPUSH_EVENT", jpush.onJPushEvent)

	cc.Director:getInstance():getEventDispatcher():addEventListenerWithFixedPriority(listener, 1)

	jpush.inited = true

	jpush.initSDK()

	return 
	--- END OF BLOCK #0 ---



end
jpush.onJPushEvent = function (event)
	--- BLOCK #0 1-9, warpins: 1 ---
	local str = event.getDataString(event)
	local ret = json.decode(str)

	--- END OF BLOCK #0 ---

	slot2 = if not ret then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-14, warpins: 1 ---
	print("onJPushEvent :dataString is not a valid JSONString", str)

	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-21, warpins: 2 ---
	print("JPUSH EVENT:", ret.action)

	--- END OF BLOCK #2 ---

	if ret.action == "REGISTRATION_ID" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-25, warpins: 1 ---
	jpush.regId = ret.regId
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #4 26-28, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if ret.action == "MESSAGE_RECEIVED" then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 29-29, warpins: 1 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #6 30-32, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if ret.action == "NOTIFICATION_RECEIVED" then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 33-33, warpins: 1 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #8 34-36, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if ret.action == "NOTIFICATION_OPENED" then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 37-37, warpins: 1 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #10 38-40, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if ret.action == "RICHPUSH_CALLBACK" then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 41-41, warpins: 1 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #12 42-44, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if ret.action == "CONNECTION_CHANGE" then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 45-45, warpins: 1 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #14 46-48, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if ret.action == "UNKNOW" then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 49-49, warpins: 1 ---
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #16 50-52, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if ret.action == "gotSetAliasAndTagsResult" then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 53-58, warpins: 1 ---
	jpush.tags = jpush.str2tags(ret.tags)

	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 59-59, warpins: 9 ---
	return 
	--- END OF BLOCK #18 ---



end
jpush.tags2str = function (tags)
	--- BLOCK #0 1-5, warpins: 1 ---
	local tagStr = ""

	--- END OF BLOCK #0 ---

	for k, v in pairs(tags)


	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 6-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if tagStr == "" then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-9, warpins: 1 ---
	tagStr = v
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 10-20, warpins: 1 ---
	tagStr = string.format("%s,%s", tostring(tagStr), tostring(v))

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 21-22, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 23-23, warpins: 1 ---
	return tagStr
	--- END OF BLOCK #5 ---



end
jpush.str2tags = function (str)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if str then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 3-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if string.find(str, ",")

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-15, warpins: 1 ---
	return string.split(str, ",")
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 16-18, warpins: 2 ---
	return {
		str
	}
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 19-19, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
jpush.test = function ()
	--- BLOCK #0 1-42, warpins: 1 ---
	dump(jpush.str2tags(nil))
	dump(jpush.str2tags(""))
	dump(jpush.str2tags("123"))
	dump(jpush.str2tags("123,23,52"))

	local tags2str = jpush.tags2str

	print(tags2str({}))
	print(tags2str({
		"123",
		13,
		1,
		4
	}))
	print(tags2str({
		"123",
		"13,1,4",
		"3333",
		"123"
	}))

	return 
	--- END OF BLOCK #0 ---



end
local IGNORE_JPUSH = true
--- END OF BLOCK #0 ---

if device.platform == "android" then
JUMP TO BLOCK #1
else
JUMP TO BLOCK #3
end


--- BLOCK #1 23-24, warpins: 1 ---
--- END OF BLOCK #1 ---

slot0 = if not IGNORE_JPUSH then
JUMP TO BLOCK #2
else
JUMP TO BLOCK #3
end


--- BLOCK #2 25-93, warpins: 1 ---
jpush.jClassName = ANDROID_PACKAGE_NAME .. "jpushSDK"
jpush.initSDK = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "ready", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.stopPush = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "stopPush", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.resumePush = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "resumePush", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.isPushStopped = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "isPushStopped", {}, "()Z")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-17, warpins: 2 ---
	return ok, ret
	--- END OF BLOCK #2 ---



end
jpush.setAliasAndTags = function (alias, tags)
	--- BLOCK #0 1-12, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setAliasAndTags", {
		alias,
		tags
	}, "(Ljava/lang/String;Ljava/lang/String;)V")

	--- END OF BLOCK #0 ---

	slot2 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 13-16, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 17-17, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.setAlias = function (alias)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setAlias", {
		alias
	}, "(Ljava/lang/String;)V")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-16, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.setTags = function (tags)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setTags", {
		tags
	}, "(Ljava/lang/String;)V")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-16, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.filterValidTags = function (tags)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "filterValidTags", {
		tags
	}, "(Ljava/lang/String;)Ljava/lang/String")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-19, warpins: 2 ---
	return jpush.str2tags(ret)
	--- END OF BLOCK #2 ---



end
jpush.getRegistrationID = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "getRegistrationID", {}, "()Ljava/lang/String")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.clearAllNotifications = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "clearAllNotifications", {}, "(Ljava/lang/String;)V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.clearNotificationById = function (notificationId)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "clearNotificationById", {
		notificationId
	}, "(I;)V")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-16, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.setPushTime = function (weekDays, startHour, endHour)
	--- BLOCK #0 1-13, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setPushTime", {
		weekDays,
		startHour,
		endHour
	}, "(Ljava/lang/String;I;I;)V")

	--- END OF BLOCK #0 ---

	slot3 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 14-17, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 18-18, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.setSilenceTime = function (startHour, startMinute, endHour, endMinute)
	--- BLOCK #0 1-14, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setSilenceTime", {
		startHour,
		startMinute,
		endHour,
		endMinute
	}, "(I;I;I;I;)V")

	--- END OF BLOCK #0 ---

	slot4 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 15-18, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 19-19, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.setLatestNotificationNumber = function (num)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "setLatestNotificationNumber", {
		num
	}, "(I;)V")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-16, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.requestPermission = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "requestPermission", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.stopCrashHandler = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "stopCrashHandler", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.initCrashHandler = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "initCrashHandler", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return ok
	--- END OF BLOCK #2 ---



end
jpush.getConnectionState = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "getConnectionState", {}, "()Z")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-17, warpins: 2 ---
	return ok, ret
	--- END OF BLOCK #2 ---



end
jpush.addLocalNotification = function (notificationId, title, content, extras, broadCastTime)
	--- BLOCK #0 1-15, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "addLocalNotification", {
		notificationId,
		title,
		content,
		extras,
		broadCastTime
	}, "(J;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;J)Z")

	--- END OF BLOCK #0 ---

	slot5 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 16-19, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 20-22, warpins: 2 ---
	return ok, ret
	--- END OF BLOCK #2 ---



end
jpush.removeLocalNotification = function (notificationId)
	--- BLOCK #0 1-11, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "removeLocalNotification", {
		notificationId
	}, "(I;)V")

	--- END OF BLOCK #0 ---

	slot1 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-18, warpins: 2 ---
	return ok, ret
	--- END OF BLOCK #2 ---



end
jpush.clearLocalNotifications = function ()
	--- BLOCK #0 1-10, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(jpush.jClassName, "clearLocalNotifications", {}, "()V")

	--- END OF BLOCK #0 ---

	slot0 = if not ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-14, warpins: 1 ---
	print(ok, ret)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-17, warpins: 2 ---
	return ok, ret
	--- END OF BLOCK #2 ---



end
--- END OF BLOCK #2 ---

UNCONDITIONAL JUMP; TARGET BLOCK #7


--- BLOCK #3 94-97, warpins: 2 ---
--- END OF BLOCK #3 ---

if device.platform == "ios" then
JUMP TO BLOCK #4
else
JUMP TO BLOCK #6
end


--- BLOCK #4 98-99, warpins: 1 ---
--- END OF BLOCK #4 ---

slot0 = if not IGNORE_JPUSH then
JUMP TO BLOCK #5
else
JUMP TO BLOCK #6
end


--- BLOCK #5 100-163, warpins: 1 ---
jpush.initSDK = function ()
	--- BLOCK #0 1-6, warpins: 1 ---
	local ok, ret = luaoc.callStaticMethod("JPush", "ready")

	return 
	--- END OF BLOCK #0 ---



end
jpush.stopPush = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.resumePush = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.isPushStopped = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setAliasAndTags = function (alias, tags)
	--- BLOCK #0 1-9, warpins: 1 ---
	local ok, ret = luaoc.callStaticMethod("JPush", "setAliasAndTags", {
		alias = alias,
		tags = tags
	})

	return 
	--- END OF BLOCK #0 ---



end
jpush.setAlias = function (alias)
	--- BLOCK #0 1-5, warpins: 1 ---
	jpush.setAliasAndTags(alias)

	return 
	--- END OF BLOCK #0 ---



end
jpush.setTags = function (tags)
	--- BLOCK #0 1-6, warpins: 1 ---
	jpush.setAliasAndTags(nil, tags)

	return 
	--- END OF BLOCK #0 ---



end
jpush.filterValidTags = function (tags)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(tags)


	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 5-10, warpins: 1 ---
	tags[k] = nil
	tags[tostring(k)] = v
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 11-12, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 13-20, warpins: 1 ---
	local ok, ret = luaoc.callStaticMethod("JPush", "filterValidTags", tags)

	--- END OF BLOCK #3 ---

	slot1 = if ok then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 21-24, warpins: 1 ---
	return jpush.str2tags(ret)
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-25, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---



end
jpush.getRegistrationID = function ()
	--- BLOCK #0 1-7, warpins: 1 ---
	local ok, ret = luaoc.callStaticMethod("JPush", "getRegistrationID")

	--- END OF BLOCK #0 ---

	slot0 = if ok then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-8, warpins: 1 ---
	return ret
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-9, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
jpush.clearAllNotifications = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.clearNotificationById = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setPushTime = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setSilenceTime = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setLatestNotificationNumber = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.requestPermission = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.stopCrashHandler = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.initCrashHandler = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.getConnectionState = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.addLocalNotification = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.removeLocalNotification = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.clearLocalNotifications = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
--- END OF BLOCK #5 ---

UNCONDITIONAL JUMP; TARGET BLOCK #7


--- BLOCK #6 164-226, warpins: 2 ---
jpush.initSDK = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.stopPush = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.resumePush = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.isPushStopped = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setAliasAndTags = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setAlias = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setTags = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.filterValidTags = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.getRegistrationID = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.clearAllNotifications = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.clearNotificationById = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setPushTime = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setSilenceTime = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.setLatestNotificationNumber = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.requestPermission = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.stopCrashHandler = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.initCrashHandler = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.getConnectionState = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.addLocalNotification = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.removeLocalNotification = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end
jpush.clearLocalNotifications = function ()
	--- BLOCK #0 1-1, warpins: 1 ---
	return 
	--- END OF BLOCK #0 ---



end

--- END OF BLOCK #6 ---

FLOW; TARGET BLOCK #7


--- BLOCK #7 227-229, warpins: 3 ---
return jpush
--- END OF BLOCK #7 ---



