--- BLOCK #0 1-30, warpins: 1 ---
local common = import("..common.common")
local screenshot = class("screenshot", function ()
	--- BLOCK #0 1-3, warpins: 1 ---
	return display.newNode()
	--- END OF BLOCK #0 ---



end)

table.merge(screenshot, {
	canvas,
	editBtn,
	editting,
	tools,
	colorPoints
})

screenshot.ctor = function (self)
	--- BLOCK #0 1-42, warpins: 1 ---
	self._supportMove = true

	sound.playSound("screen")

	local color = nil
	color = display.newColorLayer(cc.c4b(255, 255, 255, 255)):add2(self):runs({
		cc.FadeOut:create(1),
		cc.CallFunc:create(function ()
			--- BLOCK #0 1-61, warpins: 1 ---
			color:removeSelf()
			main_scene.ground.map:setTopRender(false)

			local glview = cc.Director:getInstance():getOpenGLView()

			glview.setDesignResolutionSize(glview, display.sizeInPixels.width, display.sizeInPixels.height, cc.ResolutionPolicy.NO_BORDER)

			local screen = printscreen(main_scene)

			screen.retain(screen)

			local listener = nil
			listener = cc.EventListenerCustom:create("director_after_draw", function ()
				--- BLOCK #0 1-38, warpins: 1 ---
				glview:setDesignResolutionSize(CONFIG_SCREEN_WIDTH, CONFIG_SCREEN_HEIGHT, cc.ResolutionPolicy.NO_BORDER)
				main_scene.ground.map:setTopRender(true)
				self:show(screen)
				screen:release()
				cc.Director:getInstance():getEventDispatcher():removeEventListener(listener)

				return 
				--- END OF BLOCK #0 ---



			end)

			cc.Director:getInstance():getEventDispatcher():addEventListenerWithFixedPriority(listener, 1)

			return 
			--- END OF BLOCK #0 ---



		end)
	})

	return 
	--- END OF BLOCK #0 ---



end
screenshot.show = function (self, screen)
	--- BLOCK #0 1-330, warpins: 1 ---
	local picw = 615
	local picscale = picw/screen.getw(screen)
	local pich = screen.geth(screen)*picscale
	local size = cc.size(picw, pich)
	self.canvas = display.newNode():pos(13, 60):size(picw, pich):add2(self)
	self.canvas.output = display.newNode():size(picw, pich):add2(self.canvas)

	screen.scale(screen, picscale):anchor(0, 0):add2(self.canvas.output)
	display.newScale9Sprite(res.getframe2("pic/scale/scale2.png"), 0, 0, size):pos(self.canvas:getPosition()):anchor(0, 0):add2(self)

	local controlHeight = 110
	local b1 = res.get2("pic/panels/bigmap/bg1.png")
	local b2 = res.get2("pic/panels/bigmap/bg2.png")
	local b3 = res.get2("pic/panels/bigmap/bg3.png")

	self.size(self, b1.getw(b1), size.height + controlHeight):anchor(0.5, 0.5):center()
	self.addTouchFrame(self, cc.rect(0, 0, self.getw(self), self.geth(self)), "main")
	self.scale(self, picscale/1):scaleTo(0.2, 1)
	b3.anchor(b3, 0, 0):add2(self, -1)
	b2.anchor(b2, 0, 0):pos(0, b3.geth(b3)):scaleY((self.geth(self) - b1.geth(b1) - b3.geth(b3))/b2.geth(b2)):add2(self, -1)
	b1.anchor(b1, 0, 1):pos(0, self.geth(self)):add2(self, -1)
	res.get2("pic/panels/screenshot/title.png"):add2(b1):pos(b1.getw(b1)/2, b1.geth(b1) - 23)
	an.newBtn(res.gettex2("pic/common/close10.png"), function ()
		--- BLOCK #0 1-9, warpins: 1 ---
		sound.playSound("103")
		self:hidePanel()

		return 
		--- END OF BLOCK #0 ---



	end, {
		pressImage = res.gettex2("pic/common/close11.png")
	}):anchor(1, 1):pos(self.getw(self) - 5, self.geth(self) - 5):addto(self, 1)
	an.newBtn(res.gettex2("pic/common/btn20.png"), function ()
		--- BLOCK #0 1-19, warpins: 1 ---
		pic.upload(self.canvas.output, common.getPlayerName())
		self:hide()
		scheduler.performWithDelayGlobal(function ()
			--- BLOCK #0 1-27, warpins: 1 ---
			self:runs({
				cc.Show:create(),
				cc.ScaleTo:create(0.2, 0.01),
				cc.CallFunc:create(function ()
					--- BLOCK #0 1-5, warpins: 1 ---
					self:hidePanel()

					return 
					--- END OF BLOCK #0 ---



				end)
			})

			return 
			--- END OF BLOCK #0 ---



		end, 0)

		return 
		--- END OF BLOCK #0 ---



	end, {
		pressImage = res.gettex2("pic/common/btn21.png"),
		sprite = res.gettex2("pic/panels/screenshot/send.png")
	}):anchor(1, 1):pos(self.getw(self) - 13, 54):add2(self)

	self.editBtn = an.newBtn(res.gettex2("pic/common/btn20.png"), function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if self.tools then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-12, warpins: 1 ---
		self.tools:removeSelf()

		self.tools = nil

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 13-16, warpins: 2 ---
		--- END OF BLOCK #2 ---

		slot0 = if self.colorPoints then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #3 17-21, warpins: 1 ---
		--- END OF BLOCK #3 ---

		for i, v in ipairs(self.colorPoints)

		LOOP BLOCK #4
		GO OUT TO BLOCK #6


		--- BLOCK #4 22-24, warpins: 1 ---
		v.removeSelf(v)

		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 25-26, warpins: 2 ---
		--- END OF BLOCK #5 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #6 27-29, warpins: 1 ---
		self.colorPoints = nil
		--- END OF BLOCK #6 ---

		FLOW; TARGET BLOCK #7


		--- BLOCK #7 30-38, warpins: 2 ---
		self.editting = not self.editting

		--- END OF BLOCK #7 ---

		slot0 = if self.editting then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 39-53, warpins: 1 ---
		self.editBtn.sprite:setTex(res.gettex2("pic/panels/screenshot/reset.png"))
		self:showTools()
		--- END OF BLOCK #8 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #10


		--- BLOCK #9 54-63, warpins: 1 ---
		self.editBtn.sprite:setTex(res.gettex2("pic/panels/screenshot/edit.png"))

		--- END OF BLOCK #9 ---

		FLOW; TARGET BLOCK #10


		--- BLOCK #10 64-64, warpins: 2 ---
		return 
		--- END OF BLOCK #10 ---



	end, {
		pressImage = res.gettex2("pic/common/btn21.png"),
		sprite = res.gettex2("pic/panels/screenshot/edit.png")
	}):anchor(1, 1):pos(self.getw(self) - 133, 54):add2(self)

	return 
	--- END OF BLOCK #0 ---



end
screenshot.showTools = function (self)
	--- BLOCK #0 1-68, warpins: 1 ---
	self.tools = display.newNode():add2(self)
	local colors = {}
	colors[1] = cc.c4b(255, 0, 0, 255)
	colors[2] = cc.c4b(250, 155, 19, 255)
	colors[3] = cc.c4b(255, 255, 0, 255)
	colors[4] = cc.c4b(0, 255, 0, 255)
	colors[5] = cc.c4b(0, 255, 255, 255)
	colors[MULTRES] = cc.c4b(255, 0, 255, 255)
	local colorPos = cc.p(20, 18)
	local selectIdx = 1
	local pre = nil

	--- END OF BLOCK #0 ---

	for i, v in ipairs(colors)

	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 69-128, warpins: 1 ---
	display.newColorLayer(v):size(37, 37):pos((colorPos.x + (i - 1)*45) - 2, colorPos.y - 2):add2(self.tools):anchor(0.5, 0.5)

	local btn = nil
	btn = res.get2("pic/panels/screenshot/frame.png"):anchor(0.5, 0.5):pos(colorPos.x + (i - 1)*45 + 17, colorPos.y + 17):add2(self.tools):enableClick(function ()
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if pre then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-18, warpins: 1 ---
		pre:setTouchEnabled(true)
		pre:setColor(cc.c3b(255, 255, 255))

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 19-38, warpins: 2 ---
		pre = btn

		btn:setTouchEnabled(false)
		btn:setColor(cc.c3b(255, 0, 0))

		selectIdx = i

		return 
		--- END OF BLOCK #2 ---



	end, {
		ani = false
	})
	--- END OF BLOCK #1 ---

	slot4 = if not pre then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 129-142, warpins: 1 ---
	pre = btn

	btn.setTouchEnabled(btn, false)
	btn.setColor(btn, cc.c3b(255, 0, 0))

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 143-144, warpins: 2 ---
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 145-146, warpins: 2 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 147-184, warpins: 1 ---
	self.colorPoints = {}
	local size = 6

	local function add(x, y)
		--- BLOCK #0 1-6, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if x - size/2 >= 0 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 7-12, warpins: 1 ---
		--- END OF BLOCK #1 ---

		if y - size/2 >= 0 then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 13-22, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if self.canvas:getw()
		 >= x + size/2 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 23-32, warpins: 1 ---
		--- END OF BLOCK #3 ---

		if self.canvas:geth()

		 < y + size/2 then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 33-33, warpins: 4 ---
		return 

		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 34-67, warpins: 2 ---
		self.colorPoints[#self.colorPoints + 1] = display.newColorLayer(colors[selectIdx]):size(size, size):pos(x - size/2, y - size/2):add2(self.canvas.output)

		return 
		--- END OF BLOCK #5 ---



	end

	local lastpos = nil
	local touchNode = display.newNode():size(self.canvas:getContentSize()):pos(self.canvas:getPosition()):add2(self.tools)

	touchNode.setTouchEnabled(touchNode, true)
	touchNode.addNodeEventListener(touchNode, cc.NODE_TOUCH_EVENT, function (event)
		--- BLOCK #0 1-22, warpins: 1 ---
		local rect1 = self:getBoundingBox()
		local rect2 = self.canvas:getBoundingBox()
		local x = event.x - rect1.x - rect2.x
		local y = event.y - rect1.y - rect2.y

		--- END OF BLOCK #0 ---

		if event.name == "began" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 23-35, warpins: 1 ---
		add(x, y)

		lastpos = cc.p(x, y)

		return true

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #14


		--- BLOCK #2 36-38, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if event.name == "moved" then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #3 39-81, warpins: 1 ---
		local stepMax = math.modf(math.max(math.abs(x - lastpos.x), math.abs(y - lastpos.y))/size/2)
		local stepx = math.abs(x - lastpos.x)/stepMax
		local stepy = math.abs(y - lastpos.y)/stepMax
		local nextx = lastpos.x
		local nexty = lastpos.y
		--- END OF BLOCK #3 ---

		for i=1, stepMax, 1
		LOOP BLOCK #4
		GO OUT TO BLOCK #11

		--- BLOCK #4 82-83, warpins: 2 ---
		--- END OF BLOCK #4 ---

		if nextx < x then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #6
		end


		--- BLOCK #5 84-85, warpins: 1 ---
		nextx = nextx + stepx
		--- END OF BLOCK #5 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #7


		--- BLOCK #6 86-86, warpins: 1 ---
		nextx = nextx - stepx
		--- END OF BLOCK #6 ---

		FLOW; TARGET BLOCK #7


		--- BLOCK #7 87-88, warpins: 2 ---
		--- END OF BLOCK #7 ---

		if nexty < y then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 89-90, warpins: 1 ---
		nexty = nexty + stepy
		--- END OF BLOCK #8 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #10


		--- BLOCK #9 91-91, warpins: 1 ---
		nexty = nexty - stepy

		--- END OF BLOCK #9 ---

		FLOW; TARGET BLOCK #10


		--- BLOCK #10 92-96, warpins: 2 ---
		add(nextx, nexty)
		--- END OF BLOCK #10 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #11 97-107, warpins: 1 ---
		add(x, y)

		lastpos = cc.p(x, y)

		--- END OF BLOCK #11 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #14


		--- BLOCK #12 108-110, warpins: 1 ---
		--- END OF BLOCK #12 ---

		if event.name == "ended" then
		JUMP TO BLOCK #13
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #13 111-114, warpins: 1 ---
		add(x, y)

		--- END OF BLOCK #13 ---

		FLOW; TARGET BLOCK #14


		--- BLOCK #14 115-115, warpins: 4 ---
		return 
		--- END OF BLOCK #14 ---



	end)

	return 
	--- END OF BLOCK #5 ---



end

return screenshot
--- END OF BLOCK #0 ---



