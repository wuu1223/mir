--- BLOCK #0 1-15, warpins: 1 ---
local role = import(".role")
local npc = class("npc", role)
npc.ctor = function (self, params)
	--- BLOCK #0 1-10, warpins: 1 ---
	npc.super.ctor(self, params)
	self.initEnd(self)

	return 
	--- END OF BLOCK #0 ---



end
npc.getParts = function (self, feature)
	--- BLOCK #0 1-23, warpins: 1 ---
	local parts = {}
	local race = feature.get(feature, "race")
	local appr = feature.get(feature, "dress")
	local npcId = def.role.getRoleId(race, appr)
	local dressFrame = def.role.getDressFrame(npcId)
	--- END OF BLOCK #0 ---

	if appr < 256 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #1 24-26, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if 70 <= appr then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 27-29, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if appr > 75 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 30-31, warpins: 2 ---
	slot7 = false
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 32-32, warpins: 1 ---
	local dargon = true
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 33-34, warpins: 2 ---
	--- END OF BLOCK #5 ---

	slot7 = if dargon then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 35-59, warpins: 1 ---
	parts.hair = {
		blend = true,
		cannotMove = true,
		id = appr,
		imgid = def.role.getNpc(npcId).img,
		offset = def.role.getNpcOffset(npcId) + 4,
		frame = dressFrame,
		direction = def.role.getNpc(npcId).direction
	}
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 60-85, warpins: 2 ---
	parts.dress = {
		id = appr,
		imgid = def.role.getNpc(npcId).img,
		offset = def.role.getNpcOffset(npcId),
		frame = dressFrame,
		cannotMove = dargon,
		direction = def.role.getNpc(npcId).direction
	}

	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #8 86-89, warpins: 1 ---
	print("暂不支持的npc类型:", appr)

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 90-90, warpins: 2 ---
	return parts
	--- END OF BLOCK #9 ---



end
npc.updateSpriteForState = function (self, type, sprite)
	--- BLOCK #0 1-3, warpins: 1 ---
	local function update(t, spr)
		--- BLOCK #0 1-23, warpins: 1 ---
		local state = self.last.state
		local npcId = def.role.getRoleId(self:getRace(), self:getAppr())

		--- END OF BLOCK #0 ---

		slot4 = if def.role.stateHas(state, "stCeleb")
		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 24-40, warpins: 1 ---
		def.role.changeStandFrame(npcId, "dress", "stCeleb")

		self.parts.dress.frame = def.role.getDressFrame(npcId)

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 41-54, warpins: 1 ---
		def.role.resetRoleFrame(npcId)

		self.parts.dress.frame = def.role.getDressFrame(npcId)

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 55-55, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end

	--- END OF BLOCK #0 ---

	slot1 = if type then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if sprite then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 6-10, warpins: 1 ---
	return update(type, sprite)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 11-14, warpins: 3 ---
	--- END OF BLOCK #3 ---

	for k, v in pairs(self.sprites)

	LOOP BLOCK #4
	GO OUT TO BLOCK #6


	--- BLOCK #4 15-18, warpins: 1 ---
	update(k, v)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 19-20, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #6 21-22, warpins: 1 ---
	return 
	--- END OF BLOCK #6 ---



end

return npc
--- END OF BLOCK #0 ---



