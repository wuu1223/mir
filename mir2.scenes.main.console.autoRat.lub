--- BLOCK #0 1-150, warpins: 1 ---
local current = ...
local autoRat = class("autoRat", function ()
	--- BLOCK #0 1-2, warpins: 1 ---
	local tbl = {}

	return tbl
	--- END OF BLOCK #0 ---



end)
local magic = import("..common.magic")
local common = import("..common.common")
local getDir = import("..common.helper.util").getDir
local settingLogic = import("..common.settingLogic")
local mapDef = require("mir2.scenes.main.map.def")
autoRat.current = current

table.merge(autoRat, {})

autoRat.checkInterval = 0.1
autoRat.maxLoseAtkTime = 12
autoRat.maxTryCallPetTime = 10
autoRat.avoidInterval = 2
autoRat.amuletInterval = 3
autoRat.spellTime = 1
autoRat.maxActFail = 3
autoRat.closeAtkDis = 2
autoRat.rangeAtkDis = 9
autoRat.itemProperty = -10
autoRat.ctor = function (self, console)
	--- BLOCK #0 1-29, warpins: 1 ---
	self.console = console
	self.pathFinder = import("..common.autoFindPath", current).new()
	self.checkedAtkCnt = 0
	self.roarTimer = 0
	self.tryCallPetTimer = 0
	self.lastExpUpdateTime = -1
	self.cntActFail = 0
	self.settings = g_data.setting.autoRat
	self.tempData = {}

	setmetatable(self.tempData, {
		__mode = "k"
	})

	return 
	--- END OF BLOCK #0 ---



end
autoRat.setTempData = function (self, target, key, value)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if target then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 3-7, warpins: 1 ---
	slot4 = self.tempData
	--- END OF BLOCK #1 ---

	slot5 = if not self.tempData[target] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-8, warpins: 1 ---
	slot5 = {}
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 9-14, warpins: 2 ---
	slot4[target] = slot5
	self.tempData[target][key] = value

	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 15-15, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
autoRat.tempMarkObject = function (self, target, key, time)
	--- BLOCK #0 1-8, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if self.setTempData(self, target, key, true)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-13, warpins: 1 ---
	scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-8, warpins: 1 ---
		self:setTempData(target, key, nil)

		return 
		--- END OF BLOCK #0 ---



	end, time)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 14-15, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
autoRat.getTempData = function (self, target, key)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if self.tempData[target] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	slot3 = self.tempData[target][key]

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-8, warpins: 2 ---
	return slot3
	--- END OF BLOCK #2 ---



end
autoRat.isCanWalk = function (self, x, y)
	--- BLOCK #0 1-11, warpins: 1 ---
	local map = main_scene.ground.map
	local block = map.canWalk(map, x, y).block

	--- END OF BLOCK #0 ---

	slot4 = if block then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-13, warpins: 1 ---
	return false

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 14-19, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot5 = if not mapDef.doorPoint[map.mapid] then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 20-20, warpins: 1 ---
	local points = {}

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 21-24, warpins: 2 ---
	--- END OF BLOCK #4 ---

	for k, v in pairs(points)


	LOOP BLOCK #5
	GO OUT TO BLOCK #9


	--- BLOCK #5 25-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if v.x == x then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 28-30, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if v.y == y then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 31-32, warpins: 1 ---
	return false
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 33-34, warpins: 4 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #9 35-36, warpins: 1 ---
	return true
	--- END OF BLOCK #9 ---



end
autoRat.lowProperty = {
	òùòð = 4
}

local function pStack(...)
	--- BLOCK #0 1-5, warpins: 1 ---
	p2("autoRat", ...)

	return 
	--- END OF BLOCK #0 ---



end

autoRat.updateModifyProperty = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	self.modifyProperty = {}
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.setting.item.filt then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-9, warpins: 1 ---
	local itemSettings = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-15, warpins: 2 ---
	local items = def.items

	--- END OF BLOCK #2 ---

	for k, v in pairs(items)

	LOOP BLOCK #3
	GO OUT TO BLOCK #10


	--- BLOCK #3 16-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if type(v)

	 == "table" then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #4 21-23, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot8 = if v.get then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 24-29, warpins: 1 ---
	local itemName = v.get(v, "name")
	--- END OF BLOCK #5 ---

	if itemName == "½ð±Ò1" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 30-30, warpins: 1 ---
	itemName = "½ð±Ò"

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 31-36, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot9 = if settingLogic.isRattingItem(itemName)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 37-40, warpins: 1 ---
	self.modifyProperty[itemName] = autoRat.itemProperty

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 41-42, warpins: 5 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #10 43-50, warpins: 1 ---
	setmetatable(self.modifyProperty, {
		__index = autoRat.lowProperty
	})

	return 
	--- END OF BLOCK #10 ---



end
autoRat.checkClose = function (self, target, closeTo)
	--- BLOCK #0 1-14, warpins: 1 ---
	local player = main_scene.ground.player

	return self.pathFinder:checkClose(player.x, player.y, target.x, target.y, 400, false, closeTo)
	--- END OF BLOCK #0 ---



end

local function getDis(a, b)
	--- BLOCK #0 1-15, warpins: 1 ---
	return math.max(math.abs(a.x - b.x), math.abs(a.y - b.y))
	--- END OF BLOCK #0 ---



end

autoRat.checkMonster = function (self, mon)
	--- BLOCK #0 1-18, warpins: 1 ---
	assert(self.atkRangeDis, "self.atkRangeDis is nil")

	local player = main_scene.ground.player
	slot3 = getDis(player, mon)

	--- END OF BLOCK #0 ---

	slot4 = if not self.getTempData(self, mon, "tempAttackRange")

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 19-19, warpins: 1 ---
	slot4 = self.atkRangeDis

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 20-21, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if slot3 < slot4 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-23, warpins: 1 ---
	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-28, warpins: 2 ---
	return self.checkClose(self, mon, self.atkRangeDis)
	--- END OF BLOCK #4 ---



end
autoRat.getNearestTarget = function (self, noItem)
	--- BLOCK #0 1-8, warpins: 1 ---
	local targets = {}

	--- END OF BLOCK #0 ---

	for k, v in pairs(main_scene.ground.map.mons)


	LOOP BLOCK #1
	GO OUT TO BLOCK #10


	--- BLOCK #1 9-15, warpins: 1 ---
	local name = v.info:getName()

	--- END OF BLOCK #1 ---

	slot9 = if not v.die then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #2 16-20, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot9 = if not v.isPolice(v)
	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #3 21-23, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot9 = if not v.isDummy then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #4 24-25, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot8 = if name then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 26-32, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot9 = if not string.find(name, "%(")
	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #6 33-39, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot9 = if not self.getTempData(self, v, "tooStronger")
	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 40-46, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot9 = if not self.getTempData(self, v, "cannotClose")

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 47-49, warpins: 1 ---
	targets[#targets + 1] = v
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 50-51, warpins: 9 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #10 52-65, warpins: 1 ---
	local player = main_scene.ground.player
	local modifyProperty = self.modifyProperty
	local items = main_scene.ground.map.items
	--- END OF BLOCK #10 ---

	slot6 = if not g_data.setting.item.filt then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 66-66, warpins: 1 ---
	local itemSettings = {}
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 67-75, warpins: 2 ---
	local pickUpRatting = self.settings.pickUpRatting
	local pickGoodAttItem = g_data.setting.getGoodAttItemSetting().pickOnRatting
	--- END OF BLOCK #12 ---

	slot1 = if not noItem then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #13 76-77, warpins: 1 ---
	--- END OF BLOCK #13 ---

	slot7 = if pickUpRatting then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #14 78-93, warpins: 1 ---
	local ability = g_data.player.ability
	local wei = ability.get(ability, "weight")
	local maxWei = ability.get(ability, "maxWeight") + 100000

	--- END OF BLOCK #14 ---

	for _, item in pairs(items)

	LOOP BLOCK #15
	GO OUT TO BLOCK #27


	--- BLOCK #15 94-97, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if item.owner == player.roleid then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #16 98-104, warpins: 1 ---
	--- END OF BLOCK #16 ---

	slot17 = if not self.getTempData(self, item, "cannotPick")
	 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #17 105-111, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if getDis(player, item)

	 <= 10 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #18 112-114, warpins: 1 ---
	local itemName = item.itemName

	--- END OF BLOCK #18 ---

	if wei < maxWei then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 115-122, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if 0 >= g_data.bag:getFreeCount()
	 then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #20 123-124, warpins: 2 ---
	--- END OF BLOCK #20 ---

	if itemName == "½ð±Ò" then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #21 125-128, warpins: 2 ---
	--- END OF BLOCK #21 ---

	if 0 < item.state then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #22 129-130, warpins: 1 ---
	--- END OF BLOCK #22 ---

	slot8 = if pickGoodAttItem then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #23 131-135, warpins: 1 ---
	table.insert(targets, item)
	--- END OF BLOCK #23 ---

	FLOW; TARGET BLOCK #24


	--- BLOCK #24 136-138, warpins: 3 ---
	--- END OF BLOCK #24 ---

	slot18 = if modifyProperty[itemName] then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #25 139-143, warpins: 1 ---
	table.insert(targets, item)
	--- END OF BLOCK #25 ---

	FLOW; TARGET BLOCK #26


	--- BLOCK #26 144-145, warpins: 7 ---
	--- END OF BLOCK #26 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #27 146-154, warpins: 3 ---
	table.sort(targets, function (a, b)
		--- BLOCK #0 1-11, warpins: 1 ---
		local disA = getDis(player, a)

		--- END OF BLOCK #0 ---

		slot3 = if self:isMonster(a)

		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #1 12-15, warpins: 1 ---
		slot3 = modifyProperty
		--- END OF BLOCK #1 ---

		slot4 = if a.info then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 16-19, warpins: 1 ---
		slot4 = a.info:getName()
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 20-22, warpins: 2 ---
		--- END OF BLOCK #3 ---

		slot3 = if not slot3[slot4] then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 23-23, warpins: 1 ---
		slot3 = 0
		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 24-33, warpins: 2 ---
		disA = disA + slot3

		--- END OF BLOCK #5 ---

		slot3 = if def.role.stateHas(a.last.state, "stStone")

		 then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #13
		end


		--- BLOCK #6 34-35, warpins: 1 ---
		disA = disA + 3
		--- END OF BLOCK #6 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #13


		--- BLOCK #7 36-39, warpins: 1 ---
		--- END OF BLOCK #7 ---

		if 0 < a.state then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #8 40-42, warpins: 1 ---
		--- END OF BLOCK #8 ---

		slot3 = if pickGoodAttItem then
		JUMP TO BLOCK #9
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #9 43-46, warpins: 1 ---
		disA = disA + autoRat.itemProperty
		--- END OF BLOCK #9 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #13


		--- BLOCK #10 47-51, warpins: 2 ---
		--- END OF BLOCK #10 ---

		slot3 = if not modifyProperty[a.itemName] then
		JUMP TO BLOCK #11
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #11 52-52, warpins: 1 ---
		slot3 = 0
		--- END OF BLOCK #11 ---

		FLOW; TARGET BLOCK #12


		--- BLOCK #12 53-53, warpins: 2 ---
		disA = disA + slot3
		--- END OF BLOCK #12 ---

		FLOW; TARGET BLOCK #13


		--- BLOCK #13 54-64, warpins: 4 ---
		local disB = getDis(player, b)

		--- END OF BLOCK #13 ---

		slot4 = if self:isMonster(b)

		 then
		JUMP TO BLOCK #14
		else
		JUMP TO BLOCK #20
		end


		--- BLOCK #14 65-68, warpins: 1 ---
		slot4 = modifyProperty
		--- END OF BLOCK #14 ---

		slot5 = if b.info then
		JUMP TO BLOCK #15
		else
		JUMP TO BLOCK #16
		end


		--- BLOCK #15 69-72, warpins: 1 ---
		slot5 = b.info:getName()
		--- END OF BLOCK #15 ---

		FLOW; TARGET BLOCK #16


		--- BLOCK #16 73-75, warpins: 2 ---
		--- END OF BLOCK #16 ---

		slot4 = if not slot4[slot5] then
		JUMP TO BLOCK #17
		else
		JUMP TO BLOCK #18
		end


		--- BLOCK #17 76-76, warpins: 1 ---
		slot4 = 0
		--- END OF BLOCK #17 ---

		FLOW; TARGET BLOCK #18


		--- BLOCK #18 77-86, warpins: 2 ---
		disB = disB + slot4

		--- END OF BLOCK #18 ---

		slot4 = if def.role.stateHas(b.last.state, "stStone")

		 then
		JUMP TO BLOCK #19
		else
		JUMP TO BLOCK #26
		end


		--- BLOCK #19 87-88, warpins: 1 ---
		disB = disB + 3
		--- END OF BLOCK #19 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #26


		--- BLOCK #20 89-92, warpins: 1 ---
		--- END OF BLOCK #20 ---

		if 0 < b.state then
		JUMP TO BLOCK #21
		else
		JUMP TO BLOCK #23
		end


		--- BLOCK #21 93-95, warpins: 1 ---
		--- END OF BLOCK #21 ---

		slot4 = if pickGoodAttItem then
		JUMP TO BLOCK #22
		else
		JUMP TO BLOCK #23
		end


		--- BLOCK #22 96-99, warpins: 1 ---
		disB = disB + autoRat.itemProperty
		--- END OF BLOCK #22 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #26


		--- BLOCK #23 100-104, warpins: 2 ---
		--- END OF BLOCK #23 ---

		slot4 = if not modifyProperty[b.itemName] then
		JUMP TO BLOCK #24
		else
		JUMP TO BLOCK #25
		end


		--- BLOCK #24 105-105, warpins: 1 ---
		slot4 = 0
		--- END OF BLOCK #24 ---

		FLOW; TARGET BLOCK #25


		--- BLOCK #25 106-106, warpins: 2 ---
		disB = disB + slot4
		--- END OF BLOCK #25 ---

		FLOW; TARGET BLOCK #26


		--- BLOCK #26 107-108, warpins: 4 ---
		--- END OF BLOCK #26 ---

		if disA >= disB then
		JUMP TO BLOCK #27
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #27 109-110, warpins: 1 ---
		slot4 = false
		--- END OF BLOCK #27 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #29


		--- BLOCK #28 111-111, warpins: 1 ---
		slot4 = true

		--- END OF BLOCK #28 ---

		FLOW; TARGET BLOCK #29


		--- BLOCK #29 112-112, warpins: 2 ---
		return slot4
		--- END OF BLOCK #29 ---



	end)
	--- END OF BLOCK #27 ---

	for k, v in ipairs(targets)

	LOOP BLOCK #28
	GO OUT TO BLOCK #46


	--- BLOCK #28 155-157, warpins: 1 ---
	--- END OF BLOCK #28 ---

	if v.__cname == "mon" then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #40
	end


	--- BLOCK #29 158-164, warpins: 1 ---
	--- END OF BLOCK #29 ---

	slot14 = if not self.getTempData(self, v, "attacked")

	 then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #30 165-168, warpins: 1 ---
	--- END OF BLOCK #30 ---

	slot14 = if self.settings.ignoreCripple then
	JUMP TO BLOCK #31
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #31 169-172, warpins: 1 ---
	--- END OF BLOCK #31 ---

	slot14 = if v.info.hp then
	JUMP TO BLOCK #32
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #32 173-180, warpins: 1 ---
	--- END OF BLOCK #32 ---

	if v.info.hp.max ~= v.info.hp.cur then
	JUMP TO BLOCK #33
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #33 181-191, warpins: 1 ---
	local preHp = v.info.hp.cur
	local handler = nil
	handler = scheduler.scheduleGlobal(function ()
		--- BLOCK #0 1-7, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if not tolua.isnull(v.node)

		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 8-14, warpins: 1 ---
		--- END OF BLOCK #1 ---

		if preHp == v.info.hp.cur then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 15-23, warpins: 1 ---
		v.info.hp.cur = v.info.hp.max

		--- END OF BLOCK #2 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #3 24-24, warpins: 1 ---
		return 

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 25-29, warpins: 3 ---
		scheduler.unscheduleGlobal(handler)

		return 
		--- END OF BLOCK #4 ---



	end, 50)
	--- END OF BLOCK #33 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #44


	--- BLOCK #34 192-201, warpins: 4 ---
	local dis = getDis(player, v)
	local cls = self.checkMonster(self, v)

	--- END OF BLOCK #34 ---

	slot15 = if not cls then
	JUMP TO BLOCK #35
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #35 202-207, warpins: 1 ---
	self.tempMarkObject(self, target, "cannotClose", 10)

	--- END OF BLOCK #35 ---

	FLOW; TARGET BLOCK #36


	--- BLOCK #36 208-209, warpins: 2 ---
	--- END OF BLOCK #36 ---

	if dis ~= 0 then
	JUMP TO BLOCK #37
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #37 210-212, warpins: 1 ---
	--- END OF BLOCK #37 ---

	if dis >= self.atkRangeDis then
	JUMP TO BLOCK #38
	else
	JUMP TO BLOCK #39
	end


	--- BLOCK #38 213-214, warpins: 1 ---
	--- END OF BLOCK #38 ---

	slot15 = if cls then
	JUMP TO BLOCK #39
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #39 215-217, warpins: 2 ---
	return v

	--- END OF BLOCK #39 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #44


	--- BLOCK #40 218-221, warpins: 1 ---
	--- END OF BLOCK #40 ---

	if player.x == v.x then
	JUMP TO BLOCK #41
	else
	JUMP TO BLOCK #42
	end


	--- BLOCK #41 222-225, warpins: 1 ---
	--- END OF BLOCK #41 ---

	if player.y ~= v.y then
	JUMP TO BLOCK #42
	else
	JUMP TO BLOCK #43
	end


	--- BLOCK #42 226-231, warpins: 2 ---
	--- END OF BLOCK #42 ---

	slot14 = if self.checkClose(self, v)

	 then
	JUMP TO BLOCK #43
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #43 232-233, warpins: 2 ---
	return v
	--- END OF BLOCK #43 ---

	FLOW; TARGET BLOCK #44


	--- BLOCK #44 234-234, warpins: 6 ---
	--- END OF BLOCK #44 ---

	FLOW; TARGET BLOCK #45


	--- BLOCK #45 235-236, warpins: 2 ---
	--- END OF BLOCK #45 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #27


	--- BLOCK #46 237-238, warpins: 1 ---
	return 
	--- END OF BLOCK #46 ---



end
autoRat.isMonster = function (self, target)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if target then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 3-5, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if target.__cname ~= "mon" then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 6-7, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 8-8, warpins: 1 ---
	slot2 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 9-9, warpins: 3 ---
	return slot2
	--- END OF BLOCK #4 ---



end
autoRat.checkTarget = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	local target = self.target
	local nearestTarget = self.getNearestTarget(self, false, true)

	--- END OF BLOCK #0 ---

	if target == nearestTarget then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-9, warpins: 1 ---
	return target

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-11, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot1 = if target then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-17, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot3 = if self.isMonster(self, target)

	 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #4 18-21, warpins: 2 ---
	slot3 = tolua.isnull
	--- END OF BLOCK #4 ---

	slot4 = if target then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 22-22, warpins: 1 ---
	slot4 = target.node

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 23-25, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot3 = if not slot3(slot4)
	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 26-31, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot3 = if self.checkMonster(self, target)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 32-35, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot3 = if not not target.die then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #9 36-37, warpins: 4 ---
	--- END OF BLOCK #9 ---

	slot1 = if target then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #10 38-40, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot3 = if target.die then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 41-44, warpins: 1 ---
	self.tempData[target.roleid] = nil
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 45-51, warpins: 3 ---
	target = nearestTarget

	--- END OF BLOCK #12 ---

	slot3 = if self.isMonster(self, target)

	 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #13 52-54, warpins: 1 ---
	--- END OF BLOCK #13 ---

	if self.target ~= nearestTarget then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #14 55-61, warpins: 1 ---
	self.preTargetHP = target.info.hp.max
	self.checkedAtkCnt = 0

	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #20


	--- BLOCK #15 62-63, warpins: 1 ---
	--- END OF BLOCK #15 ---

	slot2 = if not nearestTarget then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 64-65, warpins: 1 ---
	return target

	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #20


	--- BLOCK #17 66-75, warpins: 1 ---
	local player = main_scene.ground.player

	--- END OF BLOCK #17 ---

	if self.atkRangeDis <= getDis(player, target)

	 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #18 76-82, warpins: 1 ---
	target = nearestTarget

	--- END OF BLOCK #18 ---

	slot4 = if self.isMonster(self, target)

	 then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 83-88, warpins: 1 ---
	self.preTargetHP = target.info.hp.max
	self.checkedAtkCnt = 0
	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 89-91, warpins: 7 ---
	--- END OF BLOCK #20 ---

	if self.target ~= target then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 92-93, warpins: 1 ---
	self.checkedAtkCnt = 0
	--- END OF BLOCK #21 ---

	FLOW; TARGET BLOCK #22


	--- BLOCK #22 94-95, warpins: 2 ---
	self.target = target

	return target
	--- END OF BLOCK #22 ---



end
autoRat.isCloseAttack = function (self, skipAmulet)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if g_data.player.job == 1 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 6-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if self.settings.atkMagic.enable == nil then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 11-18, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot2 = if g_data.player:getMagic(1)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 19-26, warpins: 1 ---
	self.settings.atkMagic.enable = true
	self.settings.atkMagic.magicId = 1

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 27-28, warpins: 4 ---
	--- END OF BLOCK #4 ---

	slot1 = if not skipAmulet then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #5 29-33, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot2 = if self.settings.atkMagic.enable then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #6 34-38, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if self.settings.atkMagic.magicId == 48 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #7 39-44, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot2 = if not common.checkAmulet(true)
	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #8 45-53, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot2 = if g_data.client:checkLastTime("autoRatCheckAmult", 1)
	 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 54-67, warpins: 1 ---
	g_data.client:setLastTime("autoRatCheckAmult", true)
	common.addMsg("»¤Éí·ûÓÃ¾¡, Çë¼ì²é»¤Éí·û¡£", 255, 252, true)

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 68-69, warpins: 2 ---
	return true

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 70-88, warpins: 2 ---
	local data = g_data.player:getMagic(48)

	--- END OF BLOCK #11 ---

	if g_data.player.ability:get("MP")
	 < data.get(data, "needMp")
	 then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #12 89-97, warpins: 1 ---
	--- END OF BLOCK #12 ---

	slot3 = if g_data.client:checkLastTime("autoRatUseMagic", 1)
	 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 98-110, warpins: 1 ---
	g_data.client:setLastTime("autoRatUseMagic", true)
	main_scene.ui:tip("Ã»ÓÐ×ã¹»µÄÄ§·¨µãÊý!")

	--- END OF BLOCK #13 ---

	FLOW; TARGET BLOCK #14


	--- BLOCK #14 111-112, warpins: 2 ---
	return true

	--- END OF BLOCK #14 ---

	FLOW; TARGET BLOCK #15


	--- BLOCK #15 113-117, warpins: 5 ---
	--- END OF BLOCK #15 ---

	slot2 = if self.settings.atkMagic.enable then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #16 118-127, warpins: 1 ---
	--- END OF BLOCK #16 ---

	slot2 = if g_data.player:getMagic(self.settings.atkMagic.magicId)

	 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #17 128-132, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if self.settings.atkMagic.magicId ~= 13 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 133-134, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #18 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #20


	--- BLOCK #19 135-135, warpins: 3 ---
	slot2 = true

	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 136-136, warpins: 2 ---
	return slot2
	--- END OF BLOCK #20 ---



end
autoRat.setAttackRange = function (self, range)
	--- BLOCK #0 1-5, warpins: 1 ---
	assert(range)

	self.atkRangeDis = range

	return 
	--- END OF BLOCK #0 ---



end
autoRat.enable = function (self)
	--- BLOCK #0 1-39, warpins: 1 ---
	self.console.controller.autoFindPath.autoRatting = self.enableRat
	self._dt = 0
	self.checkedAtkCnt = 0
	self.roarTimer = 0
	self.tryCallPetTimer = 0
	self.avoidedDCnter = 0
	self.amuletAttack = 0
	self.lastExpUpdateTime = os.time()

	self.updateModifyProperty(self)
	main_scene.ui:tip("¿ªÆô×Ô¶¯´ò¹Ö.")

	self.enableRat = true

	main_scene.ground.player:showAutoRatHint()

	return 
	--- END OF BLOCK #0 ---



end
autoRat.clearAllAct = function (self)
	--- BLOCK #0 1-23, warpins: 1 ---
	self.console:setWidgetSelect("btnAutoRat", false)

	self.controller = self.console.controller
	local findPath = self.controller.autoFindPath

	findPath.multiMapPathStop(findPath)
	--- END OF BLOCK #0 ---

	slot2 = if not tolua.isnull(main_scene.ground.player.node)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 24-29, warpins: 1 ---
	main_scene.ground.player:hideAutoRatHint()

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 30-43, warpins: 2 ---
	self.console.controller.move.enable = false
	self.target = nil
	local lock = self.controller.lock

	lock.setAttackTarget(lock, nil)

	return 
	--- END OF BLOCK #2 ---



end
autoRat.stop = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.enableRat then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-14, warpins: 1 ---
	self.enableRat = false

	main_scene.ui:tip("×Ô¶¯´ò¹ÖÒÑ¹Ø±Õ.")
	self.clearAllAct(self)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
autoRat.getPets = function (self, petid)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if petid == 30 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-11, warpins: 1 ---
	name = string.format("ÉñÊÞ(%s)", common.getPlayerName())
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #2 12-13, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if petid == 17 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 14-22, warpins: 1 ---
	name = string.format("±äÒì÷¼÷Ã(%s)", common.getPlayerName())

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 23-24, warpins: 1 ---
	return false

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-32, warpins: 3 ---
	local pets = {}

	--- END OF BLOCK #5 ---

	for k, v in pairs(main_scene.ground.map.mons)

	LOOP BLOCK #6
	GO OUT TO BLOCK #10


	--- BLOCK #6 33-35, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot8 = if not v.die then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 36-42, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if v.info:getName()

	 == name then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 43-49, warpins: 1 ---
	v.isPet = true

	table.insert(pets, v)

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 50-51, warpins: 4 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #10 52-52, warpins: 1 ---
	return pets
	--- END OF BLOCK #10 ---



end
autoRat.getRegionRoleCnt = function (self, pos, radio, type)
	--- BLOCK #0 1-9, warpins: 1 ---
	local cnt = 0
	local map = main_scene.ground.map
	local roles = {}
	--- END OF BLOCK #0 ---

	for x=-radio, radio, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #7

	--- BLOCK #1 10-13, warpins: 2 ---
	--- END OF BLOCK #1 ---

	for y=-radio, radio, 1
	LOOP BLOCK #2
	GO OUT TO BLOCK #6

	--- BLOCK #2 14-23, warpins: 2 ---
	local role = map.findRoelWithPos(map, pos.x + x, pos.y + y, type)
	--- END OF BLOCK #2 ---

	slot15 = if role then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #3 24-26, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot16 = if not role.die then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 27-30, warpins: 1 ---
	roles[#roles + 1] = role
	cnt = cnt + 1

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 31-31, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #6 32-32, warpins: 1 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 33-35, warpins: 1 ---
	return cnt, roles
	--- END OF BLOCK #7 ---



end
autoRat.checkRoar = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local setting = self.settings.autoRoar

	--- END OF BLOCK #0 ---

	slot2 = if setting.enable then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #1 6-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if g_data.player:getMagic(43)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #2 14-20, warpins: 1 ---
	local player = main_scene.ground.player
	--- END OF BLOCK #2 ---

	if 0 < self.roarTimer then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 21-24, warpins: 1 ---
	self.roarTimer = self.roarTimer - 1

	return 

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 25-33, warpins: 2 ---
	local cnt = self.getRegionRoleCnt(self, player, 2, "mon")
	--- END OF BLOCK #4 ---

	if setting.cnt <= cnt then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #5 34-45, warpins: 1 ---
	self.roarTimer = setting.space/autoRat.checkInterval

	--- END OF BLOCK #5 ---

	slot4 = if self.useMagic(self, nil, 43)

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 46-47, warpins: 1 ---
	return true
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 48-48, warpins: 5 ---
	return 
	--- END OF BLOCK #7 ---



end
autoRat.checkPets = function (self)
	--- BLOCK #0 1-7, warpins: 1 ---
	local name = nil

	--- END OF BLOCK #0 ---

	slot2 = if not common.checkAmulet(true)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 8-16, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if g_data.client:checkLastTime("autoRatCheckPets", 1)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 17-30, warpins: 1 ---
	g_data.client:setLastTime("autoRatCheckPets", true)
	common.addMsg("»¤Éí·ûÓÃ¾¡, Çë¼ì²é»¤Éí·û¡£", 255, 252, true)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 31-31, warpins: 2 ---
	return 

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 32-37, warpins: 2 ---
	local petid = nil
	--- END OF BLOCK #4 ---

	slot3 = if self.settings.autoPet.enable then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 38-44, warpins: 1 ---
	petid = tonumber(self.settings.autoPet.magicId)

	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #6 45-46, warpins: 1 ---
	return false

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 47-54, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot3 = if not g_data.player:getMagic(petid)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 55-56, warpins: 1 ---
	return false

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 57-64, warpins: 2 ---
	--- END OF BLOCK #9 ---

	slot3 = if not g_data.player:hasSlave("ÉñÊÞ")
	 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #10 65-72, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot3 = if not g_data.player:hasSlave("±äÒì÷¼÷Ã")

	 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #11 73-81, warpins: 1 ---
	self.tryCallPetTimer = self.tryCallPetTimer - 1

	--- END OF BLOCK #11 ---

	if autoRat.maxTryCallPetTime/2 < self.tryCallPetTimer then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 82-89, warpins: 1 ---
	self.useMagic(self, nil, petid)

	return true

	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #15


	--- BLOCK #13 90-95, warpins: 1 ---
	--- END OF BLOCK #13 ---

	if self.tryCallPetTimer < -autoRat.maxTryCallPetTime then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 96-98, warpins: 1 ---
	self.tryCallPetTimer = autoRat.maxTryCallPetTime

	--- END OF BLOCK #14 ---

	FLOW; TARGET BLOCK #15


	--- BLOCK #15 99-99, warpins: 5 ---
	return 
	--- END OF BLOCK #15 ---



end
autoRat.checkCureSelf = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local setting = self.settings.autoCure

	--- END OF BLOCK #0 ---

	slot2 = if setting.enable then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #1 6-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if not g_data.player:getMagic(setting.magicId)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-15, warpins: 1 ---
	return false

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 16-23, warpins: 2 ---
	local player = main_scene.ground.player

	--- END OF BLOCK #3 ---

	slot3 = if not player.info.hp.cur then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 24-24, warpins: 1 ---
	return 

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-35, warpins: 2 ---
	local curHpPercent = player.info.hp.cur/player.info.hp.max

	--- END OF BLOCK #5 ---

	if curHpPercent*100 <= setting.percent then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 36-40, warpins: 1 ---
	return self.useMagic(self, player, setting.magicId)
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 41-42, warpins: 3 ---
	return false
	--- END OF BLOCK #7 ---



end
autoRat.checkCurePet = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local setting = self.settings.autoCurePet

	--- END OF BLOCK #0 ---

	slot2 = if setting.enable then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #1 6-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if not g_data.player:getMagic(setting.magicId)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-15, warpins: 1 ---
	return false

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 16-19, warpins: 2 ---
	--- END OF BLOCK #3 ---

	for _, petid in ipairs({
		30,
		17
	})


	LOOP BLOCK #4
	GO OUT TO BLOCK #12


	--- BLOCK #4 20-27, warpins: 1 ---
	local pets = self.getPets(self, petid)

	--- END OF BLOCK #4 ---

	for k, v in ipairs(pets)

	LOOP BLOCK #5
	GO OUT TO BLOCK #11


	--- BLOCK #5 28-30, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot13 = if v.info then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #6 31-35, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot13 = if v.info.hp.cur then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 36-45, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if self.getTempData(self, v, "preHP")

	 ~= v.info.hp.cur then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 46-56, warpins: 1 ---
	local curHpPercent = v.info.hp.cur/v.info.hp.max

	--- END OF BLOCK #8 ---

	if curHpPercent*100 <= setting.percent then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 57-69, warpins: 1 ---
	self.setTempData(self, v, "preHP", v.info.hp.cur)

	return self.useMagic(self, v, setting.magicId)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 70-71, warpins: 6 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #11 72-73, warpins: 2 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #12 74-75, warpins: 2 ---
	return false
	--- END OF BLOCK #12 ---



end
autoRat.checkPoison = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	local player = main_scene.ground.player
	local tar = self.target

	--- END OF BLOCK #0 ---

	slot3 = if self.settings.autoPoison then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #1 9-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot3 = if self.isMonster(self, tar)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #2 15-17, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot3 = if not tar.die then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #3 18-25, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if getDis(player, tar)
	 <= autoRat.rangeAtkDis then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #4 26-33, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot3 = if g_data.player:getMagic(6)

	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #5 34-41, warpins: 1 ---
	local redPoison, greenPoison, equiped = self.console.controller:getPoisonItems(tar)

	--- END OF BLOCK #5 ---

	slot3 = if redPoison then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 42-49, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot6 = if def.role.stateHas(tar.state, "stPoisonRed")
	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 50-51, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot4 = if greenPoison then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 52-59, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot6 = if not def.role.stateHas(tar.state, "stPoisonGreen")

	 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 60-65, warpins: 2 ---
	local ret = self.useMagic(self, tar, 6)

	return ret
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 66-66, warpins: 8 ---
	return 
	--- END OF BLOCK #10 ---



end
autoRat.usePet = function (self, petid)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.petid = petid

	return 
	--- END OF BLOCK #0 ---



end
autoRat.setMagic = function (self, magicid)
	--- BLOCK #0 1-8, warpins: 1 ---
	local data = g_data.player:getMagic(magicid)
	--- END OF BLOCK #0 ---

	slot2 = if data then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-29, warpins: 1 ---
	local config = def.magic.getMagicConfigByUid(magicid)

	self.console.skills:select(tostring(magicID))
	self.console:call("lock", "useSkill", data, config)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 30-30, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
local explorer = class("explorer")
explorer.ctor = function (self, map, findPath, autoRater)
	--- BLOCK #0 1-30, warpins: 1 ---
	self.map = map
	self.findPath = findPath
	self.autoRater = autoRater
	self.expDis = math.floor(math.pow(map.w + 5, 0.6))
	self.maxExplorePoints = (map.w*map.h)/math.pow(self.expDis*2, 2)*0.7
	self.points = {}
	self.complete = false

	return 
	--- END OF BLOCK #0 ---



end
explorer._tryTarget = function (self, curPos, pos)
	--- BLOCK #0 1-9, warpins: 1 ---
	local findPath = self.findPath

	--- END OF BLOCK #0 ---

	slot4 = if self.autoRater:isCanWalk(pos.x, pos.y)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 10-25, warpins: 1 ---
	findPath.singleMapPathStop(findPath)
	findPath.searchForRun(findPath, curPos.x, curPos.y, pos.x, pos.y, nil, false, 1)

	--- END OF BLOCK #1 ---

	slot4 = if findPath.points then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 26-30, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if 0 < #findPath.points then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 31-33, warpins: 1 ---
	self.preTargetPosition = pos

	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 34-34, warpins: 4 ---
	return 
	--- END OF BLOCK #4 ---



end
explorer.tryExploredPoints = function (self, curPos)
	--- BLOCK #0 1-5, warpins: 1 ---
	local findPath = self.findPath
	--- END OF BLOCK #0 ---

	for tryCnt=1, 10, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #4

	--- BLOCK #1 6-19, warpins: 2 ---
	local index = math.random(#self.points)
	local pos = self.points[index]

	--- END OF BLOCK #1 ---

	slot9 = if self._tryTarget(self, curPos, pos)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 20-21, warpins: 1 ---
	return true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 22-22, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 23-23, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
explorer.getNext = function (self, curPos)
	--- BLOCK #0 1-5, warpins: 1 ---
	local findPath = self.findPath
	local pos = nil

	--- END OF BLOCK #0 ---

	slot4 = if not self.complete then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 6-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if self.maxExplorePoints <= #self.points then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-13, warpins: 1 ---
	self._generatePatrolPath(self)
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 14-16, warpins: 3 ---
	--- END OF BLOCK #3 ---

	slot4 = if self.preTargetPosition then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 17-24, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if self.expDis/2 < getDis(self.preTargetPosition, curPos)

	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 25-26, warpins: 1 ---
	pos = self.preTargetPosition
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #6 27-29, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot4 = if self.complete then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #7 30-32, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot4 = if self.preTargetPosition then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 33-36, warpins: 1 ---
	pos = self.preTargetPosition.next
	--- END OF BLOCK #8 ---

	slot3 = if not pos then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #9 37-39, warpins: 1 ---
	pos = self.points[1]

	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #10 40-45, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot4 = if self.tryExploredPoints(self, curPos)

	 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 46-46, warpins: 1 ---
	return 

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 47-48, warpins: 6 ---
	--- END OF BLOCK #12 ---

	slot3 = if pos then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 49-55, warpins: 1 ---
	--- END OF BLOCK #13 ---

	slot4 = if not self._tryTarget(self, curPos, pos)

	 then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #14 56-62, warpins: 2 ---
	local startPos = curPos
	local dis = self.expDis
	local dbdis = dis*2
	--- END OF BLOCK #14 ---

	for tryCnt=1, 15, 1
	LOOP BLOCK #15
	GO OUT TO BLOCK #23

	--- BLOCK #15 63-84, warpins: 2 ---
	local x = math.random(-dbdis, dbdis)
	local y = math.random(-dbdis, dbdis)
	local pos = cc.p(startPos.x + x, startPos.y + y)
	local ok = true

	--- END OF BLOCK #15 ---

	for k, v in ipairs(self.points)

	LOOP BLOCK #16
	GO OUT TO BLOCK #19


	--- BLOCK #16 85-90, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if getDis(v, pos)

	 < dis then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 91-99, warpins: 1 ---
	local index = math.random(#self.points)
	startPos = self.points[index]
	ok = false

	--- END OF BLOCK #17 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #19


	--- BLOCK #18 100-101, warpins: 2 ---
	--- END OF BLOCK #18 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #15


	--- BLOCK #19 102-103, warpins: 2 ---
	--- END OF BLOCK #19 ---

	slot14 = if ok then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #20 104-110, warpins: 1 ---
	--- END OF BLOCK #20 ---

	slot15 = if self._tryTarget(self, curPos, pos)
	 then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 111-115, warpins: 1 ---
	self.addNewPos(self, pos)

	return 
	--- END OF BLOCK #21 ---

	FLOW; TARGET BLOCK #22


	--- BLOCK #22 116-116, warpins: 3 ---
	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #14


	--- BLOCK #23 117-117, warpins: 1 ---
	--- END OF BLOCK #23 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #25


	--- BLOCK #24 118-118, warpins: 1 ---
	return 

	--- END OF BLOCK #24 ---

	FLOW; TARGET BLOCK #25


	--- BLOCK #25 119-123, warpins: 2 ---
	self.tryExploredPoints(self, curPos)

	return 
	--- END OF BLOCK #25 ---



end
explorer._generatePatrolPath = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.complete then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-10, warpins: 1 ---
	local findPath = self.findPath

	local function generater()
		--- BLOCK #0 1-7, warpins: 1 ---
		local ignore = {}
		local cur = nil

		--- END OF BLOCK #0 ---

		for index, _ in ipairs(self.points)


		LOOP BLOCK #1
		GO OUT TO BLOCK #12


		--- BLOCK #1 8-9, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot1 = if not cur then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 10-10, warpins: 1 ---
		cur = _
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 11-19, warpins: 2 ---
		ignore[cur] = true
		local min = 99999999
		local minPoint = nil

		--- END OF BLOCK #3 ---

		for _, pos in ipairs(self.points)


		LOOP BLOCK #4
		GO OUT TO BLOCK #9


		--- BLOCK #4 20-25, warpins: 1 ---
		local dis = getDis(cur, pos)
		--- END OF BLOCK #4 ---

		slot14 = if dis then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #8
		end


		--- BLOCK #5 26-28, warpins: 1 ---
		--- END OF BLOCK #5 ---

		slot15 = if not ignore[pos] then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #8
		end


		--- BLOCK #6 29-30, warpins: 1 ---
		--- END OF BLOCK #6 ---

		if dis < min then
		JUMP TO BLOCK #7
		else
		JUMP TO BLOCK #8
		end


		--- BLOCK #7 31-32, warpins: 1 ---
		min = dis
		minPoint = pos
		--- END OF BLOCK #7 ---

		FLOW; TARGET BLOCK #8


		--- BLOCK #8 33-34, warpins: 5 ---
		--- END OF BLOCK #8 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #9 35-36, warpins: 1 ---
		--- END OF BLOCK #9 ---

		slot8 = if minPoint then
		JUMP TO BLOCK #10
		else
		JUMP TO BLOCK #11
		end


		--- BLOCK #10 37-39, warpins: 1 ---
		cur.next = minPoint
		minPoint.pre = cur
		cur = minPoint
		--- END OF BLOCK #10 ---

		FLOW; TARGET BLOCK #11


		--- BLOCK #11 40-41, warpins: 3 ---
		--- END OF BLOCK #11 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #0


		--- BLOCK #12 42-48, warpins: 1 ---
		self.complete = true
		self.co_patrolPathGenerater = nil

		return 
		--- END OF BLOCK #12 ---



	end

	generater()

	return 
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 11-11, warpins: 2 ---
	--- END OF BLOCK #3 ---



end
explorer.addNewPos = function (self, pos)
	--- BLOCK #0 1-6, warpins: 1 ---
	table.insert(self.points, pos)

	return 
	--- END OF BLOCK #0 ---



end
autoRat.explore = function (self)
	--- BLOCK #0 1-11, warpins: 1 ---
	local findPath = self.controller.autoFindPath
	local lock = self.controller.lock

	lock.setAttackTarget(lock, nil)

	--- END OF BLOCK #0 ---

	slot3 = if findPath.points then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 12-16, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if 0 < #findPath.points then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 17-17, warpins: 1 ---
	return 

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 18-27, warpins: 3 ---
	local map = main_scene.ground.map
	local player = main_scene.ground.player
	--- END OF BLOCK #3 ---

	if map.mapid ~= self.curmapid then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 28-36, warpins: 1 ---
	self.curmapid = map.mapid
	self.explorer = explorer.new(map, findPath, self)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 37-42, warpins: 2 ---
	self.explorer:getNext(player)

	return 
	--- END OF BLOCK #5 ---



end
autoRat.checkAttackRange = function (self)
	--- BLOCK #0 1-11, warpins: 1 ---
	local dis = nil
	local player = main_scene.ground.player
	local atkMagic = self.settings.atkMagic

	--- END OF BLOCK #0 ---

	slot4 = if self.isCloseAttack(self)

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-13, warpins: 1 ---
	dis = 2
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 14-14, warpins: 1 ---
	dis = self.atkRangeDis

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-16, warpins: 2 ---
	--- END OF BLOCK #3 ---

	slot3 = if atkMagic then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #4 17-19, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot4 = if atkMagic.enable then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #5 20-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot4 = if g_data.player:getMagic(atkMagic.magicId)
	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #6 28-35, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot4 = if checkExist(atkMagic.magicId, 1, 5, 13)

	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 36-45, warpins: 1 ---
	local map = main_scene.ground.map

	--- END OF BLOCK #7 ---

	slot5 = if not map.checkFlyTo(map, player, self.target)
	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 46-53, warpins: 1 ---
	self.setTempData(self, self.target, "tempAttackRange", 2)

	dis = 2

	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #9 54-59, warpins: 1 ---
	self.setTempData(self, self.target, "tempAttackRange", dis)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 60-62, warpins: 3 ---
	--- END OF BLOCK #10 ---

	if 3 < dis then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #11 63-72, warpins: 1 ---
	--- END OF BLOCK #11 ---

	slot4 = if def.role.stateHas(self.target.last.state, "stStone")

	 then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 73-73, warpins: 1 ---
	dis = 3

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 74-78, warpins: 6 ---
	self.setAttackRange(self, dis)

	return 
	--- END OF BLOCK #13 ---



end
autoRat.closeToTarget = function (self)
	--- BLOCK #0 1-11, warpins: 1 ---
	local dis = nil
	local tar = self.target
	local player = main_scene.ground.player

	--- END OF BLOCK #0 ---

	slot4 = if self.isMonster(self, self.target)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-15, warpins: 1 ---
	self.checkAttackRange(self)

	dis = self.atkRangeDis
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-22, warpins: 2 ---
	local findPath = self.controller.autoFindPath

	findPath.singleMapPathStop(findPath)
	--- END OF BLOCK #2 ---

	slot1 = if dis then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 23-30, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if math.abs(player.x - tar.x)
	 < dis then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #4 31-38, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if math.abs(player.y - tar.y)

	 < dis then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 39-41, warpins: 1 ---
	return true
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #6 42-45, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if player.x == tar.x then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 46-49, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if player.y == tar.y then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 50-51, warpins: 1 ---
	return true

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 52-69, warpins: 6 ---
	local lock = self.controller.lock

	lock.setAttackTarget(lock, nil)
	findPath.searchForRun(findPath, player.x, player.y, tar.x, tar.y, nil, false, dis)

	return false
	--- END OF BLOCK #9 ---



end
autoRat.useMagic = function (self, target, magicId)
	--- BLOCK #0 1-4, warpins: 1 ---
	local lock = self.controller.lock

	--- END OF BLOCK #0 ---

	slot1 = if target then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	lock.setSkillTarget(lock, target)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 10-12, warpins: 1 ---
	target = main_scene.ground.player
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 13-20, warpins: 2 ---
	local data = g_data.player:getMagic(magicId)

	--- END OF BLOCK #3 ---

	slot4 = if not data then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #4 21-29, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot5 = if g_data.client:checkLastTime("autoRatUseMagic", 1)
	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 30-42, warpins: 1 ---
	g_data.client:setLastTime("autoRatUseMagic", true)
	main_scene.ui:tip("¼¼ÄÜ²»¿ÉÓÃ!")

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 43-44, warpins: 2 ---
	return false

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 45-57, warpins: 2 ---
	--- END OF BLOCK #7 ---

	if g_data.player.ability:get("MP")
	 < data.get(data, "needMp")
	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #8 58-66, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot5 = if g_data.client:checkLastTime("autoRatUseMagic", 1)
	 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 67-79, warpins: 1 ---
	g_data.client:setLastTime("autoRatUseMagic", true)
	main_scene.ui:tip("Ã»ÓÐ×ã¹»µÄÄ§·¨µãÊý!")

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 80-81, warpins: 2 ---
	return false

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 82-98, warpins: 2 ---
	self.setMagic(self, magicId)
	self.controller:useMagic(target.x, target.y, nil, data)

	local player = main_scene.ground.player

	return true
	--- END OF BLOCK #11 ---



end
autoRat.attackUseMagic = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	local tar = self.target

	--- END OF BLOCK #0 ---

	slot2 = if tar.die then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	return false

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-11, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if g_data.player.job == 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #3 12-16, warpins: 1 ---
	local areaMagic = self.settings.areaMagic

	--- END OF BLOCK #3 ---

	slot3 = if areaMagic.enable then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #4 17-19, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot3 = if areaMagic.magicId then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #5 20-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot3 = if g_data.player:getMagic(areaMagic.magicId)

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #6 28-36, warpins: 1 ---
	local cnt, roles = self.getRegionRoleCnt(self, tar, 1, "mon")

	--- END OF BLOCK #6 ---

	if areaMagic.cnt <= cnt then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #7 37-40, warpins: 1 ---
	--- END OF BLOCK #7 ---

	for k, v in pairs(roles)

	LOOP BLOCK #8
	GO OUT TO BLOCK #12


	--- BLOCK #8 41-45, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot10 = if v.info.hp.cur then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 46-53, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if v.info.hp.cur == v.info.hp.max then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 54-59, warpins: 2 ---
	self.setTempData(self, v, "attacked", true)
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 60-61, warpins: 3 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #12 62-68, warpins: 1 ---
	self.useMagic(self, tar, areaMagic.magicId)

	return true

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 69-73, warpins: 6 ---
	local atkMagic = self.settings.atkMagic

	--- END OF BLOCK #13 ---

	slot3 = if atkMagic.enable then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #14 74-76, warpins: 1 ---
	--- END OF BLOCK #14 ---

	slot3 = if atkMagic.magicId then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #15 77-84, warpins: 1 ---
	--- END OF BLOCK #15 ---

	slot3 = if g_data.player:getMagic(atkMagic.magicId)

	 then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 85-92, warpins: 1 ---
	local sklDis = 10

	self.useMagic(self, tar, atkMagic.magicId)

	return true
	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 93-93, warpins: 4 ---
	return 
	--- END OF BLOCK #17 ---



end
autoRat.attack = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	local tar = self.target

	--- END OF BLOCK #0 ---

	slot2 = if tar.die then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	return false

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-20, warpins: 2 ---
	local lock = self.controller.lock

	lock.setAttackTarget(lock, tar)

	local player = main_scene.ground.player

	--- END OF BLOCK #2 ---

	slot4 = if self.settings.atkMagic.enable then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #3 21-25, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if self.settings.atkMagic.magicId == 13 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #4 26-29, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if self.amuletAttack <= 0 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 30-35, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot4 = if player.canNextSpell(player, 13)
	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 36-40, warpins: 1 ---
	self.useMagic(self, tar, 13)
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 41-45, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot4 = if player.isLocked(player)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 46-50, warpins: 1 ---
	self.amuletAttack = autoRat.amuletInterval

	return true

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 51-55, warpins: 5 ---
	--- END OF BLOCK #9 ---

	slot4 = if not player.canNextHit(player)

	 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 56-57, warpins: 1 ---
	return true

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 58-71, warpins: 2 ---
	self.controller:attackRole(main_scene.ground.map, player, tar)

	self.amuletAttack = self.amuletAttack - 1

	return true
	--- END OF BLOCK #11 ---



end
autoRat.pickUpItem = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	local tar = self.target

	--- END OF BLOCK #0 ---

	slot2 = if self.picking then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	return true

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-18, warpins: 1 ---
	local player = main_scene.ground.player
	local map = main_scene.ground.map

	--- END OF BLOCK #2 ---

	slot4 = if not self.isMonster(self, tar)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 19-22, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if player.x == tar.x then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 23-26, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if player.y == tar.y then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 27-36, warpins: 1 ---
	self.picking = true

	scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-7, warpins: 1 ---
		self.picking = false

		--- END OF BLOCK #0 ---

		slot0 = if map.items then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #1 8-14, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot0 = if map.items[tar.itemid] then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 15-29, warpins: 1 ---
		self:setTempData(tar, "cannotPick", true)

		self.target = nil

		scheduler.performWithDelayGlobal(function ()
			--- BLOCK #0 1-4, warpins: 1 ---
			--- END OF BLOCK #0 ---

			if map.items ~= nil then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #3
			end


			--- BLOCK #1 5-11, warpins: 1 ---
			--- END OF BLOCK #1 ---

			slot0 = if not map.items[tar.itemid] then
			JUMP TO BLOCK #2
			else
			JUMP TO BLOCK #3
			end


			--- BLOCK #2 12-18, warpins: 1 ---
			self:setTempData(tar, "cannotPick", nil)

			--- END OF BLOCK #2 ---

			FLOW; TARGET BLOCK #3


			--- BLOCK #3 19-19, warpins: 3 ---
			return 
			--- END OF BLOCK #3 ---



		end, 15)

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 30-30, warpins: 3 ---
		return 
		--- END OF BLOCK #3 ---



	end, 2)

	return true
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 37-38, warpins: 4 ---
	return 
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 39-39, warpins: 2 ---
	--- END OF BLOCK #7 ---



end
autoRat.checkHit = function (self)
	--- BLOCK #0 1-7, warpins: 1 ---
	local target = self.target
	--- END OF BLOCK #0 ---

	if target.info.hp.cur == self.preTargetHP then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 8-15, warpins: 1 ---
	local player = main_scene.ground.player

	--- END OF BLOCK #1 ---

	slot3 = if player.isLocked(player)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 16-18, warpins: 1 ---
	self.checkedAtkCnt = self.checkedAtkCnt + 1

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 19-23, warpins: 2 ---
	--- END OF BLOCK #3 ---

	if autoRat.maxLoseAtkTime < self.checkedAtkCnt then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 24-32, warpins: 1 ---
	self.tempMarkObject(self, target, "tooStronger", 30)

	self.target = nil
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #5 33-38, warpins: 1 ---
	self.checkedAtkCnt = 0
	self.preTargetHP = target.info.hp.cur

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 39-39, warpins: 3 ---
	return 
	--- END OF BLOCK #6 ---



end
autoRat.useItem = function (self, itemName)
	--- BLOCK #0 1-8, warpins: 1 ---
	local item = g_data.bag:getItemWithName(itemName)

	--- END OF BLOCK #0 ---

	slot2 = if item then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 9-57, warpins: 1 ---
	g_data.bag:use("eat", item.get(item, "makeIndex"), {
		quick = true
	})
	sound.play("item", item)
	net.send({
		CM_EAT,
		recog = item.get(item, "makeIndex")
	}, {
		item.getVar("name")
	})
	g_data.bag:delItem(item.get(item, "makeIndex"))
	--- END OF BLOCK #1 ---

	slot3 = if g_data.bag:delItem(makeIndex)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 58-61, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot3 = if self.panels.bag then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 62-67, warpins: 1 ---
	self.panels.bag:delItem(makeIndex)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 68-68, warpins: 4 ---
	return 
	--- END OF BLOCK #4 ---



end
autoRat.checkAvoid = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not self.isMonster(self, self.target)

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-7, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-12, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot1 = if self.settings.atkMagic.enable then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #53
	end


	--- BLOCK #3 13-17, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if self.settings.atkMagic.magicId ~= 13 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #53
	end


	--- BLOCK #4 18-21, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if 0 < self.avoidedDCnter then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 22-25, warpins: 1 ---
	self.avoidedDCnter = self.avoidedDCnter - 1

	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 26-39, warpins: 2 ---
	local player = main_scene.ground.player
	local nearObjsPos = {}
	local nearObjsDir = {}
	local map = main_scene.ground.map
	minDis = 4

	--- END OF BLOCK #6 ---

	for k, v in pairs(map.mons)


	LOOP BLOCK #7
	GO OUT TO BLOCK #21


	--- BLOCK #7 40-68, warpins: 1 ---
	local name = v.info:getName()
	local disX = math.abs(player.x - v.x)
	local disY = math.abs(player.y - v.y)
	slot13 = math.max(disX, disY)

	--- END OF BLOCK #7 ---

	slot14 = if not self.modifyProperty[v.info:getName()

	] then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 69-69, warpins: 1 ---
	slot14 = 0
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 70-73, warpins: 2 ---
	local dis = slot13 + slot14

	--- END OF BLOCK #9 ---

	slot14 = if not v.die then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #10 74-78, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot14 = if not v.isPolice(v)
	 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #11 79-81, warpins: 1 ---
	--- END OF BLOCK #11 ---

	slot14 = if not v.isDummy then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #12 82-83, warpins: 1 ---
	--- END OF BLOCK #12 ---

	slot10 = if name then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 84-90, warpins: 1 ---
	--- END OF BLOCK #13 ---

	slot14 = if not string.find(name, "%(")

	 then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #14 91-93, warpins: 2 ---
	--- END OF BLOCK #14 ---

	if dis < 4 then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #15 94-96, warpins: 1 ---
	--- END OF BLOCK #15 ---

	if dis < minDis then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 97-97, warpins: 1 ---
	minDis = dis
	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 98-108, warpins: 2 ---
	local dir = def.role.getMoveDir(player.x, player.y, v.x, v.y)
	--- END OF BLOCK #17 ---

	slot15 = if not nearObjsDir[dir] then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 109-109, warpins: 1 ---
	slot15 = 0
	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 110-112, warpins: 2 ---
	nearObjsDir[dir] = slot15 + dis/4

	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 113-114, warpins: 7 ---
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #21 115-118, warpins: 1 ---
	--- END OF BLOCK #21 ---

	if 2 < minDis then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #22 119-119, warpins: 1 ---
	return 

	--- END OF BLOCK #22 ---

	FLOW; TARGET BLOCK #23


	--- BLOCK #23 120-124, warpins: 2 ---
	local wDirs = {}
	--- END OF BLOCK #23 ---

	for k=0, 7, 1
	LOOP BLOCK #24
	GO OUT TO BLOCK #27

	--- BLOCK #24 125-127, warpins: 2 ---
	--- END OF BLOCK #24 ---

	slot10 = if not nearObjsDir[k] then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #25 128-128, warpins: 1 ---
	local cnt = 0.01
	--- END OF BLOCK #25 ---

	FLOW; TARGET BLOCK #26


	--- BLOCK #26 129-131, warpins: 2 ---
	wDirs[k] = cnt/1
	--- END OF BLOCK #26 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #23


	--- BLOCK #27 132-136, warpins: 1 ---
	local goodDirs = {}
	--- END OF BLOCK #27 ---

	for k=0, 7, 1
	LOOP BLOCK #28
	GO OUT TO BLOCK #33

	--- BLOCK #28 137-141, warpins: 2 ---
	--- END OF BLOCK #28 ---

	slot11 = if not wDirs[(k + 7)%8] then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #30
	end


	--- BLOCK #29 142-142, warpins: 1 ---
	slot11 = 0
	--- END OF BLOCK #29 ---

	FLOW; TARGET BLOCK #30


	--- BLOCK #30 143-148, warpins: 2 ---
	slot11 = slot11/3
	--- END OF BLOCK #30 ---

	slot12 = if not wDirs[(k + 1)%8] then
	JUMP TO BLOCK #31
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #31 149-149, warpins: 1 ---
	slot12 = 0
	--- END OF BLOCK #31 ---

	FLOW; TARGET BLOCK #32


	--- BLOCK #32 150-155, warpins: 2 ---
	goodDirs[k] = slot11 + slot12/3 + wDirs[k]
	--- END OF BLOCK #32 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #27


	--- BLOCK #33 156-160, warpins: 1 ---
	local max = 0

	--- END OF BLOCK #33 ---

	for k, v in pairs(goodDirs)


	LOOP BLOCK #34
	GO OUT TO BLOCK #48


	--- BLOCK #34 161-178, warpins: 1 ---
	local config = def.role.dir["_" .. k]

	--- END OF BLOCK #34 ---

	slot14 = if not self.isCanWalk(self, player.x + config[1], player.y + config[2])

	 then
	JUMP TO BLOCK #35
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #35 179-180, warpins: 1 ---
	local v = 0

	--- END OF BLOCK #35 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #42


	--- BLOCK #36 181-193, warpins: 1 ---
	--- END OF BLOCK #36 ---

	slot14 = if not self.isCanWalk(self, player.x + config[1]*2, player.y + config[2]*2)

	 then
	JUMP TO BLOCK #37
	else
	JUMP TO BLOCK #38
	end


	--- BLOCK #37 194-195, warpins: 1 ---
	v = v*0.4

	--- END OF BLOCK #37 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #42


	--- BLOCK #38 196-208, warpins: 1 ---
	--- END OF BLOCK #38 ---

	slot14 = if not self.isCanWalk(self, player.x + config[1]*3, player.y + config[2]*3)

	 then
	JUMP TO BLOCK #39
	else
	JUMP TO BLOCK #40
	end


	--- BLOCK #39 209-210, warpins: 1 ---
	v = v*0.6

	--- END OF BLOCK #39 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #42


	--- BLOCK #40 211-223, warpins: 1 ---
	--- END OF BLOCK #40 ---

	slot14 = if not self.isCanWalk(self, player.x + config[1]*4, player.y + config[2]*4)

	 then
	JUMP TO BLOCK #41
	else
	JUMP TO BLOCK #42
	end


	--- BLOCK #41 224-224, warpins: 1 ---
	v = v*0.8
	--- END OF BLOCK #41 ---

	FLOW; TARGET BLOCK #42


	--- BLOCK #42 225-226, warpins: 5 ---
	--- END OF BLOCK #42 ---

	if max < v then
	JUMP TO BLOCK #43
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #43 227-229, warpins: 1 ---
	max = v
	dir = k

	--- END OF BLOCK #43 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #47


	--- BLOCK #44 230-231, warpins: 1 ---
	--- END OF BLOCK #44 ---

	if max == v then
	JUMP TO BLOCK #45
	else
	JUMP TO BLOCK #47
	end


	--- BLOCK #45 232-237, warpins: 1 ---
	--- END OF BLOCK #45 ---

	if math.random()

	 < 0.5 then
	JUMP TO BLOCK #46
	else
	JUMP TO BLOCK #47
	end


	--- BLOCK #46 238-238, warpins: 1 ---
	dir = k
	--- END OF BLOCK #46 ---

	FLOW; TARGET BLOCK #47


	--- BLOCK #47 239-240, warpins: 5 ---
	--- END OF BLOCK #47 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #33


	--- BLOCK #48 241-258, warpins: 1 ---
	local config = def.role.dir["_" .. dir]

	--- END OF BLOCK #48 ---

	slot9 = if not self.isCanWalk(self, player.x + config[1], player.y + config[2])

	 then
	JUMP TO BLOCK #49
	else
	JUMP TO BLOCK #50
	end


	--- BLOCK #49 259-264, warpins: 1 ---
	self.controller.move.enable = false

	return false

	--- END OF BLOCK #49 ---

	FLOW; TARGET BLOCK #50


	--- BLOCK #50 265-279, warpins: 2 ---
	step = 2

	--- END OF BLOCK #50 ---

	slot9 = if not self.isCanWalk(self, player.x + config[1]*2, player.y + config[2]*2)

	 then
	JUMP TO BLOCK #51
	else
	JUMP TO BLOCK #52
	end


	--- BLOCK #51 280-281, warpins: 1 ---
	step = 1
	--- END OF BLOCK #51 ---

	FLOW; TARGET BLOCK #52


	--- BLOCK #52 282-298, warpins: 2 ---
	self.controller.move.enable = "dir"
	self.controller.move.dir = dir
	self.controller.move.step = step
	self.avoidedDCnter = autoRat.avoidInterval

	return true
	--- END OF BLOCK #52 ---

	FLOW; TARGET BLOCK #53


	--- BLOCK #53 299-299, warpins: 3 ---
	return 
	--- END OF BLOCK #53 ---



end
autoRat.checkAutoSpaceMove = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	local setting = self.settings.autoSpaceMove
	--- END OF BLOCK #0 ---

	slot2 = if setting.enable then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #1 6-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if self.lastExpUpdateTime <= 0 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-14, warpins: 1 ---
	self.lastExpUpdateTime = os.time()

	return 

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-23, warpins: 2 ---
	local curtime = os.time()

	--- END OF BLOCK #3 ---

	if curtime - self.lastExpUpdateTime < setting.space*60 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 24-25, warpins: 1 ---
	return false

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 26-35, warpins: 2 ---
	self.lastExpUpdateTime = os.time()

	self.useItem(self, setting.use)

	return true
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 36-36, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
autoRat.onExpUpdate = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	self.lastExpUpdateTime = os.time()

	return 
	--- END OF BLOCK #0 ---



end
autoRat.onActFail = function (self, x, y, dir)
	--- BLOCK #0 1-8, warpins: 1 ---
	self.cntActFail = self.cntActFail + 1
	--- END OF BLOCK #0 ---

	if autoRat.maxActFail < self.cntActFail then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 9-21, warpins: 1 ---
	local player = main_scene.ground.player
	local cnt, mon = self.getRegionRoleCnt(self, player, 1, "mon")

	--- END OF BLOCK #1 ---

	for k, v in pairs(mon)

	LOOP BLOCK #2
	GO OUT TO BLOCK #4


	--- BLOCK #2 22-27, warpins: 1 ---
	self.tempMarkObject(self, v, "tooStronger", 6)
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 28-29, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #4 30-39, warpins: 1 ---
	self.tempMarkObject(self, self.target, "tooStronger", 6)

	self.target = nil
	self.cntActFail = 0

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 40-40, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---



end
autoRat.onActGood = function (self, x, y, dir)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.cntActFail = 0

	return 
	--- END OF BLOCK #0 ---



end
autoRat.updateAttackRange = function (self, skipAmulet)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.isCloseAttack(self, skipAmulet)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-12, warpins: 1 ---
	self.setAttackRange(self, autoRat.closeAtkDis)
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 13-17, warpins: 1 ---
	self.setAttackRange(self, autoRat.rangeAtkDis)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 18-18, warpins: 2 ---
	return 
	--- END OF BLOCK #3 ---



end
autoRat.executeTest = function (self, dt)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not self.enableRat then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-11, warpins: 2 ---
	local player = main_scene.ground.player

	--- END OF BLOCK #2 ---

	if 0 < DEBUG then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #3 12-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot3 = if not tolua.isnull(main_scene.ui.panels.bigmap)

	 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #4 21-23, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot3 = if self.explorer then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #5 24-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot3 = if self.explorer.points then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #6 28-40, warpins: 1 ---
	slot4 = main_scene.ui.panels.bigmap
	slot3 = main_scene.ui.panels.bigmap.loadFlagPoints
	slot5 = "explore"
	slot6 = self.explorer.points

	--- END OF BLOCK #6 ---

	slot7 = if self.explorer.complete then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 41-49, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot7 = if not cc.c4b(0, 255, 255, 255)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 50-56, warpins: 2 ---
	slot7 = cc.c4b(0, 255, 0, 255)

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 57-57, warpins: 2 ---
	slot3(slot4, slot5, slot6, slot7)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 58-65, warpins: 5 ---
	--- END OF BLOCK #10 ---

	slot3 = if def.role.stateHas(player.state, "stPoisonStone")

	 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 66-66, warpins: 1 ---
	return 

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 67-72, warpins: 2 ---
	--- END OF BLOCK #12 ---

	slot3 = if tolua.isnull(main_scene)
	 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 73-76, warpins: 1 ---
	self.enable(self)

	return 

	--- END OF BLOCK #13 ---

	FLOW; TARGET BLOCK #14


	--- BLOCK #14 77-92, warpins: 2 ---
	self.controller = self.console.controller
	self.controller.move.enable = false

	self.updateAttackRange(self, false)
	--- END OF BLOCK #14 ---

	if g_data.player.job == 0 then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 93-97, warpins: 1 ---
	--- END OF BLOCK #15 ---

	slot3 = if not self.checkRoar(self)
	 then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #16 98-102, warpins: 2 ---
	--- END OF BLOCK #16 ---

	if g_data.player.job == 2 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #17 103-107, warpins: 1 ---
	--- END OF BLOCK #17 ---

	slot3 = if not self.checkPets(self)
	 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #18 108-112, warpins: 1 ---
	--- END OF BLOCK #18 ---

	slot3 = if not self.checkCureSelf(self)
	 then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #19 113-117, warpins: 1 ---
	--- END OF BLOCK #19 ---

	slot3 = if not self.checkCurePet(self)
	 then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #20 118-122, warpins: 1 ---
	--- END OF BLOCK #20 ---

	slot3 = if self.checkPoison(self)
	 then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 123-123, warpins: 1 ---
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #32


	--- BLOCK #22 124-128, warpins: 2 ---
	--- END OF BLOCK #22 ---

	slot3 = if self.checkTarget(self)
	 then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #31
	end


	--- BLOCK #23 129-137, warpins: 1 ---
	self.updateAttackRange(self, true)
	--- END OF BLOCK #23 ---

	slot3 = if self.closeToTarget(self)
	 then
	JUMP TO BLOCK #24
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #24 138-143, warpins: 1 ---
	--- END OF BLOCK #24 ---

	slot3 = if self.isMonster(self, self.target)
	 then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #29
	end


	--- BLOCK #25 144-154, warpins: 1 ---
	self.setTempData(self, self.target, "attacked", true)
	--- END OF BLOCK #25 ---

	slot3 = if self.isCloseAttack(self)
	 then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #26 155-158, warpins: 1 ---
	self.attack(self)
	--- END OF BLOCK #26 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #28


	--- BLOCK #27 159-161, warpins: 1 ---
	self.attackUseMagic(self)
	--- END OF BLOCK #27 ---

	FLOW; TARGET BLOCK #28


	--- BLOCK #28 162-165, warpins: 2 ---
	self.checkHit(self)
	--- END OF BLOCK #28 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #32


	--- BLOCK #29 166-170, warpins: 1 ---
	--- END OF BLOCK #29 ---

	slot3 = if self.pickUpItem(self)
	 then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #30 171-171, warpins: 1 ---
	--- END OF BLOCK #30 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #32


	--- BLOCK #31 172-174, warpins: 1 ---
	self.explore(self)
	--- END OF BLOCK #31 ---

	FLOW; TARGET BLOCK #32


	--- BLOCK #32 175-182, warpins: 10 ---
	self.checkAutoSpaceMove(self)
	--- END OF BLOCK #32 ---

	slot3 = if player.isLocked(player)

	 then
	JUMP TO BLOCK #33
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #33 183-185, warpins: 1 ---
	return true

	--- END OF BLOCK #33 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #34 186-190, warpins: 1 ---
	--- END OF BLOCK #34 ---

	slot3 = if not self.isCloseAttack(self)
	 then
	JUMP TO BLOCK #35
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #35 191-193, warpins: 1 ---
	self.checkAvoid(self)

	--- END OF BLOCK #35 ---

	FLOW; TARGET BLOCK #36


	--- BLOCK #36 194-194, warpins: 3 ---
	return 
	--- END OF BLOCK #36 ---



end

return autoRat
--- END OF BLOCK #0 ---



