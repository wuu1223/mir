--- BLOCK #0 1-42, warpins: 1 ---
local item = import("..common.item")
local bag = class("bag", function ()
	--- BLOCK #0 1-3, warpins: 1 ---
	return display.newNode()
	--- END OF BLOCK #0 ---



end)

table.merge(bag, {})

bag.resetPanelPosition = function (self, type)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if type == "left" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-14, warpins: 1 ---
	self.anchor(self, 0, 1):pos(0, display.height)
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #2 15-16, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if type == "right" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 17-31, warpins: 1 ---
	self.anchor(self, 1, 1):pos(display.width - 50, display.height - 50)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #4 32-33, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if type == "stall" then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 34-48, warpins: 1 ---
	self.anchor(self, 0, 0.5):pos(display.cx - 50, display.cy + 50)
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #6 49-50, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if type == "ybdeal" then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 51-64, warpins: 1 ---
	self.anchor(self, 0, 0.5):pos(display.cx + 65, display.cy)
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #8 65-66, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if type == "storage" then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 67-80, warpins: 1 ---
	self.anchor(self, 0, 1):pos(display.cx + 15, display.height - 50)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 81-83, warpins: 6 ---
	--- END OF BLOCK #10 ---

	slot2 = if self.setFocus then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 84-86, warpins: 1 ---
	self.setFocus(self)

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 87-87, warpins: 2 ---
	return self
	--- END OF BLOCK #12 ---



end
bag.ctor = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.client.lastScale.bag then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-7, warpins: 1 ---
	slot1 = 1
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-109, warpins: 2 ---
	self._scale = slot1
	self._supportMove = true

	self.setNodeEventEnabled(self, true)

	local bg = res.get2("pic/panels/bag/bg.png"):anchor(0, 0):addto(self)

	res.get2("pic/panels/bag/title.png"):addTo(bg):pos(bg.getw(bg)/2, bg.geth(bg) - 22):anchor(0.5, 0.5)
	self.size(self, cc.size(bg.getContentSize(bg).width, bg.getContentSize(bg).height)):scale(g_data.client.lastScale.bag):resetPanelPosition("left")
	display.newNode():size(self.getw(self) - 40, self.geth(self) - 110):pos(20, 60):add2(self):enableClick(function ()
		--- BLOCK #0 1-1, warpins: 1 ---
		return 
		--- END OF BLOCK #0 ---



	end)
	--- END OF BLOCK #2 ---

	slot2 = if main_scene.ui.panels.heroBag then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 110-117, warpins: 1 ---
	main_scene.ui.panels.heroBag:resetPanelPosition("right")
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 118-322, warpins: 2 ---
	an.newBtn(res.gettex2("pic/common/close10.png"), function ()
		--- BLOCK #0 1-9, warpins: 1 ---
		sound.playSound("103")
		self:hidePanel()

		return 
		--- END OF BLOCK #0 ---



	end, {
		pressImage = res.gettex2("pic/common/close11.png"),
		size = cc.size(64, 64)
	}):anchor(1, 1):pos(self.getw(self) - 12, self.geth(self) - 9):addto(self):setName("bag_close")
	an.newBtn(res.gettex2("pic/common/btn70.png"), function ()
		--- BLOCK #0 1-13, warpins: 1 ---
		sound.playSound("103")
		--- END OF BLOCK #0 ---

		slot0 = if g_data.client:checkLastTime("queryBag", 1)
		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 14-27, warpins: 1 ---
		g_data.client:setLastTime("queryBag", true)
		net.send({
			CM_QUERYBAGITEMS
		})
		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 28-33, warpins: 1 ---
		main_scene.ui:tip("你整理的太快了。")

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 34-34, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end, {
		pressImage = res.gettex2("pic/common/btn71.png"),
		sprite = res.gettex2("pic/panels/bag/sort.png")
	}):pos(310, 34):add2(self)

	self.scaleBtn = an.newBtn(res.gettex2("pic/common/scaleBig20.png"), function ()
		--- BLOCK #0 1-16, warpins: 1 ---
		sound.playSound("103")
		self:stopAllActions()

		local scale = self:getScale() + 0.1
		--- END OF BLOCK #0 ---

		if 1.6 < scale then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 17-17, warpins: 1 ---
		scale = 1
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 18-22, warpins: 2 ---
		--- END OF BLOCK #2 ---

		slot1 = if main_scene.ui.panels then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #3 23-28, warpins: 1 ---
		--- END OF BLOCK #3 ---

		slot1 = if main_scene.ui.panels.heroBag then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 29-64, warpins: 1 ---
		local posX = self:getPositionX() + (self:getCascadeBoundingBox().width/self._scale - 10)*scale

		main_scene.ui.panels.heroBag:anchor(0, 1)
		main_scene.ui.panels.heroBag:moveTo(0.3, posX, display.height - 16)

		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 65-95, warpins: 3 ---
		self._scale = scale

		self:scaleTo(0.3, scale)
		g_data.client:setLastScale("bag", scale)
		self.scaleBtn.label:setString("x" .. string.format("%01d", (scale - 1)*10 + 1))

		return 
		--- END OF BLOCK #5 ---



	end, {
		pressImage = res.gettex2("pic/common/scaleBig21.png"),
		label = {
			"x" .. string.format("%01d", (self.getScale(self) - 1)*10 + 1),
			20,
			1,
			{
				color = def.colors.btn40
			}
		},
		labelOffset = {
			x = 12,
			y = -16
		}
	}):pos(385, 32):add2(self)

	self.scaleBtn.label:pos(68, 30)
	res.get2("pic/panels/bag/gold_bg.png"):addTo(bg):pos(20, 36):anchor(0, 0.5)

	local gold = getRecord("TClientItem")

	gold.setIndex(1)
	item.new(gold, self, {
		isGold = true,
		tex = res.gettex2("pic/panels/bag/gold.png")
	}):addto(self):pos(45, 36)

	self.gold = an.newLabel(change2GoldStyle(g_data.player.gold), 20, 0, {
		color = cc.c3b(191, 165, 127)
	}):pos(81, 24):addto(self)
	self.items = {}

	self.reload(self)

	return 
	--- END OF BLOCK #4 ---



end
bag.onCleanup = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if main_scene.ui.panels.heroBag then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-14, warpins: 1 ---
	main_scene.ui.panels.heroBag:resetPanelPosition("left")

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
bag.reload = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 5-7, warpins: 1 ---
	v.removeSelf(v)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-9, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 10-17, warpins: 1 ---
	self.items = {}

	--- END OF BLOCK #3 ---

	for i=1, g_data.bag.max, 1
	LOOP BLOCK #4
	GO OUT TO BLOCK #7

	--- BLOCK #4 18-38, warpins: 2 ---
	res.get2("pic/common/grid.png"):addTo(self):pos(self.idx2pos(self, i))

	local v = g_data.bag.items[i]
	--- END OF BLOCK #4 ---

	slot5 = if v then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 39-73, warpins: 1 ---
	self.items[i] = item.new(v, self, {
		idx = i
	}):addto(self):pos(self.idx2pos(self, i))

	self.items[i].sprite:setName("bag_" .. v.getVar("name"))

	self.items[i].owner = "bag"

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 74-74, warpins: 2 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #7 75-75, warpins: 1 ---
	return 
	--- END OF BLOCK #7 ---



end
bag.uptGold = function (self, gold)
	--- BLOCK #0 1-10, warpins: 1 ---
	self.gold:setString(change2GoldStyle(g_data.player.gold))

	return 
	--- END OF BLOCK #0 ---



end
bag.idx2pos = function (self, idx)
	--- BLOCK #0 1-11, warpins: 1 ---
	idx = idx - 1
	local h = idx%8
	local v = math.modf(idx/8)

	return h*46.5 + 48, v*46.5 - 321
	--- END OF BLOCK #0 ---



end
bag.pos2idx = function (self, x, y)
	--- BLOCK #0 1-9, warpins: 1 ---
	local h = (x - 48)/46.5 + 0.5
	local v = (y - 321)/46.5 + 0.5

	--- END OF BLOCK #0 ---

	if 0 < h then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 10-12, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if h < 8 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #2 13-15, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if 0 < v then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #3 16-18, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v < 6 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 19-30, warpins: 1 ---
	return math.floor(v)*8 + math.floor(h) + 1
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 31-32, warpins: 5 ---
	return -1
	--- END OF BLOCK #5 ---



end
bag.getItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.data:get("makeIndex")
	 == tonumber(makeIndex)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-15, warpins: 1 ---
	return v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 16-17, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 18-18, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
bag.addItem = function (self, makeIndex)
	--- BLOCK #0 1-8, warpins: 1 ---
	local i, v = g_data.bag:getItem(makeIndex)

	--- END OF BLOCK #0 ---

	slot3 = if v then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 9-12, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot4 = if self.items[i] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 13-17, warpins: 1 ---
	self.items[i]:removeSelf()

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 18-52, warpins: 2 ---
	self.items[i] = item.new(v, self, {
		idx = i
	}):addto(self):pos(self.idx2pos(self, i))

	self.items[i].sprite:setName("bag_" .. v.getVar("name"))

	self.items[i].owner = "bag"

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 53-53, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
bag.delItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.data:get("makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-23, warpins: 1 ---
	self.items[k]:removeSelf()

	self.items[k] = nil

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 24-25, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 26-26, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
bag.uptItem = function (self, makeIndex)
	--- BLOCK #0 1-8, warpins: 1 ---
	local i, v = g_data.bag:getItem(makeIndex)
	--- END OF BLOCK #0 ---

	slot3 = if v then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 9-12, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot4 = if self.items[i] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 13-15, warpins: 1 ---
	self.items[i].data = v

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 16-16, warpins: 3 ---
	return 
	--- END OF BLOCK #3 ---



end
bag.putItem = function (self, item, x, y)
	--- BLOCK #0 1-4, warpins: 1 ---
	local form = item.formPanel.__cname

	--- END OF BLOCK #0 ---

	if form == "equip" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-8, warpins: 1 ---
	item.takeOff(item)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #2 9-10, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if form == "bag" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #3 11-23, warpins: 1 ---
	local putIdx = self.pos2idx(self, x/self.getScale(self), y/self.getScale(self))

	--- END OF BLOCK #3 ---

	if putIdx ~= -1 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 24-27, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if item.params.idx == putIdx then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 28-28, warpins: 2 ---
	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 29-39, warpins: 2 ---
	local srcIdx = item.params.idx

	--- END OF BLOCK #6 ---

	slot7 = if g_data.bag:isAallCanPileUp(srcIdx, putIdx)

	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 40-56, warpins: 1 ---
	local item1 = self.items[putIdx].data
	local makeIndex2 = self.items[srcIdx].data:get("makeIndex")

	--- END OF BLOCK #7 ---

	slot9 = if item1.isNeedResetPos(self.items[srcIdx].data)
	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 57-74, warpins: 1 ---
	self.items[putIdx]:pos(self.idx2pos(self, putIdx))
	self.items[srcIdx]:pos(self.idx2pos(self, srcIdx))
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 75-100, warpins: 2 ---
	net.send({
		CM_PILEUPITEM,
		series = 0,
		recog = item1.get(item1, "makeIndex"),
		param = Loword(makeIndex2),
		tag = Hiword(makeIndex2)
	})
	g_data.player:setIsinPileUping(true)

	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #13


	--- BLOCK #10 101-113, warpins: 1 ---
	item.params.idx = putIdx

	item.pos(item, self.idx2pos(self, putIdx))

	local target = self.items[putIdx]
	--- END OF BLOCK #10 ---

	slot7 = if target then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 114-122, warpins: 1 ---
	target.params.idx = srcIdx

	target.pos(target, self.idx2pos(self, srcIdx))

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 123-134, warpins: 2 ---
	self.items[putIdx] = item
	self.items[srcIdx] = target

	g_data.bag:changePos(srcIdx, putIdx)

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 135-137, warpins: 2 ---
	return true

	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #14 138-139, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if form == "npc" then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 140-144, warpins: 1 ---
	item.formPanel:delSellItem()
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #16 145-146, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if form == "deal" then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 147-151, warpins: 1 ---
	an.newMsgbox("交易的物品不可以取回，要取回物品请取消再重新交易！！！")
	--- END OF BLOCK #17 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #18 152-153, warpins: 1 ---
	--- END OF BLOCK #18 ---

	if form ~= "storage" then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 154-155, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if form == "heroBag" then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #20 156-161, warpins: 2 ---
	item.formPanel:getBackItem(item)
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #21 162-163, warpins: 1 ---
	--- END OF BLOCK #21 ---

	if form == "stall" then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #22 164-169, warpins: 1 ---
	item.formPanel:getBackItem(item)
	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #23 170-171, warpins: 1 ---
	--- END OF BLOCK #23 ---

	if form == "ybdeal" then
	JUMP TO BLOCK #24
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #24 172-177, warpins: 1 ---
	item.formPanel:getBackItem(item)
	--- END OF BLOCK #24 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #25 178-179, warpins: 1 ---
	--- END OF BLOCK #25 ---

	if form == "fusion" then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #27
	end


	--- BLOCK #26 180-185, warpins: 1 ---
	item.formPanel:getBackItem(item)
	--- END OF BLOCK #26 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #29


	--- BLOCK #27 186-187, warpins: 1 ---
	--- END OF BLOCK #27 ---

	if form == "strengthen" then
	JUMP TO BLOCK #28
	else
	JUMP TO BLOCK #29
	end


	--- BLOCK #28 188-192, warpins: 1 ---
	item.formPanel:getBackItem(item)

	--- END OF BLOCK #28 ---

	FLOW; TARGET BLOCK #29


	--- BLOCK #29 193-193, warpins: 10 ---
	return 
	--- END OF BLOCK #29 ---



end
bag.duraChange = function (self, makeindex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-11, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if makeindex == v.data:get("makeIndex")
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 12-15, warpins: 1 ---
	v.duraChange(v)

	return 
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 16-17, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 18-18, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
bag.setScaleMul = function (self, num)
	--- BLOCK #0 1-28, warpins: 1 ---
	local scale = (num - 1)*0.1 + 1
	self._scale = scale

	self.scale(self, scale)
	g_data.client:setLastScale("bag", scale)
	self.scaleBtn.label:setString("x" .. string.format("%01d", num))

	return 
	--- END OF BLOCK #0 ---



end

return bag
--- END OF BLOCK #0 ---



