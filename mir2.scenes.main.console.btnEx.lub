--- BLOCK #0 1-28, warpins: 1 ---
local h = 80
local btnEx = class("btnEx", function ()
	--- BLOCK #0 1-3, warpins: 1 ---
	return display.newNode()
	--- END OF BLOCK #0 ---



end)

table.merge(btnEx, {
	bg,
	content,
	btns
})

btnEx.hide = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.removeSelf(self)
	--- END OF BLOCK #0 ---

	slot1 = if main_scene then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-41, warpins: 1 ---
	main_scene:stopAllActions()
	main_scene:moveTo(0.2, 0, 0)
	main_scene.ground:stopAllActions()
	main_scene.ground:moveTo(0.2, 0, 0)
	--- END OF BLOCK #1 ---

	slot1 = if not tolua.isnull(main_scene.ground.helper.runner.guide.guideLayer)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 42-62, warpins: 1 ---
	main_scene.ground.helper.runner.guide.guideLayer:stopAllActions()
	main_scene.ground.helper.runner.guide.guideLayer:moveTo(0.2, 0, 0)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 63-63, warpins: 3 ---
	return 
	--- END OF BLOCK #3 ---



end
btnEx.ctor = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.setNodeEventEnabled(self, true)

	self.btns = {}

	--- END OF BLOCK #0 ---

	slot1 = if main_scene then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 10-46, warpins: 1 ---
	main_scene:stopAllActions()
	main_scene:moveTo(0.2, 0, h)
	main_scene.ground:stopAllActions()
	main_scene.ground:moveTo(0.2, 0, -h/2)
	--- END OF BLOCK #1 ---

	slot1 = if not tolua.isnull(main_scene.ground.helper.runner.guide.guideLayer)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 47-68, warpins: 1 ---
	main_scene.ground.helper.runner.guide.guideLayer:stopAllActions()
	main_scene.ground.helper.runner.guide.guideLayer:moveTo(0.2, 0, -h)
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 69-122, warpins: 3 ---
	self.size(self, display.width, display.height):add2(display.getRunningScene(), an.z.max)
	self.setTouchEnabled(self, true)
	self.addNodeEventListener(self, cc.NODE_TOUCH_EVENT, function (event)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if event.name == "began" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-7, warpins: 1 ---
		self:hide()

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 8-8, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end)

	self.bg = display.newScale9Sprite(res.getframe2("pic/console/boardscale.png")):anchor(0, 1):add2(self):size(display.width, h)

	self.loadMain(self)

	return 
	--- END OF BLOCK #3 ---



end
btnEx.onCleanup = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.btns.stall then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	self.btns.stall:stopTime()

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-10, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
btnEx.loadMain = function (self)
	--- BLOCK #0 1-28, warpins: 1 ---
	self.content = display.newNode():pos(0, -h):size(display.width, h):add2(self):enableClick(function ()
		--- BLOCK #0 1-1, warpins: 1 ---
		return 
		--- END OF BLOCK #0 ---



	end)
	local btns = {
		"equip",
		"bag",
		"skill",
		"group",
		"guild",
		"relation",
		"top",
		"deal",
		"stall",
		"mail",
		"setting",
		"shop",
		"link"
	}
	--- END OF BLOCK #0 ---

	slot2 = if VERSION_REVIEW then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 29-29, warpins: 1 ---
	btns = {
		"bag",
		"equip",
		"skill",
		"deal",
		"group",
		"guild",
		"relation",
		"top",
		"shop",
		"setting"
	}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 30-36, warpins: 2 ---
	local space = 80
	local allwidth = #btns*space
	--- END OF BLOCK #2 ---

	if allwidth < display.width then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 37-38, warpins: 1 ---
	slot4 = 1
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 39-41, warpins: 1 ---
	local scale = display.width/allwidth
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 42-48, warpins: 2 ---
	allwidth = allwidth*scale
	space = space*scale

	--- END OF BLOCK #5 ---

	for i, v in ipairs(btns)


	LOOP BLOCK #6
	GO OUT TO BLOCK #10


	--- BLOCK #6 49-99, warpins: 1 ---
	local btn = an.newBtn(res.gettex2("pic/console/iconbg11.png"), function ()
		--- BLOCK #0 1-18, warpins: 1 ---
		sound.playSound("103")
		main_scene.ui.console.btnCallbacks:handle("panel", v)
		self:hide()

		return 
		--- END OF BLOCK #0 ---



	end, {
		pressBig = true,
		sprite = res.gettex2("pic/console/panel-icons/" .. v .. ".png")
	}):pos(display.cx - allwidth/2 + (i - 0.5)*space, h/2):scale(scale):add2(self.content)
	self.btns[v] = btn

	btn.setName(btn, "btnEx_" .. v)
	--- END OF BLOCK #6 ---

	slot11 = if self[v .. "Extend"] then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 100-106, warpins: 1 ---
	self[v .. "Extend"](self, btn)
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 107-107, warpins: 2 ---
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 108-109, warpins: 2 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #10 110-116, warpins: 1 ---
	self.btns.stall:startTime()

	return 
	--- END OF BLOCK #10 ---



end
btnEx.stallExtend = function (self, target)
	--- BLOCK #0 1-7, warpins: 1 ---
	local function getTime(time)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if 43200 < time then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-9, warpins: 1 ---
		p2("other", "[Stall sys]: Stall time is out of 12 hours!")

		return ""

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 10-30, warpins: 2 ---
		local hour = math.floor(time/3600)
		local min = math.floor(time/60 - hour*60)
		local sec = time - hour*3600 - min*60

		return string.format("%02d:%02d:%02d", hour, min, sec)
		--- END OF BLOCK #2 ---



	end

	target.startTime = function (self)
		--- BLOCK #0 1-14, warpins: 1 ---
		target:stopTime()

		target.time = g_data.stall.time
		--- END OF BLOCK #0 ---

		if 0 < target.time then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 15-18, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot1 = if not target.label then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 19-52, warpins: 1 ---
		target.label = an.newLabel(getTime(target.time), 16, 1, {
			color = def.colors.labelGray
		}):addTo(target):pos(target:getw()/2, 45):anchor(0.5, 0.5)
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 53-59, warpins: 2 ---
		target._scheduler = scheduler.scheduleGlobal(function ()
			--- BLOCK #0 1-5, warpins: 1 ---
			--- END OF BLOCK #0 ---

			if 0 < target.time then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #2
			end


			--- BLOCK #1 6-20, warpins: 1 ---
			target.time = target.time - 1

			target.label:setString(getTime(target.time))
			--- END OF BLOCK #1 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #3


			--- BLOCK #2 21-34, warpins: 1 ---
			target.label:setString("")
			scheduler.unscheduleGlobal(target._scheduler)

			target._scheduler = nil

			--- END OF BLOCK #2 ---

			FLOW; TARGET BLOCK #3


			--- BLOCK #3 35-35, warpins: 2 ---
			return 
			--- END OF BLOCK #3 ---



		end, 1)

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 60-60, warpins: 2 ---
		return 
		--- END OF BLOCK #4 ---



	end
	target.stopTime = function (self)
		--- BLOCK #0 1-7, warpins: 1 ---
		target.time = 0

		--- END OF BLOCK #0 ---

		slot1 = if target._scheduler then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 8-15, warpins: 1 ---
		scheduler.unscheduleGlobal(target._scheduler)

		target._scheduler = nil

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 16-16, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end

	return 
	--- END OF BLOCK #0 ---



end

return btnEx
--- END OF BLOCK #0 ---



