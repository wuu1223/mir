--- BLOCK #0 1-63, warpins: 1 ---
function Byte(num)
	--- BLOCK #0 1-6, warpins: 1 ---
	return ycFunction:band(num, 255)
	--- END OF BLOCK #0 ---



end

function Word(num)
	--- BLOCK #0 1-6, warpins: 1 ---
	return ycFunction:band(num, 65535)
	--- END OF BLOCK #0 ---



end

function Hibyte(num)
	--- BLOCK #0 1-8, warpins: 1 ---
	return ycFunction:band(num, 65280)/256
	--- END OF BLOCK #0 ---



end

function Lobyte(num)
	--- BLOCK #0 1-6, warpins: 1 ---
	return ycFunction:band(num, 255)
	--- END OF BLOCK #0 ---



end

function Hiword(num)
	--- BLOCK #0 1-8, warpins: 1 ---
	return ycFunction:band(num, 4294901760.0)/65536
	--- END OF BLOCK #0 ---



end

function Loword(num)
	--- BLOCK #0 1-6, warpins: 1 ---
	return ycFunction:band(num, 65535)
	--- END OF BLOCK #0 ---



end

function MakeLong(a, b)
	--- BLOCK #0 1-19, warpins: 1 ---
	b = Word(b)
	a = Word(a)

	return ycFunction:bor(a, ycFunction:lshift(b, 16))
	--- END OF BLOCK #0 ---



end

function MakeWord(a, b)
	--- BLOCK #0 1-19, warpins: 1 ---
	b = Byte(b)
	a = Byte(a)

	return ycFunction:bor(a, ycFunction:lshift(b, 8))
	--- END OF BLOCK #0 ---



end

function getJobStr(job)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if job == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-5, warpins: 1 ---
	return "战士"
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #2 6-7, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if job == 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 8-10, warpins: 1 ---
	return "法师"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #4 11-12, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if job == 2 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 13-14, warpins: 1 ---
	return "道士"
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 15-16, warpins: 4 ---
	return "刺客"
	--- END OF BLOCK #6 ---



end

function getSexStr(sex)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if sex == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-4, warpins: 1 ---
	return "男"
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-6, warpins: 2 ---
	return "女"
	--- END OF BLOCK #2 ---



end

function getMapStateStr(state)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if state == cAreaStateFight then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-6, warpins: 1 ---
	return "[战斗]"
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #2 7-9, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if state == cAreaStateSafe then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 10-12, warpins: 1 ---
	return "[安全]"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #4 13-15, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if state == cAreaStateGuildWar then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 16-18, warpins: 1 ---
	return "[攻城]"
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #6 19-21, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if state == cAreaStateDareWar then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 22-24, warpins: 1 ---
	return "[挑战]"
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #8 25-27, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if state == cAreaStateReliveable then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 28-29, warpins: 1 ---
	return "[可复活]"
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 30-31, warpins: 6 ---
	return ""
	--- END OF BLOCK #10 ---



end

function getTakeOnPosition(smode)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if smode ~= 5 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-4, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if smode == 6 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 5-7, warpins: 2 ---
	return U_WEAPON
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #3 8-9, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if smode ~= 10 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 10-11, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if smode == 11 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 12-14, warpins: 2 ---
	return U_DRESS
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #6 15-16, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if smode == 30 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 17-19, warpins: 1 ---
	return U_RIGHTHAND
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #8 20-21, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if smode ~= 19 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #9 22-23, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if smode ~= 20 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 24-25, warpins: 1 ---
	--- END OF BLOCK #10 ---

	if smode == 21 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 26-28, warpins: 3 ---
	return U_NECKLACE
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #12 29-30, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if smode == 15 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 31-33, warpins: 1 ---
	return U_HELMET
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #14 34-35, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if smode == 16 then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 36-38, warpins: 1 ---
	return U_MASK
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #16 39-40, warpins: 1 ---
	--- END OF BLOCK #16 ---

	if smode ~= 24 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 41-42, warpins: 1 ---
	--- END OF BLOCK #17 ---

	if smode == 26 then
	JUMP TO BLOCK #18
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #18 43-45, warpins: 2 ---
	return U_ARMRINGR
	--- END OF BLOCK #18 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #19 46-47, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if smode ~= 22 then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #20 48-49, warpins: 1 ---
	--- END OF BLOCK #20 ---

	if smode == 23 then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 50-52, warpins: 2 ---
	return U_RINGL
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #22 53-54, warpins: 1 ---
	--- END OF BLOCK #22 ---

	if smode == 25 then
	JUMP TO BLOCK #23
	else
	JUMP TO BLOCK #24
	end


	--- BLOCK #23 55-57, warpins: 1 ---
	return U_BUJUK
	--- END OF BLOCK #23 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #24 58-59, warpins: 1 ---
	--- END OF BLOCK #24 ---

	if smode == 27 then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #25 60-62, warpins: 1 ---
	return U_BELT
	--- END OF BLOCK #25 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #26 63-64, warpins: 1 ---
	--- END OF BLOCK #26 ---

	if smode == 28 then
	JUMP TO BLOCK #27
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #27 65-67, warpins: 1 ---
	return U_BOOTS
	--- END OF BLOCK #27 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #28 68-69, warpins: 1 ---
	--- END OF BLOCK #28 ---

	if smode == 7 then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #30
	end


	--- BLOCK #29 70-72, warpins: 1 ---
	return U_CHARM
	--- END OF BLOCK #29 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #30 73-74, warpins: 1 ---
	--- END OF BLOCK #30 ---

	if smode == 29 then
	JUMP TO BLOCK #31
	else
	JUMP TO BLOCK #32
	end


	--- BLOCK #31 75-77, warpins: 1 ---
	return U_YuPei
	--- END OF BLOCK #31 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #32 78-79, warpins: 1 ---
	--- END OF BLOCK #32 ---

	if smode == 34 then
	JUMP TO BLOCK #33
	else
	JUMP TO BLOCK #34
	end


	--- BLOCK #33 80-82, warpins: 1 ---
	return U_Horse
	--- END OF BLOCK #33 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #36


	--- BLOCK #34 83-84, warpins: 1 ---
	--- END OF BLOCK #34 ---

	if smode == 75 then
	JUMP TO BLOCK #35
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #35 85-86, warpins: 1 ---
	return U_XueYu
	--- END OF BLOCK #35 ---

	FLOW; TARGET BLOCK #36


	--- BLOCK #36 87-87, warpins: 16 ---
	return 
	--- END OF BLOCK #36 ---



end

function newList()
	--- BLOCK #0 1-20, warpins: 1 ---
	local first, last, list = nil
	local listManager = {}
	listManager.pushFront = function (value)
		--- BLOCK #0 1-7, warpins: 1 ---
		first = first - 1
		list[first] = value

		return 
		--- END OF BLOCK #0 ---



	end
	listManager.pushBack = function (value)
		--- BLOCK #0 1-7, warpins: 1 ---
		last = last + 1
		list[last] = value

		return 
		--- END OF BLOCK #0 ---



	end
	listManager.popFront = function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if first <= last then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-15, warpins: 1 ---
		local value = list[first]
		list[first] = nil
		first = first + 1

		return value
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 16-16, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end
	listManager.popBack = function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if first <= last then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-15, warpins: 1 ---
		local value = list[last]
		list[last] = nil
		last = last - 1

		return value
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 16-16, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end
	listManager.clear = function ()
		--- BLOCK #0 1-7, warpins: 1 ---
		list = {}
		last = 0
		first = 1

		return 
		--- END OF BLOCK #0 ---



	end
	listManager.isEmpty = function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if last < first then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-7, warpins: 1 ---
		last = 0
		first = 1
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 8-11, warpins: 2 ---
		--- END OF BLOCK #2 ---

		if last >= first then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 12-13, warpins: 1 ---
		slot0 = false
		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #5


		--- BLOCK #4 14-14, warpins: 1 ---
		slot0 = true

		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 15-15, warpins: 2 ---
		return slot0
		--- END OF BLOCK #5 ---



	end
	listManager.size = function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if last < first then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-6, warpins: 1 ---
		return 0
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 7-11, warpins: 2 ---
		return last - first + 1
		--- END OF BLOCK #2 ---



	end

	listManager.clear()

	return listManager
	--- END OF BLOCK #0 ---



end

function testNetList()
	--- BLOCK #0 1-6, warpins: 1 ---
	local lst = newList()

	--- END OF BLOCK #0 ---

	for k=1, 100, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 7-10, warpins: 2 ---
	lst.pushBack(k)
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 11-14, warpins: 4 ---
	--- END OF BLOCK #2 ---

	slot1 = if not lst.isEmpty()

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #3 15-15, warpins: 1 ---
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 16-24, warpins: 1 ---
	local k = lst.popFront()

	print("testNetList", k)
	--- END OF BLOCK #4 ---

	if k < 50 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #5 25-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if 40 < k then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #6 28-31, warpins: 1 ---
	lst.pushBack(k + 23487)
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #7 32-35, warpins: 1 ---
	--- END OF BLOCK #7 ---

	for k=1, 100, 1
	LOOP BLOCK #8
	GO OUT TO BLOCK #9

	--- BLOCK #8 36-39, warpins: 2 ---
	lst.pushBack(k)
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #9 40-43, warpins: 2 ---
	--- END OF BLOCK #9 ---

	slot1 = if not lst.isEmpty()
	 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #10 44-44, warpins: 1 ---
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 45-50, warpins: 1 ---
	print("testNetList", lst.popFront())
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #12 51-56, warpins: 1 ---
	print("testNetList", lst.popFront())

	return 
	--- END OF BLOCK #12 ---



end

function printscreen(node, args)
	--- BLOCK #0 1-4, warpins: 1 ---
	local sp = true
	local file, filters, filterParams = nil
	--- END OF BLOCK #0 ---

	slot1 = if args then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if args.sprite ~= nil then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-8, warpins: 1 ---
	sp = args.sprite
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 9-11, warpins: 2 ---
	file = args.file
	filters = args.filters
	filterParams = args.filterParams
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 12-32, warpins: 2 ---
	local size = node.getContentSize(node)
	local canvas = cc.RenderTexture:create(size.width, size.height)

	canvas.begin(canvas)
	node.visit(node)
	canvas.endToLua(canvas)

	--- END OF BLOCK #4 ---

	slot2 = if sp then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 33-40, warpins: 1 ---
	local texture = canvas.getSprite(canvas):getTexture()
	--- END OF BLOCK #5 ---

	slot4 = if filters then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 41-48, warpins: 1 ---
	sp = display.newFilteredSprite(texture, filters, filterParams)
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 49-53, warpins: 1 ---
	sp = display.newSprite(texture)

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 54-57, warpins: 2 ---
	sp.flipY(sp, true)
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 58-59, warpins: 2 ---
	--- END OF BLOCK #9 ---

	slot3 = if file then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 60-63, warpins: 1 ---
	canvas.saveToFile(canvas, file)

	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 64-66, warpins: 2 ---
	return sp, file
	--- END OF BLOCK #11 ---



end

function TDateTimeToUnixDate(time)
	--- BLOCK #0 1-6, warpins: 1 ---
	local startTm = 25569.33333333

	return math.floor((time - startTm)*86400)
	--- END OF BLOCK #0 ---



end

function makeMinimap(mapid, path, w)
	--- BLOCK #0 1-6, warpins: 1 ---
	local file = res.loadmap(mapid)

	--- END OF BLOCK #0 ---

	slot3 = if file then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-11, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if file.getw(file)
	 ~= 0 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 12-16, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if file.geth(file)

	 == 0 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 17-17, warpins: 3 ---
	return 

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 18-31, warpins: 2 ---
	local def = require("mir2.scenes.main.map.def")
	local maptile = require("mir2.scenes.main.map.maptile")
	local mapw = file.getw(file)
	local maph = file.geth(file)
	--- END OF BLOCK #4 ---

	slot2 = if not w then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 32-48, warpins: 1 ---
	w = math.max(math.min((mapw*def.tile.w)/8, math.max(2048, mapw)), 256)
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 49-84, warpins: 2 ---
	local mapNode = display.newNode():scale(w/(mapw*def.tile.w))
	local bgLayer = display.newNode():addto(mapNode)
	local midLayer = display.newNode():addto(mapNode)
	local objLayer = display.newNode():addto(mapNode)
	local maxh = 0
	--- END OF BLOCK #6 ---

	for i=1, mapw, 1
	LOOP BLOCK #7
	GO OUT TO BLOCK #12

	--- BLOCK #7 85-88, warpins: 2 ---
	--- END OF BLOCK #7 ---

	for j=1, maph, 1
	LOOP BLOCK #8
	GO OUT TO BLOCK #11

	--- BLOCK #8 89-95, warpins: 2 ---
	local data = file.gettile(file, i, j)
	--- END OF BLOCK #8 ---

	slot21 = if data then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 96-106, warpins: 1 ---
	maxh = maptile.addTile(data, i, j, bgLayer, midLayer, objLayer, maph, maxh)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 107-107, warpins: 2 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #11 108-108, warpins: 1 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #12 109-152, warpins: 1 ---
	maxh = maxh*mapNode.getScale(mapNode)
	local node = display.newNode():size(w, maxh):add(mapNode, 1)

	display.newColorLayer(cc.c4b(0, 0, 0, 255)):size(node.getContentSize(node)):add2(node)
	printscreen(node, {
		file = path
	})

	return true
	--- END OF BLOCK #12 ---



end

function trim0str(str)
	--- BLOCK #0 1-7, warpins: 1 ---
	local ret = ""

	--- END OF BLOCK #0 ---

	for s in string.gmatch(str, "[^%z]")


	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 8-10, warpins: 1 ---
	ret = ret .. s

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 11-12, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 13-13, warpins: 1 ---
	return ret
	--- END OF BLOCK #3 ---



end

function traversalNodeTree(n, cb)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if tolua.isnull(n)

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-8, warpins: 1 ---
	return true

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-13, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot2 = if not cb(n)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 14-15, warpins: 1 ---
	return false

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 16-21, warpins: 2 ---
	--- END OF BLOCK #4 ---

	for k, v in ipairs(n.getChildren(n))

	LOOP BLOCK #5
	GO OUT TO BLOCK #8


	--- BLOCK #5 22-27, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot7 = if not traversalNodeTree(v, cb)

	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 28-29, warpins: 1 ---
	return false
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 30-31, warpins: 3 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #8 32-33, warpins: 1 ---
	return true
	--- END OF BLOCK #8 ---



end

function setGlobalZOrderCascade(n, zorder)
	--- BLOCK #0 1-6, warpins: 1 ---
	traversalNodeTree(n, function (n)
		--- BLOCK #0 1-5, warpins: 1 ---
		n.setGlobalZOrder(n, zorder)

		return 
		--- END OF BLOCK #0 ---



	end)

	return 
	--- END OF BLOCK #0 ---



end

function isChildOf(testNode, parent)
	--- BLOCK #0 1-7, warpins: 1 ---
	local ok = false

	traversalNodeTree(parent, function (n)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if n == testNode then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-5, warpins: 1 ---
		ok = true

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 6-7, warpins: 1 ---
		return true
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 8-8, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end)

	return ok
	--- END OF BLOCK #0 ---



end

function parseJson(jsonFile)
	--- BLOCK #0 1-6, warpins: 1 ---
	local config_json = res.getfile(jsonFile)

	--- END OF BLOCK #0 ---

	if config_json == "" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-14, warpins: 1 ---
	assert(false, "can't find file " .. jsonFile)

	return nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-17, warpins: 2 ---
	slot2 = assert
	--- END OF BLOCK #2 ---

	if jsonFile == config_json then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 18-19, warpins: 1 ---
	slot3 = false
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 20-20, warpins: 1 ---
	slot3 = true

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 21-29, warpins: 2 ---
	slot2(slot3, "WTF???")

	local jsonParse = require("cjson")
	local config = jsonParse.decode(config_json)

	return config
	--- END OF BLOCK #5 ---



end

function playAni(parent, pattern, frame, delay, blend, isProg)
	--- BLOCK #0 1-5, warpins: 1 ---
	local texs = {}
	--- END OF BLOCK #0 ---

	for i=1, frame, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #4

	--- BLOCK #1 6-25, warpins: 2 ---
	local tex = cc.Director:getInstance():getTextureCache():addImage(string.format(pattern .. "0_%05d.png", i - 1))
	--- END OF BLOCK #1 ---

	slot11 = if tex then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 26-28, warpins: 1 ---
	texs[#texs + 1] = tex
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 29-29, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 30-52, warpins: 1 ---
	local texIdx = 1
	local sprite = display.newSprite(texs[texIdx]):addTo(parent)

	local function uptBlendFunc()
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if blend then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-11, warpins: 1 ---
		sprite:setBlendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR)

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 12-12, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end

	uptBlendFunc()
	sprite.addNodeEventListener(sprite, cc.NODE_ENTER_FRAME_EVENT, function (dt)
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot1 = if sprite.lasttime then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #8
		end


		--- BLOCK #1 5-13, warpins: 1 ---
		local nowtime = socket.gettime()
		slot2 = nowtime - sprite.lasttime
		--- END OF BLOCK #1 ---

		slot3 = if not delay then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 14-14, warpins: 1 ---
		slot3 = 0.3
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 15-16, warpins: 2 ---
		--- END OF BLOCK #3 ---

		if slot3 <= slot2 then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #4 17-25, warpins: 1 ---
		sprite.lasttime = nowtime
		texIdx = texIdx + 1
		--- END OF BLOCK #4 ---

		if frame < texIdx then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #6
		end


		--- BLOCK #5 26-27, warpins: 1 ---
		slot2 = 1
		--- END OF BLOCK #5 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #7


		--- BLOCK #6 28-28, warpins: 1 ---
		slot2 = texIdx
		--- END OF BLOCK #6 ---

		FLOW; TARGET BLOCK #7


		--- BLOCK #7 29-39, warpins: 2 ---
		texIdx = slot2

		sprite:setTexture(texs[texIdx])
		uptBlendFunc()

		--- END OF BLOCK #7 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #9


		--- BLOCK #8 40-44, warpins: 1 ---
		sprite.lasttime = socket.gettime()

		--- END OF BLOCK #8 ---

		FLOW; TARGET BLOCK #9


		--- BLOCK #9 45-45, warpins: 3 ---
		return 
		--- END OF BLOCK #9 ---



	end)
	sprite.scheduleUpdate(sprite)

	return sprite
	--- END OF BLOCK #4 ---



end

valueScopeTimer = class("valueScopeTimer")
valueScopeTimer.ctor = function (self, from, to, cb, duration)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.from = from
	self.to = to
	self.cb = cb
	self.duration = duration
	self.consume = 0
	self.isRunning = nil

	return 
	--- END OF BLOCK #0 ---



end
valueScopeTimer.start = function (self, host)
	--- BLOCK #0 1-7, warpins: 1 ---
	self.host = host
	local listener = handler(self, self.update)
	--- END OF BLOCK #0 ---

	slot1 = if host then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-14, warpins: 1 ---
	self.handler = host.schedule(host, listener, 0)
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 15-19, warpins: 1 ---
	self.handler = scheduler.scheduleUpdateGlobal(listener)
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 20-24, warpins: 2 ---
	self.isRunning = true
	self.consume = 0

	return 
	--- END OF BLOCK #3 ---



end
valueScopeTimer.stop = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.isRunning then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 4-6, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if self.host then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 7-12, warpins: 1 ---
	self.host:stopAction(self.handler)
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 13-16, warpins: 1 ---
	scheduler.unscheduleGlobal(self.handler)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 17-18, warpins: 2 ---
	self.isRunning = false

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 19-19, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---



end
valueScopeTimer.update = function (self, dt)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if type(dt)

	 ~= "number" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-14, warpins: 1 ---
	dt = cc.Director:getInstance():getDeltaTime()
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-23, warpins: 2 ---
	self.consume = self.consume + dt
	local per = self.consume/self.duration
	--- END OF BLOCK #2 ---

	if 1 <= per then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 24-27, warpins: 1 ---
	per = 1

	self.stop(self)
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 28-36, warpins: 2 ---
	self.cb(self.from + per*(self.to - self.from))

	return 
	--- END OF BLOCK #4 ---



end

return 
--- END OF BLOCK #0 ---



