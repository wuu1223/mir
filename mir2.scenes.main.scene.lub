--- BLOCK #0 1-50, warpins: 1 ---
local current = ...
local ui = import(".ui")
local ground = import(".ground")
local common = import(".common.common")
local operate = import(".pc.operate")
local baseScene = import("..baseScene", current)
local scene = class("main", baseScene)

table.merge(scene, {})

scene.ctor = function (self)
	--- BLOCK #0 1-65, warpins: 1 ---
	main_scene = self
	self.ground = ground.new():addto(self)
	self.ui = ui.new():addto(self):hide()

	pic.setListenner(import(".common.picListenner", current))
	voice.setListenner(import(".common.voiceListenner", current))
	net.add(self)
	net.add(self.ui)
	net.add(self.ground)
	net.send({
		CM_LOGINNOTICEOK
	}, nil, getRecord("TOsVersion3"))
	net.setWaitMsg(SM_NEWMAP, SM_MAPINFO_EX)
	--- END OF BLOCK #0 ---

	if device.platform == "android" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 66-75, warpins: 1 ---
	self.setKeypadEnabled(self, true)
	self.addNodeEventListener(self, cc.KEYPAD_EVENT, function (event)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if event.key == "back" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-9, warpins: 1 ---
		an.newMsgbox("确定要退出游戏吗?", function (idx)
			--- BLOCK #0 1-2, warpins: 1 ---
			--- END OF BLOCK #0 ---

			if idx == 1 then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #2
			end


			--- BLOCK #1 3-12, warpins: 1 ---
			net.send({
				CM_SOFTCLOSE
			})
			os.exit(1)

			--- END OF BLOCK #1 ---

			FLOW; TARGET BLOCK #2


			--- BLOCK #2 13-13, warpins: 2 ---
			return 
			--- END OF BLOCK #2 ---



		end, {
			center = true,
			hasCancel = true
		})

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 10-10, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end)
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 76-88, warpins: 2 ---
	self.addNodeEventListener(self, cc.NODE_ENTER_FRAME_EVENT, function (...)
		--- BLOCK #0 1-13, warpins: 1 ---
		self.ground:update(...)
		self.ui:update(...)

		return 
		--- END OF BLOCK #0 ---



	end)
	self.scheduleUpdate(self)
	--- END OF BLOCK #2 ---

	if 0 < DEBUG then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 89-98, warpins: 1 ---
	net.sendPing()
	g_data.client:setLastTime("ping", true)
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 99-101, warpins: 2 ---
	--- END OF BLOCK #4 ---

	slot1 = if WIN32_OPERATE then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 102-107, warpins: 1 ---
	operate.init()
	self.initHotKey(self)

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 108-109, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
scene.onEnter = function (self)
	--- BLOCK #0 1-13, warpins: 1 ---
	print("main.scene:onEnter")
	self.super.onEnter(self)
	g_data.shop:init()

	return 
	--- END OF BLOCK #0 ---



end
scene.onExit = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	print("main.scene:onExit")
	self.super.onExit(self)

	return 
	--- END OF BLOCK #0 ---



end
scene.smallExit = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.smallExitState = true

	net.send({
		CM_SOFTCLOSE
	})

	return 
	--- END OF BLOCK #0 ---



end
scene.bigExit = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	self.clearGameData(self)
	common.gotoLogin({
		logout = true
	})

	return 
	--- END OF BLOCK #0 ---



end
scene.clearGameData = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if IS_PLAYER_DEBUG then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-15, warpins: 1 ---
	package.loaded["mir2.scenes.main.scene"] = nil
	package.loaded["mir2.scenes.main.ground"] = nil
	package.loaded["mir2.scenes.main.ui"] = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-19, warpins: 2 ---
	local function createProgress()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if self.reprogress then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-17, warpins: 1 ---
		self.reprogress:stopAllActions()
		self.reprogress:removeSelf()

		self.reprogress = nil
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 18-80, warpins: 2 ---
		self.reprogress = an.newProgress(res.gettex2("pic/console/bottom/pro2.png"), res.gettex2("pic/console/bottom/probg.png"), {
			x = 43,
			y = 4
		}):anchor(0.5, 0):pos(display.width*0.5, 0):add2(self, 1)

		self.reprogress:setp(0)

		local prodata = 0

		self.reprogress:runForever(transition.sequence({
			cc.DelayTime:create(0.1),
			cc.CallFunc:create(function ()
				--- BLOCK #0 1-11, warpins: 1 ---
				prodata = prodata + 0.02
				slot1 = self.reprogress
				slot0 = self.reprogress.setp
				--- END OF BLOCK #0 ---

				if 1 < prodata then
				JUMP TO BLOCK #1
				else
				JUMP TO BLOCK #2
				end


				--- BLOCK #1 12-13, warpins: 1 ---
				slot2 = 1
				--- END OF BLOCK #1 ---

				UNCONDITIONAL JUMP; TARGET BLOCK #3


				--- BLOCK #2 14-14, warpins: 1 ---
				slot2 = prodata

				--- END OF BLOCK #2 ---

				FLOW; TARGET BLOCK #3


				--- BLOCK #3 15-19, warpins: 2 ---
				slot0(slot1, slot2)
				--- END OF BLOCK #3 ---

				if 1 < prodata then
				JUMP TO BLOCK #4
				else
				JUMP TO BLOCK #7
				end


				--- BLOCK #4 20-23, warpins: 1 ---
				--- END OF BLOCK #4 ---

				if prodata < 1.1 then
				JUMP TO BLOCK #5
				else
				JUMP TO BLOCK #7
				end


				--- BLOCK #5 24-27, warpins: 1 ---
				--- END OF BLOCK #5 ---

				slot0 = if self.reprogress then
				JUMP TO BLOCK #6
				else
				JUMP TO BLOCK #7
				end


				--- BLOCK #6 28-40, warpins: 1 ---
				self.reprogress:stopAllActions()
				self.reprogress:removeSelf()

				self.reprogress = nil

				--- END OF BLOCK #6 ---

				FLOW; TARGET BLOCK #7


				--- BLOCK #7 41-41, warpins: 4 ---
				return 
				--- END OF BLOCK #7 ---



			end)
		}))

		return 
		--- END OF BLOCK #2 ---



	end

	--- END OF BLOCK #2 ---

	slot2 = if not main_scene then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 20-23, warpins: 1 ---
	createProgress()

	return 

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-46, warpins: 2 ---
	self.ui.console.controller.autoFindPath:multiMapPathStop()
	self.removeAllNodeEventListeners(self)
	self.ui:removeSelf()
	self.ground:removeSelf()
	--- END OF BLOCK #4 ---

	slot2 = if g_data.login.reconnectState then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 47-80, warpins: 1 ---
	self.add(self, an.newLabel("正在重连中..", 20, 1, {
		color = cc.c3b(255, 255, 0),
		sc = display.COLOR_BLACK
	}):anchor(0.5, 0):pos(display.cx, 30))
	createProgress()
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #6 81-111, warpins: 1 ---
	self.add(self, an.newLabel("正在退出..", 20, 1, {
		color = cc.c3b(255, 255, 0),
		sc = display.COLOR_BLACK
	}):anchor(0.5, 0):pos(display.cx, 30))

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 112-136, warpins: 2 ---
	main_scene = nil

	net.clearMsgs()
	g_data.cleanup()
	g_data.reset()
	audio.stopAllSounds()
	res.purgeCachedData()
	pic.removeListenner()
	voice.removeListenner()

	return 
	--- END OF BLOCK #7 ---



end
scene.phone_listenner = function (self, state, number)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if state == 1 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #1
	end


	--- BLOCK #1 3-3, warpins: 2 ---
	return 
	--- END OF BLOCK #1 ---



end
scene.reconectFuc = function (self, info)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not tolua.isnull(self.reconnectBox)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-12, warpins: 1 ---
	self.reconnectBox:removeSelf()

	self.reconnectBox = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 13-15, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot2 = if not self.reconnectBox then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 16-24, warpins: 1 ---
	self.reconnectBox = an.newMsgbox(info .. "\n确定重连?", function (idx)
		--- BLOCK #0 1-5, warpins: 1 ---
		print(idx)
		--- END OF BLOCK #0 ---

		if idx == 0 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 6-10, warpins: 1 ---
		self:bigExit()

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #2 11-12, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if idx == 1 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 13-24, warpins: 1 ---
		self.reconnect = true
		g_data.login.reconnectState = true

		scheduler.performWithDelayGlobal(function ()
			--- BLOCK #0 1-14, warpins: 1 ---
			net.connect(g_data.login.recIP, g_data.login.recPort, self, g_data.login.recSession)

			return 
			--- END OF BLOCK #0 ---



		end, 0)

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 25-28, warpins: 3 ---
		self.reconnectBox = nil

		return 
		--- END OF BLOCK #4 ---



	end, {
		center = true,
		hasCancel = true
	})

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 25-26, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
scene.socketEvent = function (self, data, status)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if status == 3 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 3-7, warpins: 1 ---
	slot4 = self
	slot3 = self.reconectFuc
	--- END OF BLOCK #1 ---

	slot5 = if self.reconnect then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-9, warpins: 1 ---
	slot5 = "连接超时中断，重连失败"
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 10-10, warpins: 1 ---
	slot5 = "与服务器断开连接"

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 11-12, warpins: 2 ---
	slot3(slot4, slot5)
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #5 13-14, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if status == 2 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 15-18, warpins: 1 ---
	self.reconectFuc(self, "连接服务器失败，请检查网络并稍后再试")

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 19-19, warpins: 3 ---
	return 
	--- END OF BLOCK #7 ---



end
scene.onLoseConnect = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	print("scene:onLoseConnect")
	--- END OF BLOCK #0 ---

	slot1 = if not tolua.isnull(self.reconnectBox)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-15, warpins: 1 ---
	self.reconnectBox:removeSelf()

	self.reconnectBox = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-21, warpins: 2 ---
	self.reconnectBox = self.reconectFuc(self, "网络连接已断开!")

	return 
	--- END OF BLOCK #2 ---



end
--- END OF BLOCK #0 ---

if device.platform == "android" then
JUMP TO BLOCK #1
else
JUMP TO BLOCK #2
end


--- BLOCK #1 51-53, warpins: 1 ---
scene.onNetworkStateChange = function (self, currentState)
	--- BLOCK #0 1-10, warpins: 1 ---
	print("android,scene:onNetworkStateChange", currentState)
	--- END OF BLOCK #0 ---

	slot2 = if not tolua.isnull(self.reconnectBox)
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 11-16, warpins: 1 ---
	self.reconnectBox:removeSelf()

	self.reconnectBox = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 17-23, warpins: 2 ---
	slot3 = self
	slot2 = self.reconectFuc
	slot4 = "切换到 "
	--- END OF BLOCK #2 ---

	if currentState == cc.kCCNetworkStatusReachableViaWiFi then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 24-25, warpins: 1 ---
	slot5 = "WIFI网络"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 26-26, warpins: 1 ---
	slot5 = "其它网络"

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 27-29, warpins: 2 ---
	slot2(slot3, slot4 .. slot5)

	return 
	--- END OF BLOCK #5 ---



end
--- END OF BLOCK #1 ---

UNCONDITIONAL JUMP; TARGET BLOCK #3


--- BLOCK #2 54-55, warpins: 1 ---
scene.onNetworkStateChange = function (self, currentState)
	--- BLOCK #0 1-10, warpins: 1 ---
	print("ios,scene:onNetworkStateChange", currentState)
	--- END OF BLOCK #0 ---

	slot2 = if network.isHostNameReachable("www.baidu.com")
	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #1 11-16, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot2 = if not tolua.isnull(self.reconnectBox)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 17-29, warpins: 1 ---
	self.reconnectBox:removeSelf()

	self.reconnectBox = nil
	slot3 = self
	slot2 = self.reconectFuc
	slot4 = "切换到 "
	--- END OF BLOCK #2 ---

	if currentState == cc.kCCNetworkStatusReachableViaWiFi then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 30-31, warpins: 1 ---
	slot5 = "WIFI网络"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 32-32, warpins: 1 ---
	slot5 = "其它网络"

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 33-34, warpins: 2 ---
	slot2(slot3, slot4 .. slot5)
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 35-38, warpins: 2 ---
	--- END OF BLOCK #6 ---

	if currentState == cc.kCCNetworkStatusReachableViaWiFi then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 39-41, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot2 = if self.ui then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #8 42-47, warpins: 1 ---
	self.ui:tip("切换到WIFI网络")
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #9 48-50, warpins: 1 ---
	--- END OF BLOCK #9 ---

	slot2 = if self.ui then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #10 51-56, warpins: 1 ---
	self.ui:tip("切换到蜂窝网络")
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #11 57-60, warpins: 1 ---
	self.reconectFuc(self, "网络连接已断开")

	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 61-61, warpins: 5 ---
	return 
	--- END OF BLOCK #12 ---



end
--- END OF BLOCK #2 ---

FLOW; TARGET BLOCK #3


--- BLOCK #3 56-63, warpins: 2 ---
scene.enterSelectScene = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if msg.recog == 1 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 4-25, warpins: 1 ---
	net.remove(self.ui)
	net.remove(self.ground)
	g_data.select:receiveChrs(msg, buf, bufLen)
	self.clearGameData(self)

	--- END OF BLOCK #1 ---

	slot4 = if self.reconnect then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 26-50, warpins: 1 ---
	self.reconnect = false
	g_data.login.reconnectState = false

	self.runs(self, {
		cc.DelayTime:create(5),
		cc.CallFunc:create(function ()
			--- BLOCK #0 1-8, warpins: 1 ---
			net.remove(self)
			--- END OF BLOCK #0 ---

			slot0 = if not self.reconnectBox then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #4
			end


			--- BLOCK #1 9-15, warpins: 1 ---
			print("ReIn Game ")
			--- END OF BLOCK #1 ---

			slot0 = if self.isLoginQueue then
			JUMP TO BLOCK #2
			else
			JUMP TO BLOCK #3
			end


			--- BLOCK #2 16-25, warpins: 1 ---
			game.gotoscene("select", nil, "fade", 0.5, display.COLOR_BLACK)
			--- END OF BLOCK #2 ---

			UNCONDITIONAL JUMP; TARGET BLOCK #4


			--- BLOCK #3 26-47, warpins: 1 ---
			net.send({
				CM_SELCHR
			}, {
				g_data.select:getCurName()
			})
			game.gotoscene("notice", nil, "fade", 0.5, display.COLOR_BLACK)

			--- END OF BLOCK #3 ---

			FLOW; TARGET BLOCK #4


			--- BLOCK #4 48-48, warpins: 3 ---
			return 
			--- END OF BLOCK #4 ---



		end)
	})
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 51-63, warpins: 1 ---
	net.remove(self)
	game.gotoscene("select", nil, "fade", 0.5, display.COLOR_BLACK)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 64-65, warpins: 3 ---
	return 
	--- END OF BLOCK #4 ---



end
scene.processMsg = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not msg then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-8, warpins: 1 ---
	local function tip(str, func)
		--- BLOCK #0 1-6, warpins: 1 ---
		an.newMsgbox(str, func)

		return 
		--- END OF BLOCK #0 ---



	end

	local ident = msg.ident
	--- END OF BLOCK #2 ---

	if SM_CHR_LIST == ident then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #3 9-13, warpins: 1 ---
	self.isLoginQueue = false
	--- END OF BLOCK #3 ---

	slot6 = if not self.smallExitState then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 14-21, warpins: 1 ---
	g_data.login.roleInfo = {
		msg = msg,
		buf = buf,
		bufLen = bufLen
	}
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #5 22-32, warpins: 1 ---
	self.smallExitState = false

	self.enterSelectScene(self, msg, buf, bufLen)
	--- END OF BLOCK #5 ---

	slot6 = if WIN32_OPERATE then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #37
	end


	--- BLOCK #6 33-36, warpins: 1 ---
	operate.unRegisterEvent()
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #7 37-39, warpins: 1 ---
	--- END OF BLOCK #7 ---

	if SM_New_Version == ident then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 40-40, warpins: 1 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #9 41-43, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if SM_LOGIN == ident then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 44-54, warpins: 1 ---
	net.send({
		CM_RECONNECT
	}, {
		g_data.reconnctID
	})

	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #11 55-57, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if SM_LOGIN_AUTH == ident then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #19
	end


	--- BLOCK #12 58-60, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if msg.param == 2 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 61-61, warpins: 1 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #14 62-64, warpins: 1 ---
	--- END OF BLOCK #14 ---

	if msg.param == 1 then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #37
	end


	--- BLOCK #15 65-75, warpins: 1 ---
	local ret1 = getRecord("TLoginIdResult")
	local ret2 = getRecord("TLoginIdResult2")

	--- END OF BLOCK #15 ---

	if ret1.size(ret1)
	 < bufLen then
	JUMP TO BLOCK #16
	else
	JUMP TO BLOCK #17
	end


	--- BLOCK #16 76-91, warpins: 1 ---
	net.record(ret2, buf, bufLen)

	g_data.reconnctID = ret2.get(ret2, "reconnectID")
	g_data.login.loginRet2 = ret2

	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #17 92-101, warpins: 1 ---
	net.record(ret1, buf, bufLen)

	g_data.login.loginRet1 = ret1

	--- END OF BLOCK #17 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #18 102-102, warpins: 0 ---
	--- END OF BLOCK #18 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #19 103-105, warpins: 1 ---
	--- END OF BLOCK #19 ---

	if SM_OUTOFCONNECTION == ident then
	JUMP TO BLOCK #20
	else
	JUMP TO BLOCK #21
	end


	--- BLOCK #20 106-106, warpins: 1 ---
	--- END OF BLOCK #20 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #21 107-109, warpins: 1 ---
	--- END OF BLOCK #21 ---

	if SM_OUTOFCONNECTION_KICKOUT == ident then
	JUMP TO BLOCK #22
	else
	JUMP TO BLOCK #23
	end


	--- BLOCK #22 110-114, warpins: 1 ---
	self.reconectFuc(self, "已经被其他用户踢下线")

	--- END OF BLOCK #22 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #23 115-117, warpins: 1 ---
	--- END OF BLOCK #23 ---

	if SM_RECONNECT == ident then
	JUMP TO BLOCK #24
	else
	JUMP TO BLOCK #25
	end


	--- BLOCK #24 118-118, warpins: 1 ---
	--- END OF BLOCK #24 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #25 119-121, warpins: 1 ---
	--- END OF BLOCK #25 ---

	if SM_LOGIN_ALREADY_ONLINE == ident then
	JUMP TO BLOCK #26
	else
	JUMP TO BLOCK #29
	end


	--- BLOCK #26 122-124, warpins: 1 ---
	--- END OF BLOCK #26 ---

	if msg.recog == 1 then
	JUMP TO BLOCK #27
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #27 125-132, warpins: 1 ---
	self.kickoutBox = an.newMsgbox("此账号目前在线，是否强行登录?", function (idx)
		--- BLOCK #0 1-2, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if idx == 1 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 3-18, warpins: 1 ---
		self:enterSelectScene(g_data.login.roleInfo.msg, g_data.login.roleInfo.buf, g_data.login.roleInfo.bufLen)

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 19-28, warpins: 2 ---
		self.kickoutBox = nil
		slot1 = net.send
		slot2 = {
			CM_LOGIN_ALREADY_ONLINE
		}
		--- END OF BLOCK #2 ---

		if idx == 1 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 29-30, warpins: 1 ---
		slot3 = 1
		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #5


		--- BLOCK #4 31-31, warpins: 1 ---
		slot3 = 0
		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 32-34, warpins: 2 ---
		slot2.param = slot3

		slot1(slot2)

		return 
		--- END OF BLOCK #5 ---



	end, {
		center = true,
		hasCancel = true
	})

	--- END OF BLOCK #27 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #28 133-148, warpins: 1 ---
	self.enterSelectScene(self, g_data.login.roleInfo.msg, g_data.login.roleInfo.buf, g_data.login.roleInfo.bufLen)

	--- END OF BLOCK #28 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #29 149-151, warpins: 1 ---
	--- END OF BLOCK #29 ---

	if SM_LOGIN_QUEUE == ident then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #31
	end


	--- BLOCK #30 152-160, warpins: 1 ---
	self.isLoginQueue = true

	g_data.login:setQueueData(msg)
	--- END OF BLOCK #30 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #31 161-163, warpins: 1 ---
	--- END OF BLOCK #31 ---

	if SM_SELCHR_ERR == ident then
	JUMP TO BLOCK #32
	else
	JUMP TO BLOCK #33
	end


	--- BLOCK #32 164-170, warpins: 1 ---
	an.newMsgbox("服务器维护中，请稍后再试", function ()
		--- BLOCK #0 1-5, warpins: 1 ---
		self:bigExit()

		return 
		--- END OF BLOCK #0 ---



	end, {
		center = true
	})
	--- END OF BLOCK #32 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #33 171-172, warpins: 1 ---
	--- END OF BLOCK #33 ---

	if ident == 11706 then
	JUMP TO BLOCK #34
	else
	JUMP TO BLOCK #35
	end


	--- BLOCK #34 173-179, warpins: 1 ---
	an.newMsgbox("重连失败,请重新登陆", function ()
		--- BLOCK #0 1-5, warpins: 1 ---
		self:bigExit()

		return 
		--- END OF BLOCK #0 ---



	end, {
		center = true
	})

	--- END OF BLOCK #34 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #35 180-182, warpins: 1 ---
	--- END OF BLOCK #35 ---

	if SM_JPUSH_SETALIAS == ident then
	JUMP TO BLOCK #36
	else
	JUMP TO BLOCK #37
	end


	--- BLOCK #36 183-190, warpins: 1 ---
	local alias = net.str(buf)

	jpush.setAlias(alias)

	--- END OF BLOCK #36 ---

	FLOW; TARGET BLOCK #37


	--- BLOCK #37 191-193, warpins: 20 ---
	return true
	--- END OF BLOCK #37 ---

	FLOW; TARGET BLOCK #38


	--- BLOCK #38 194-194, warpins: 2 ---
	--- END OF BLOCK #38 ---



end
scene.initHotKey = function (self)
	--- BLOCK #0 1-8, warpins: 1 ---
	local data = cache.getHotKey(common.getPlayerName())
	--- END OF BLOCK #0 ---

	slot1 = if not data then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-11, warpins: 1 ---
	data = def.operate.hotKey

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 12-18, warpins: 2 ---
	g_data.hotKey:setKeyInfos(data)

	return 
	--- END OF BLOCK #2 ---



end

return scene
--- END OF BLOCK #3 ---



