--- BLOCK #0 1-30, warpins: 1 ---
local common = import(".common")
local settingLogic = {}
local protectedInfo = {}
local protectedCache = {}
protectedInfo.比奇传送石 = {
	"比奇传送石",
	"比奇传送石(赠)",
	"比奇传送石(福)",
	"比奇传送石(绑)",
	"比奇传送石(礼)",
	"比奇传送石(佑)"
}
protectedInfo.盟重传送石 = {
	"盟重传送石",
	"盟重传送石(赠)",
	"盟重传送石(福)",
	"盟重传送石(绑)",
	"盟重传送石(礼)",
	"盟重传送石(佑)"
}
protectedInfo.随机传送石 = {
	"随机传送石",
	"随机传送石(赠)",
	"随机传送石(福)",
	"随机传送石(绑)",
	"随机传送石(礼)",
	"随机传送石(佑)"
}
settingLogic.initDrugs = function ()
	--- BLOCK #0 1-50, warpins: 1 ---
	settingLogic.initedDrugs = true

	local function func(drugs)
		--- BLOCK #0 1-7, warpins: 1 ---
		local new = clone(drugs)

		--- END OF BLOCK #0 ---

		for k, v in pairs(drugs)


		LOOP BLOCK #1
		GO OUT TO BLOCK #11


		--- BLOCK #1 8-13, warpins: 1 ---
		local itemName, newItem = nil

		--- END OF BLOCK #1 ---

		if type(v)

		 == "table" then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 14-22, warpins: 1 ---
		itemName = v[1] .. "(赠)"
		newItem = clone(v)
		newItem[1] = itemName
		--- END OF BLOCK #2 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #3 23-26, warpins: 1 ---
		itemName = v .. "(赠)"
		newItem = itemName

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 27-31, warpins: 2 ---
		--- END OF BLOCK #4 ---

		for k, v in pairs(def.items)

		LOOP BLOCK #5
		GO OUT TO BLOCK #10


		--- BLOCK #5 32-36, warpins: 1 ---
		--- END OF BLOCK #5 ---

		if type(v)
		 == "table" then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #6 37-39, warpins: 1 ---
		--- END OF BLOCK #6 ---

		slot14 = if v.get then
		JUMP TO BLOCK #7
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #7 40-45, warpins: 1 ---
		--- END OF BLOCK #7 ---

		if v.get(v, "name")
		 == itemName then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 46-50, warpins: 1 ---
		table.insert(new, newItem)

		--- END OF BLOCK #8 ---

		FLOW; TARGET BLOCK #9


		--- BLOCK #9 51-52, warpins: 5 ---
		--- END OF BLOCK #9 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #10 53-54, warpins: 2 ---
		--- END OF BLOCK #10 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #0


		--- BLOCK #11 55-55, warpins: 1 ---
		return new
		--- END OF BLOCK #11 ---



	end

	settingLogic.hpObjList = func({
		"新手金创药",
		"强效金创药",
		"金创药中量",
		"金创药(中量)",
		"金创药(小量)"
	})
	settingLogic.mpObjList = func({
		"新手魔法药",
		"强效魔法药",
		"魔法药中量",
		"魔法药(中量)",
		"魔法药(小量)"
	})
	settingLogic.hpObjListWithDelay = func({
		{
			"新手金创药",
			2
		},
		{
			"强效金创药",
			4
		},
		{
			"金创药中量",
			3
		},
		{
			"金创药(中量)",
			3
		},
		{
			"金创药(小量)",
			2
		}
	})
	settingLogic.mpObjListWithDelay = func({
		{
			"新手魔法药",
			3
		},
		{
			"强效魔法药",
			5
		},
		{
			"魔法药中量",
			4
		},
		{
			"魔法药(中量)",
			4
		},
		{
			"魔法药(小量)",
			3
		}
	})
	settingLogic.instantDrug = func({
		"太阳水",
		"强效太阳水",
		"万年雪霜",
		"疗伤药",
		"疗伤药(任务)"
	})

	return 
	--- END OF BLOCK #0 ---



end
settingLogic.update = function (dt)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not main_scene then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-12, warpins: 1 ---
	local player = main_scene.ground.player
	local map = main_scene.ground.map

	--- END OF BLOCK #2 ---

	slot1 = if player then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 13-14, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot2 = if not map then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 15-15, warpins: 2 ---
	return 

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 16-18, warpins: 1 ---
	--- END OF BLOCK #5 ---

	slot3 = if not player.die then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #95
	end


	--- BLOCK #6 19-21, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot3 = if main_scene then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #95
	end


	--- BLOCK #7 22-30, warpins: 1 ---
	local function useItem(isHero, data, objList)
		--- BLOCK #0 1-3, warpins: 1 ---
		local obj, space = nil
		--- END OF BLOCK #0 ---

		slot0 = if isHero then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-7, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot5 = if not g_data.heroBag then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 8-9, warpins: 2 ---
		local bag = g_data.bag

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 10-14, warpins: 2 ---
		--- END OF BLOCK #3 ---

		if type(objList)
		 == "table" then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #13
		end


		--- BLOCK #4 15-18, warpins: 1 ---
		--- END OF BLOCK #4 ---

		for i, v in ipairs(objList)


		LOOP BLOCK #5
		GO OUT TO BLOCK #10


		--- BLOCK #5 19-25, warpins: 1 ---
		local item = v
		local sp = nil

		--- END OF BLOCK #5 ---

		if type(v)

		 == "table" then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #6 26-27, warpins: 1 ---
		sp = item[2]
		item = item[1]
		--- END OF BLOCK #6 ---

		FLOW; TARGET BLOCK #7


		--- BLOCK #7 28-34, warpins: 2 ---
		local count = bag.getItemCount(bag, item)
		--- END OF BLOCK #7 ---

		if 0 < count then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 35-37, warpins: 1 ---
		obj = item
		space = sp
		--- END OF BLOCK #8 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #10


		--- BLOCK #9 38-39, warpins: 2 ---
		--- END OF BLOCK #9 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #10 40-41, warpins: 2 ---
		--- END OF BLOCK #10 ---

		slot3 = if not obj then
		JUMP TO BLOCK #11
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #11 42-42, warpins: 1 ---
		obj = ""
		--- END OF BLOCK #11 ---

		FLOW; TARGET BLOCK #12


		--- BLOCK #12 43-43, warpins: 2 ---
		--- END OF BLOCK #12 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #14


		--- BLOCK #13 44-44, warpins: 1 ---
		obj = objList
		--- END OF BLOCK #13 ---

		FLOW; TARGET BLOCK #14


		--- BLOCK #14 45-46, warpins: 2 ---
		--- END OF BLOCK #14 ---

		slot4 = if space then
		JUMP TO BLOCK #15
		else
		JUMP TO BLOCK #16
		end


		--- BLOCK #15 47-48, warpins: 1 ---
		data.space = space*1000
		--- END OF BLOCK #15 ---

		FLOW; TARGET BLOCK #16


		--- BLOCK #16 49-54, warpins: 2 ---
		local itemData, where = bag.getItemWithName(bag, obj)
		--- END OF BLOCK #16 ---

		if where == "quick" then
		JUMP TO BLOCK #17
		else
		JUMP TO BLOCK #18
		end


		--- BLOCK #17 55-55, warpins: 1 ---
		itemData = itemData.item
		--- END OF BLOCK #17 ---

		FLOW; TARGET BLOCK #18


		--- BLOCK #18 56-57, warpins: 2 ---
		--- END OF BLOCK #18 ---

		slot6 = if itemData then
		JUMP TO BLOCK #19
		else
		JUMP TO BLOCK #31
		end


		--- BLOCK #19 58-67, warpins: 1 ---
		slot9 = bag
		slot8 = bag.use
		slot10 = "eat"
		slot11 = itemData.get(itemData, "makeIndex")
		slot12 = {}
		--- END OF BLOCK #19 ---

		if where ~= "quick" then
		JUMP TO BLOCK #20
		else
		JUMP TO BLOCK #21
		end


		--- BLOCK #20 68-69, warpins: 1 ---
		slot13 = false
		--- END OF BLOCK #20 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #22


		--- BLOCK #21 70-70, warpins: 1 ---
		slot13 = true
		--- END OF BLOCK #21 ---

		FLOW; TARGET BLOCK #22


		--- BLOCK #22 71-74, warpins: 2 ---
		slot12.quick = slot13

		--- END OF BLOCK #22 ---

		slot8 = if slot8(slot9, slot10, slot11, slot12)

		 then
		JUMP TO BLOCK #23
		else
		JUMP TO BLOCK #31
		end


		--- BLOCK #23 75-83, warpins: 1 ---
		data.lastTime = socket.gettime()
		slot8 = net.send
		slot9 = {}
		--- END OF BLOCK #23 ---

		slot0 = if isHero then
		JUMP TO BLOCK #24
		else
		JUMP TO BLOCK #25
		end


		--- BLOCK #24 84-86, warpins: 1 ---
		--- END OF BLOCK #24 ---

		slot10 = if not CM_HERO_EAT then
		JUMP TO BLOCK #25
		else
		JUMP TO BLOCK #26
		end


		--- BLOCK #25 87-87, warpins: 2 ---
		slot10 = CM_EAT
		--- END OF BLOCK #25 ---

		FLOW; TARGET BLOCK #26


		--- BLOCK #26 88-101, warpins: 2 ---
		slot9[1] = slot10
		slot9.recog = itemData.get(itemData, "makeIndex")

		slot8(slot9, {
			itemData.getVar("name")
		})
		--- END OF BLOCK #26 ---

		slot0 = if isHero then
		JUMP TO BLOCK #27
		else
		JUMP TO BLOCK #29
		end


		--- BLOCK #27 102-107, warpins: 1 ---
		--- END OF BLOCK #27 ---

		slot8 = if main_scene.ui.panels.heroBag then
		JUMP TO BLOCK #28
		else
		JUMP TO BLOCK #31
		end


		--- BLOCK #28 108-119, warpins: 1 ---
		main_scene.ui.panels.heroBag:delItem(itemData.get(itemData, "makeIndex"))
		--- END OF BLOCK #28 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #31


		--- BLOCK #29 120-125, warpins: 1 ---
		--- END OF BLOCK #29 ---

		slot8 = if main_scene.ui.panels.bag then
		JUMP TO BLOCK #30
		else
		JUMP TO BLOCK #31
		end


		--- BLOCK #30 126-136, warpins: 1 ---
		main_scene.ui.panels.bag:delItem(itemData.get(itemData, "makeIndex"))

		--- END OF BLOCK #30 ---

		FLOW; TARGET BLOCK #31


		--- BLOCK #31 137-137, warpins: 6 ---
		return 
		--- END OF BLOCK #31 ---



	end

	local function check(isHero, data, cur, max, objList, autoDisable)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot6 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #21
		end


		--- BLOCK #1 4-8, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot6 = if not protectedInfo[data.uses] then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 9-9, warpins: 1 ---
		local tmpUsers = data.uses
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 10-11, warpins: 2 ---
		--- END OF BLOCK #3 ---

		slot4 = if not objList then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 12-12, warpins: 1 ---
		objList = tmpUsers
		--- END OF BLOCK #4 ---

		FLOW; TARGET BLOCK #5


		--- BLOCK #5 13-16, warpins: 2 ---
		local min = nil
		--- END OF BLOCK #5 ---

		slot8 = if data.isPercent then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #6 17-19, warpins: 1 ---
		min = data.value*max
		--- END OF BLOCK #6 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #8


		--- BLOCK #7 20-20, warpins: 1 ---
		min = data.value

		--- END OF BLOCK #7 ---

		FLOW; TARGET BLOCK #8


		--- BLOCK #8 21-22, warpins: 2 ---
		--- END OF BLOCK #8 ---

		if cur <= min then
		JUMP TO BLOCK #9
		else
		JUMP TO BLOCK #21
		end


		--- BLOCK #9 23-25, warpins: 1 ---
		--- END OF BLOCK #9 ---

		slot8 = if data.lastTime then
		JUMP TO BLOCK #10
		else
		JUMP TO BLOCK #11
		end


		--- BLOCK #10 26-34, warpins: 1 ---
		--- END OF BLOCK #10 ---

		if data.space/1000 < socket.gettime()
		 - data.lastTime then
		JUMP TO BLOCK #11
		else
		JUMP TO BLOCK #21
		end


		--- BLOCK #11 35-39, warpins: 2 ---
		--- END OF BLOCK #11 ---

		if type(objList)
		 == "function" then
		JUMP TO BLOCK #12
		else
		JUMP TO BLOCK #13
		end


		--- BLOCK #12 40-42, warpins: 1 ---
		objList()
		--- END OF BLOCK #12 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #20


		--- BLOCK #13 43-45, warpins: 1 ---
		--- END OF BLOCK #13 ---

		if data.uses == "回城" then
		JUMP TO BLOCK #14
		else
		JUMP TO BLOCK #15
		end


		--- BLOCK #14 46-49, warpins: 1 ---
		common.backHome()
		--- END OF BLOCK #14 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #20


		--- BLOCK #15 50-51, warpins: 1 ---
		--- END OF BLOCK #15 ---

		slot5 = if autoDisable then
		JUMP TO BLOCK #16
		else
		JUMP TO BLOCK #19
		end


		--- BLOCK #16 52-54, warpins: 1 ---
		--- END OF BLOCK #16 ---

		if #objList == 1 then
		JUMP TO BLOCK #17
		else
		JUMP TO BLOCK #19
		end


		--- BLOCK #17 55-61, warpins: 1 ---
		--- END OF BLOCK #17 ---

		slot8 = if not string.find(objList[1], "随机")

		 then
		JUMP TO BLOCK #18
		else
		JUMP TO BLOCK #19
		end


		--- BLOCK #18 62-70, warpins: 1 ---
		data.enable = false

		cache.saveSetting(common.getPlayerName(), "protected")
		--- END OF BLOCK #18 ---

		FLOW; TARGET BLOCK #19


		--- BLOCK #19 71-75, warpins: 4 ---
		useItem(isHero, data, objList)

		--- END OF BLOCK #19 ---

		FLOW; TARGET BLOCK #20


		--- BLOCK #20 76-77, warpins: 3 ---
		return true
		--- END OF BLOCK #20 ---

		FLOW; TARGET BLOCK #21


		--- BLOCK #21 78-78, warpins: 4 ---
		return 
		--- END OF BLOCK #21 ---



	end

	local function checkMiss(isHero, data, cur, max, objList)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot5 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #1 4-5, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot4 = if not objList then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 6-6, warpins: 1 ---
		objList = data.uses
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 7-10, warpins: 2 ---
		local min = nil
		--- END OF BLOCK #3 ---

		slot6 = if data.isPercent then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 11-14, warpins: 1 ---
		min = data.value/100*max
		--- END OF BLOCK #4 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #6


		--- BLOCK #5 15-15, warpins: 1 ---
		min = data.value
		--- END OF BLOCK #5 ---

		FLOW; TARGET BLOCK #6


		--- BLOCK #6 16-18, warpins: 2 ---
		min = max - min

		--- END OF BLOCK #6 ---

		if cur <= min then
		JUMP TO BLOCK #7
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #7 19-21, warpins: 1 ---
		--- END OF BLOCK #7 ---

		slot6 = if data.lastTime then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 22-30, warpins: 1 ---
		--- END OF BLOCK #8 ---

		if data.space/1000 < socket.gettime()
		 - data.lastTime then
		JUMP TO BLOCK #9
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #9 31-35, warpins: 2 ---
		--- END OF BLOCK #9 ---

		if type(objList)
		 == "function" then
		JUMP TO BLOCK #10
		else
		JUMP TO BLOCK #11
		end


		--- BLOCK #10 36-38, warpins: 1 ---
		objList()
		--- END OF BLOCK #10 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #12


		--- BLOCK #11 39-43, warpins: 1 ---
		useItem(isHero, data, objList)

		--- END OF BLOCK #11 ---

		FLOW; TARGET BLOCK #12


		--- BLOCK #12 44-44, warpins: 5 ---
		return 
		--- END OF BLOCK #12 ---



	end

	local function checkMissTime(isHero, data, objList)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot3 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 4-6, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot3 = if data.lastTime then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 7-15, warpins: 1 ---
		--- END OF BLOCK #2 ---

		if data.space/1000 < socket.gettime()
		 - data.lastTime then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 16-20, warpins: 2 ---
		useItem(isHero, data, objList)

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 21-21, warpins: 3 ---
		return 
		--- END OF BLOCK #4 ---



	end

	--- END OF BLOCK #7 ---

	slot7 = if not g_data.player.initedAbility then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 31-32, warpins: 1 ---
	return 

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 33-44, warpins: 2 ---
	local curHP = g_data.player.ability:get("HP")
	slot8 = protectedCache
	--- END OF BLOCK #9 ---

	slot9 = if not protectedCache.lastHP then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 45-45, warpins: 1 ---
	slot9 = curHP
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 46-48, warpins: 2 ---
	slot8.lastHP = slot9

	--- END OF BLOCK #11 ---

	slot7 = if curHP then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #12 49-54, warpins: 1 ---
	--- END OF BLOCK #12 ---

	if curHP - protectedCache.lastHP < 0 then
	JUMP TO BLOCK #13
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #13 55-64, warpins: 1 ---
	check(false, g_data.setting.protected.role.hp, curHP, nil)

	--- END OF BLOCK #13 ---

	FLOW; TARGET BLOCK #14


	--- BLOCK #14 65-78, warpins: 3 ---
	protectedCache.lastHP = curHP
	local curMP = g_data.player.ability:get("MP")
	slot9 = protectedCache
	--- END OF BLOCK #14 ---

	slot10 = if not protectedCache.lastMP then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 79-79, warpins: 1 ---
	slot10 = curMP
	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 80-86, warpins: 2 ---
	slot9.lastMP = slot10

	--- END OF BLOCK #16 ---

	if curMP - protectedCache.lastMP < 0 then
	JUMP TO BLOCK #17
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #17 87-109, warpins: 1 ---
	check(false, g_data.setting.protected.role.mp, g_data.player.ability:get("MP"), g_data.player.ability:get("MP"), nil)

	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 110-115, warpins: 2 ---
	protectedCache.lastMP = curMP

	--- END OF BLOCK #18 ---

	slot9 = if not settingLogic.initedDrugs then
	JUMP TO BLOCK #19
	else
	JUMP TO BLOCK #20
	end


	--- BLOCK #19 116-118, warpins: 1 ---
	settingLogic.initDrugs()

	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 119-123, warpins: 2 ---
	local function checkDrug(isHero, type)
		--- BLOCK #0 1-15, warpins: 1 ---
		local withPercent = g_data.setting.drugs[type .. "Setting"].withPercent
		local data = nil
		local hpObj = settingLogic.hpObjList
		local mpObj = settingLogic.mpObjList
		--- END OF BLOCK #0 ---

		slot2 = if withPercent then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 16-25, warpins: 1 ---
		data = g_data.setting.drugs[type].percentDrug
		hpObj = settingLogic.hpObjListWithDelay
		mpObj = settingLogic.mpObjListWithDelay
		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 26-30, warpins: 1 ---
		data = g_data.setting.drugs[type].numberDrug
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 31-32, warpins: 2 ---
		--- END OF BLOCK #3 ---

		slot0 = if isHero then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #5
		end


		--- BLOCK #4 33-36, warpins: 1 ---
		--- END OF BLOCK #4 ---

		slot6 = if not g_data.hero then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #6
		end


		--- BLOCK #5 37-38, warpins: 2 ---
		local playerData = g_data.player
		--- END OF BLOCK #5 ---

		FLOW; TARGET BLOCK #6


		--- BLOCK #6 39-95, warpins: 2 ---
		local tmpHP = playerData.ability:get("HP")
		local tmpMP = playerData.ability:get("MP")

		check(isHero, data.normalHP, tmpHP, playerData.ability:get("maxHP"), hpObj)
		check(isHero, data.normalMP, tmpMP, playerData.ability:get("maxMP"), mpObj)
		check(isHero, data.quickHP, tmpHP, playerData.ability:get("maxHP"), settingLogic.instantDrug)
		check(isHero, data.quickMP, tmpMP, playerData.ability:get("maxMP"), settingLogic.instantDrug)

		return 
		--- END OF BLOCK #6 ---



	end

	--- END OF BLOCK #20 ---

	if def.gameVersionType == "185" then
	JUMP TO BLOCK #21
	else
	JUMP TO BLOCK #22
	end


	--- BLOCK #21 124-132, warpins: 1 ---
	checkDrug(false, "role")
	checkDrug(true, "hero")
	--- END OF BLOCK #21 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #23


	--- BLOCK #22 133-136, warpins: 1 ---
	checkDrug(false, "role")
	--- END OF BLOCK #22 ---

	FLOW; TARGET BLOCK #23


	--- BLOCK #23 137-142, warpins: 2 ---
	--- END OF BLOCK #23 ---

	slot10 = if g_data.setting.base.firePeral then
	JUMP TO BLOCK #24
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #24 143-151, warpins: 1 ---
	--- END OF BLOCK #24 ---

	slot10 = if g_data.client:checkLastTime("firePeral", 0.1)
	 then
	JUMP TO BLOCK #25
	else
	JUMP TO BLOCK #26
	end


	--- BLOCK #25 152-163, warpins: 1 ---
	g_data.client:setLastTime("firePeral", true)
	useItem(false, {}, "火龙珠")

	--- END OF BLOCK #25 ---

	FLOW; TARGET BLOCK #26


	--- BLOCK #26 164-170, warpins: 3 ---
	local function autoUnpack(isHero, data)
		--- BLOCK #0 1-6, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if 5 <= data.getFreeCount(data)
		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #15
		end


		--- BLOCK #1 7-12, warpins: 1 ---
		--- END OF BLOCK #1 ---

		for k, v in pairs(g_data.setting.autoUnpack)


		LOOP BLOCK #2
		GO OUT TO BLOCK #15


		--- BLOCK #2 13-15, warpins: 1 ---
		--- END OF BLOCK #2 ---

		slot7 = if v.enable then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #3 16-22, warpins: 1 ---
		local cnt = data.getItemCount(data, v.name)
		--- END OF BLOCK #3 ---

		if cnt <= v.min then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #4 23-28, warpins: 1 ---
		local itemData = data.getItemWithName(data, v.pack)

		--- END OF BLOCK #4 ---

		slot8 = if itemData then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #5 29-38, warpins: 1 ---
		--- END OF BLOCK #5 ---

		slot9 = if data.use(data, "eat", itemData.get(itemData, "makeIndex"))

		 then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #6 39-43, warpins: 1 ---
		slot9 = net.send
		slot10 = {}
		--- END OF BLOCK #6 ---

		slot0 = if isHero then
		JUMP TO BLOCK #7
		else
		JUMP TO BLOCK #8
		end


		--- BLOCK #7 44-46, warpins: 1 ---
		--- END OF BLOCK #7 ---

		slot11 = if not CM_HERO_EAT then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 47-47, warpins: 2 ---
		slot11 = CM_EAT
		--- END OF BLOCK #8 ---

		FLOW; TARGET BLOCK #9


		--- BLOCK #9 48-61, warpins: 2 ---
		slot10[1] = slot11
		slot10.recog = itemData.get(itemData, "makeIndex")

		slot9(slot10, {
			itemData.getVar("name")
		})
		--- END OF BLOCK #9 ---

		slot0 = if isHero then
		JUMP TO BLOCK #10
		else
		JUMP TO BLOCK #12
		end


		--- BLOCK #10 62-67, warpins: 1 ---
		--- END OF BLOCK #10 ---

		slot9 = if main_scene.ui.panels.heroBag then
		JUMP TO BLOCK #11
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #11 68-79, warpins: 1 ---
		main_scene.ui.panels.heroBag:delItem(itemData.get(itemData, "makeIndex"))
		--- END OF BLOCK #11 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #14


		--- BLOCK #12 80-85, warpins: 1 ---
		--- END OF BLOCK #12 ---

		slot9 = if main_scene.ui.panels.bag then
		JUMP TO BLOCK #13
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #13 86-96, warpins: 1 ---
		main_scene.ui.panels.bag:delItem(itemData.get(itemData, "makeIndex"))

		--- END OF BLOCK #13 ---

		FLOW; TARGET BLOCK #14


		--- BLOCK #14 97-98, warpins: 9 ---
		--- END OF BLOCK #14 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #1


		--- BLOCK #15 99-99, warpins: 2 ---
		return 
		--- END OF BLOCK #15 ---



	end

	--- END OF BLOCK #26 ---

	slot11 = if g_data.setting.base.autoUnpack then
	JUMP TO BLOCK #27
	else
	JUMP TO BLOCK #28
	end


	--- BLOCK #27 171-180, warpins: 1 ---
	autoUnpack(false, g_data.bag)
	autoUnpack(true, g_data.heroBag)
	--- END OF BLOCK #27 ---

	FLOW; TARGET BLOCK #28


	--- BLOCK #28 181-186, warpins: 2 ---
	--- END OF BLOCK #28 ---

	slot11 = if g_data.setting.base.warningDura then
	JUMP TO BLOCK #29
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #29 187-195, warpins: 1 ---
	--- END OF BLOCK #29 ---

	slot11 = if g_data.client:checkLastTime("warningDura", 60)
	 then
	JUMP TO BLOCK #30
	else
	JUMP TO BLOCK #44
	end


	--- BLOCK #30 196-208, warpins: 1 ---
	g_data.client:setLastTime("warningDura", true)
	--- END OF BLOCK #30 ---

	for k, v in pairs(g_data.equip.items)

	LOOP BLOCK #31
	GO OUT TO BLOCK #37


	--- BLOCK #31 209-214, warpins: 1 ---
	--- END OF BLOCK #31 ---

	if tonumber(k)
	 ~= U_BUJUK then
	JUMP TO BLOCK #32
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #32 215-230, warpins: 1 ---
	--- END OF BLOCK #32 ---

	if Word(v.get(v, "dura"))
	/Word(v.get(v, "duraMax"))

	 < 0.2 then
	JUMP TO BLOCK #33
	else
	JUMP TO BLOCK #36
	end


	--- BLOCK #33 231-238, warpins: 1 ---
	slot16 = common.addMsg
	slot17 = "提示:您的["

	--- END OF BLOCK #33 ---

	slot18 = if not v.getVar("name")

	 then
	JUMP TO BLOCK #34
	else
	JUMP TO BLOCK #35
	end


	--- BLOCK #34 239-239, warpins: 1 ---
	slot18 = ""

	--- END OF BLOCK #34 ---

	FLOW; TARGET BLOCK #35


	--- BLOCK #35 240-248, warpins: 2 ---
	slot16(slot17 .. slot18 .. "]持久力低于20%,请及时进行修理或更换!", def.colors.clRed, def.colors.clWhite)
	--- END OF BLOCK #35 ---

	FLOW; TARGET BLOCK #36


	--- BLOCK #36 249-250, warpins: 4 ---
	--- END OF BLOCK #36 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #30


	--- BLOCK #37 251-256, warpins: 1 ---
	--- END OF BLOCK #37 ---

	for k, v in pairs(g_data.heroEquip.items)

	LOOP BLOCK #38
	GO OUT TO BLOCK #44


	--- BLOCK #38 257-262, warpins: 1 ---
	--- END OF BLOCK #38 ---

	if tonumber(k)
	 ~= U_BUJUK then
	JUMP TO BLOCK #39
	else
	JUMP TO BLOCK #43
	end


	--- BLOCK #39 263-278, warpins: 1 ---
	--- END OF BLOCK #39 ---

	if Word(v.get(v, "dura"))
	/Word(v.get(v, "duraMax"))

	 < 0.2 then
	JUMP TO BLOCK #40
	else
	JUMP TO BLOCK #43
	end


	--- BLOCK #40 279-286, warpins: 1 ---
	slot16 = common.addMsg
	slot17 = "提示:您英雄的["

	--- END OF BLOCK #40 ---

	slot18 = if not v.getVar("name")

	 then
	JUMP TO BLOCK #41
	else
	JUMP TO BLOCK #42
	end


	--- BLOCK #41 287-287, warpins: 1 ---
	slot18 = ""

	--- END OF BLOCK #41 ---

	FLOW; TARGET BLOCK #42


	--- BLOCK #42 288-296, warpins: 2 ---
	slot16(slot17 .. slot18 .. "]持久力低于20%,请及时进行修理或更换!", def.colors.clRed, def.colors.clWhite)

	--- END OF BLOCK #42 ---

	FLOW; TARGET BLOCK #43


	--- BLOCK #43 297-298, warpins: 4 ---
	--- END OF BLOCK #43 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #37


	--- BLOCK #44 299-304, warpins: 3 ---
	--- END OF BLOCK #44 ---

	slot11 = if g_data.setting.base.lockColor then
	JUMP TO BLOCK #45
	else
	JUMP TO BLOCK #56
	end


	--- BLOCK #45 305-314, warpins: 1 ---
	local roleid = nil

	--- END OF BLOCK #45 ---

	for k, v in pairs(main_scene.ui.console.controller.lock.target)


	LOOP BLOCK #46
	GO OUT TO BLOCK #49


	--- BLOCK #46 315-316, warpins: 1 ---
	--- END OF BLOCK #46 ---

	slot16 = if v then
	JUMP TO BLOCK #47
	else
	JUMP TO BLOCK #48
	end


	--- BLOCK #47 317-318, warpins: 1 ---
	roleid = v
	--- END OF BLOCK #47 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #49


	--- BLOCK #48 319-320, warpins: 2 ---
	--- END OF BLOCK #48 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #45


	--- BLOCK #49 321-324, warpins: 2 ---
	local preSelected = settingLogic.preSelect

	--- END OF BLOCK #49 ---

	slot12 = if preSelected then
	JUMP TO BLOCK #50
	else
	JUMP TO BLOCK #51
	end


	--- BLOCK #50 325-327, warpins: 1 ---
	--- END OF BLOCK #50 ---

	if preSelected.roleid ~= roleid then
	JUMP TO BLOCK #51
	else
	JUMP TO BLOCK #56
	end


	--- BLOCK #51 328-329, warpins: 2 ---
	--- END OF BLOCK #51 ---

	slot12 = if preSelected then
	JUMP TO BLOCK #52
	else
	JUMP TO BLOCK #53
	end


	--- BLOCK #52 330-332, warpins: 1 ---
	preSelected.unselected(preSelected)

	--- END OF BLOCK #52 ---

	FLOW; TARGET BLOCK #53


	--- BLOCK #53 333-334, warpins: 2 ---
	--- END OF BLOCK #53 ---

	slot11 = if roleid then
	JUMP TO BLOCK #54
	else
	JUMP TO BLOCK #56
	end


	--- BLOCK #54 335-340, warpins: 1 ---
	local role = map.findRole(map, roleid)

	--- END OF BLOCK #54 ---

	slot13 = if role then
	JUMP TO BLOCK #55
	else
	JUMP TO BLOCK #56
	end


	--- BLOCK #55 341-345, warpins: 1 ---
	role.selected(role)

	settingLogic.preSelect = role

	--- END OF BLOCK #55 ---

	FLOW; TARGET BLOCK #56


	--- BLOCK #56 346-350, warpins: 5 ---
	--- END OF BLOCK #56 ---

	if g_data.player.job == 0 then
	JUMP TO BLOCK #57
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #57 351-356, warpins: 1 ---
	--- END OF BLOCK #57 ---

	slot11 = if g_data.setting.job.autoFire then
	JUMP TO BLOCK #58
	else
	JUMP TO BLOCK #62
	end


	--- BLOCK #58 357-365, warpins: 1 ---
	--- END OF BLOCK #58 ---

	slot11 = if g_data.client:checkLastTime("fire", 11)

	 then
	JUMP TO BLOCK #59
	else
	JUMP TO BLOCK #62
	end


	--- BLOCK #59 366-373, warpins: 1 ---
	local data = g_data.player:getMagic(26)

	--- END OF BLOCK #59 ---

	slot11 = if data then
	JUMP TO BLOCK #60
	else
	JUMP TO BLOCK #62
	end


	--- BLOCK #60 374-386, warpins: 1 ---
	--- END OF BLOCK #60 ---

	if data.get(data, "needMp")
	 <= g_data.player.ability:get("MP")
	 then
	JUMP TO BLOCK #61
	else
	JUMP TO BLOCK #62
	end


	--- BLOCK #61 387-410, warpins: 1 ---
	g_data.client:setLastTime("fire", true)
	net.send({
		CM_SPELL,
		recog = target,
		param = player.x,
		tag = player.y,
		series = data.get(data, "magicId")
	})
	--- END OF BLOCK #61 ---

	FLOW; TARGET BLOCK #62


	--- BLOCK #62 411-416, warpins: 5 ---
	--- END OF BLOCK #62 ---

	slot11 = if g_data.setting.job.autoSword then
	JUMP TO BLOCK #63
	else
	JUMP TO BLOCK #67
	end


	--- BLOCK #63 417-425, warpins: 1 ---
	--- END OF BLOCK #63 ---

	slot11 = if g_data.client:checkLastTime("swordhit", 11)

	 then
	JUMP TO BLOCK #64
	else
	JUMP TO BLOCK #67
	end


	--- BLOCK #64 426-433, warpins: 1 ---
	local data = g_data.player:getMagic(58)

	--- END OF BLOCK #64 ---

	slot11 = if data then
	JUMP TO BLOCK #65
	else
	JUMP TO BLOCK #67
	end


	--- BLOCK #65 434-446, warpins: 1 ---
	--- END OF BLOCK #65 ---

	if data.get(data, "needMp")
	 <= g_data.player.ability:get("MP")
	 then
	JUMP TO BLOCK #66
	else
	JUMP TO BLOCK #67
	end


	--- BLOCK #66 447-470, warpins: 1 ---
	g_data.client:setLastTime("swordhit", true)
	net.send({
		CM_SPELL,
		recog = target,
		param = player.x,
		tag = player.y,
		series = data.get(data, "magicId")
	})

	--- END OF BLOCK #66 ---

	FLOW; TARGET BLOCK #67


	--- BLOCK #67 471-483, warpins: 5 ---
	local target = main_scene.ui.console.controller.lock.target.attack

	--- END OF BLOCK #67 ---

	slot12 = if g_data.setting.job.autoWide then
	JUMP TO BLOCK #68
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #68 484-492, warpins: 1 ---
	--- END OF BLOCK #68 ---

	slot12 = if g_data.client:checkLastTime("spell", 1)

	 then
	JUMP TO BLOCK #69
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #69 493-494, warpins: 1 ---
	--- END OF BLOCK #69 ---

	slot11 = if target then
	JUMP TO BLOCK #70
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #70 495-502, warpins: 1 ---
	local data = g_data.player:getMagic(25)
	--- END OF BLOCK #70 ---

	slot12 = if data then
	JUMP TO BLOCK #71
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #71 503-514, warpins: 1 ---
	local role = map.findRole(map, main_scene.ui.console.controller.lock.target.attack)

	--- END OF BLOCK #71 ---

	slot13 = if role then
	JUMP TO BLOCK #72
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #72 515-531, warpins: 1 ---
	--- END OF BLOCK #72 ---

	if math.max(math.abs(role.x - player.x), math.abs(role.y - player.y))

	 == 1 then
	JUMP TO BLOCK #73
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #73 532-545, warpins: 1 ---
	local open = false
	local dir = def.role.getMoveDir(player.x, player.y, role.x, role.y)
	local check = {
		-1,
		1,
		2
	}

	--- END OF BLOCK #73 ---

	for i, v in ipairs(check)


	LOOP BLOCK #74
	GO OUT TO BLOCK #88


	--- BLOCK #74 546-549, warpins: 1 ---
	local nearDir = dir + v
	--- END OF BLOCK #74 ---

	if nearDir < 0 then
	JUMP TO BLOCK #75
	else
	JUMP TO BLOCK #77
	end


	--- BLOCK #75 550-552, warpins: 1 ---
	--- END OF BLOCK #75 ---

	slot22 = if not (nearDir + 8) then
	JUMP TO BLOCK #76
	else
	JUMP TO BLOCK #77
	end


	--- BLOCK #76 552-552, warpins: 1 ---
	nearDir = nearDir
	--- END OF BLOCK #76 ---

	FLOW; TARGET BLOCK #77


	--- BLOCK #77 553-555, warpins: 3 ---
	--- END OF BLOCK #77 ---

	if 7 < nearDir then
	JUMP TO BLOCK #78
	else
	JUMP TO BLOCK #80
	end


	--- BLOCK #78 556-558, warpins: 1 ---
	--- END OF BLOCK #78 ---

	slot22 = if not (nearDir - 8) then
	JUMP TO BLOCK #79
	else
	JUMP TO BLOCK #80
	end


	--- BLOCK #79 558-558, warpins: 1 ---
	nearDir = nearDir
	--- END OF BLOCK #79 ---

	FLOW; TARGET BLOCK #80


	--- BLOCK #80 559-576, warpins: 3 ---
	local config = def.role.dir["_" .. nearDir]
	local role = map.findRoelWithPos(map, player.x + config[1], player.y + config[2])
	--- END OF BLOCK #80 ---

	slot14 = if role then
	JUMP TO BLOCK #81
	else
	JUMP TO BLOCK #85
	end


	--- BLOCK #81 577-579, warpins: 1 ---
	--- END OF BLOCK #81 ---

	slot25 = if not role.die then
	JUMP TO BLOCK #82
	else
	JUMP TO BLOCK #83
	end


	--- BLOCK #82 580-582, warpins: 1 ---
	--- END OF BLOCK #82 ---

	if role.__cname == "npc" then
	JUMP TO BLOCK #83
	else
	JUMP TO BLOCK #84
	end


	--- BLOCK #83 583-584, warpins: 2 ---
	open = false
	--- END OF BLOCK #83 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #85


	--- BLOCK #84 585-585, warpins: 1 ---
	open = true

	--- END OF BLOCK #84 ---

	FLOW; TARGET BLOCK #85


	--- BLOCK #85 586-587, warpins: 3 ---
	--- END OF BLOCK #85 ---

	slot14 = if open then
	JUMP TO BLOCK #86
	else
	JUMP TO BLOCK #87
	end


	--- BLOCK #86 588-588, warpins: 1 ---
	--- END OF BLOCK #86 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #88


	--- BLOCK #87 589-590, warpins: 2 ---
	--- END OF BLOCK #87 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #73


	--- BLOCK #88 591-598, warpins: 2 ---
	--- END OF BLOCK #88 ---

	if not open ~= not g_data.player.hitEnables.wide then
	JUMP TO BLOCK #89
	else
	JUMP TO BLOCK #90
	end


	--- BLOCK #89 599-621, warpins: 1 ---
	g_data.client:setLastTime("spell", true)
	net.send({
		CM_SPELL,
		recog = target,
		param = player.x,
		tag = player.y,
		series = data.get(data, "magicId")
	})

	--- END OF BLOCK #89 ---

	FLOW; TARGET BLOCK #90


	--- BLOCK #90 622-628, warpins: 9 ---
	--- END OF BLOCK #90 ---

	slot11 = if g_data.setting.job.autoSkill.enable then
	JUMP TO BLOCK #91
	else
	JUMP TO BLOCK #94
	end


	--- BLOCK #91 629-640, warpins: 1 ---
	local data = g_data.player:getMagic(g_data.setting.job.autoSkill.magicId)

	--- END OF BLOCK #91 ---

	slot11 = if data then
	JUMP TO BLOCK #92
	else
	JUMP TO BLOCK #94
	end


	--- BLOCK #92 641-653, warpins: 1 ---
	--- END OF BLOCK #92 ---

	slot12 = if g_data.client:checkLastTime("autoSkill", g_data.setting.job.autoSkill.space)
	 then
	JUMP TO BLOCK #93
	else
	JUMP TO BLOCK #94
	end


	--- BLOCK #93 654-674, warpins: 1 ---
	g_data.client:setLastTime("autoSkill", true)
	main_scene.ui.console.btnCallbacks:handle("skill", g_data.setting.job.autoSkill.magicId, data)

	--- END OF BLOCK #93 ---

	FLOW; TARGET BLOCK #94


	--- BLOCK #94 675-675, warpins: 4 ---
	--- END OF BLOCK #94 ---

	FLOW; TARGET BLOCK #95


	--- BLOCK #95 676-676, warpins: 3 ---
	return 
	--- END OF BLOCK #95 ---

	FLOW; TARGET BLOCK #96


	--- BLOCK #96 677-677, warpins: 2 ---
	--- END OF BLOCK #96 ---

	FLOW; TARGET BLOCK #97


	--- BLOCK #97 678-678, warpins: 2 ---
	--- END OF BLOCK #97 ---



end
settingLogic.missHp = function (value, isHp, isHero)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if value < 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-10, warpins: 1 ---
	local function useItem(data, objList)
		--- BLOCK #0 1-4, warpins: 1 ---
		local obj = nil
		--- END OF BLOCK #0 ---

		slot3 = if isHero then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-8, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot3 = if not g_data.heroBag then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 9-10, warpins: 2 ---
		local bag = g_data.bag

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 11-15, warpins: 2 ---
		--- END OF BLOCK #3 ---

		if type(objList)
		 == "table" then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #11
		end


		--- BLOCK #4 16-19, warpins: 1 ---
		--- END OF BLOCK #4 ---

		for i, v in ipairs(objList)


		LOOP BLOCK #5
		GO OUT TO BLOCK #8


		--- BLOCK #5 20-26, warpins: 1 ---
		local count = bag.getItemCount(bag, v)
		--- END OF BLOCK #5 ---

		if 0 < count then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #6 27-28, warpins: 1 ---
		obj = v
		--- END OF BLOCK #6 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #8


		--- BLOCK #7 29-30, warpins: 2 ---
		--- END OF BLOCK #7 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #8 31-32, warpins: 2 ---
		--- END OF BLOCK #8 ---

		slot2 = if not obj then
		JUMP TO BLOCK #9
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #9 33-33, warpins: 1 ---
		obj = ""
		--- END OF BLOCK #9 ---

		FLOW; TARGET BLOCK #10


		--- BLOCK #10 34-34, warpins: 2 ---
		--- END OF BLOCK #10 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #12


		--- BLOCK #11 35-35, warpins: 1 ---
		obj = objList
		--- END OF BLOCK #11 ---

		FLOW; TARGET BLOCK #12


		--- BLOCK #12 36-41, warpins: 2 ---
		local itemData, where = bag.getItemWithName(bag, obj)
		--- END OF BLOCK #12 ---

		if where == "quick" then
		JUMP TO BLOCK #13
		else
		JUMP TO BLOCK #14
		end


		--- BLOCK #13 42-42, warpins: 1 ---
		itemData = itemData.item
		--- END OF BLOCK #13 ---

		FLOW; TARGET BLOCK #14


		--- BLOCK #14 43-44, warpins: 2 ---
		--- END OF BLOCK #14 ---

		slot4 = if itemData then
		JUMP TO BLOCK #15
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #15 45-54, warpins: 1 ---
		slot7 = bag
		slot6 = bag.use
		slot8 = "eat"
		slot9 = itemData.get(itemData, "makeIndex")
		slot10 = {}
		--- END OF BLOCK #15 ---

		if where ~= "quick" then
		JUMP TO BLOCK #16
		else
		JUMP TO BLOCK #17
		end


		--- BLOCK #16 55-56, warpins: 1 ---
		slot11 = false
		--- END OF BLOCK #16 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #18


		--- BLOCK #17 57-57, warpins: 1 ---
		slot11 = true
		--- END OF BLOCK #17 ---

		FLOW; TARGET BLOCK #18


		--- BLOCK #18 58-61, warpins: 2 ---
		slot10.quick = slot11

		--- END OF BLOCK #18 ---

		slot6 = if slot6(slot7, slot8, slot9, slot10)

		 then
		JUMP TO BLOCK #19
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #19 62-71, warpins: 1 ---
		data.lastTime = socket.gettime()
		slot6 = net.send
		slot7 = {}
		--- END OF BLOCK #19 ---

		slot8 = if isHero then
		JUMP TO BLOCK #20
		else
		JUMP TO BLOCK #21
		end


		--- BLOCK #20 72-74, warpins: 1 ---
		--- END OF BLOCK #20 ---

		slot8 = if not CM_HERO_EAT then
		JUMP TO BLOCK #21
		else
		JUMP TO BLOCK #22
		end


		--- BLOCK #21 75-75, warpins: 2 ---
		slot8 = CM_EAT
		--- END OF BLOCK #21 ---

		FLOW; TARGET BLOCK #22


		--- BLOCK #22 76-89, warpins: 2 ---
		slot7[1] = slot8
		slot7.recog = itemData.get(itemData, "makeIndex")

		slot6(slot7, {
			itemData.getVar("name")
		})
		--- END OF BLOCK #22 ---

		if where == "bag" then
		JUMP TO BLOCK #23
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #23 90-92, warpins: 1 ---
		--- END OF BLOCK #23 ---

		slot6 = if isHero then
		JUMP TO BLOCK #24
		else
		JUMP TO BLOCK #26
		end


		--- BLOCK #24 93-98, warpins: 1 ---
		--- END OF BLOCK #24 ---

		slot6 = if main_scene.ui.panels.heroBag then
		JUMP TO BLOCK #25
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #25 99-110, warpins: 1 ---
		main_scene.ui.panels.heroBag:delItem(itemData.get(itemData, "makeIndex"))
		--- END OF BLOCK #25 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #28


		--- BLOCK #26 111-116, warpins: 1 ---
		--- END OF BLOCK #26 ---

		slot6 = if main_scene.ui.panels.bag then
		JUMP TO BLOCK #27
		else
		JUMP TO BLOCK #28
		end


		--- BLOCK #27 117-127, warpins: 1 ---
		main_scene.ui.panels.bag:delItem(itemData.get(itemData, "makeIndex"))

		--- END OF BLOCK #27 ---

		FLOW; TARGET BLOCK #28


		--- BLOCK #28 128-128, warpins: 7 ---
		return 
		--- END OF BLOCK #28 ---



	end

	local function check2(data, cur, objList)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot3 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #1 4-5, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot2 = if not objList then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 6-6, warpins: 1 ---
		objList = data.uses

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 7-9, warpins: 2 ---
		--- END OF BLOCK #3 ---

		if 10 <= cur then
		JUMP TO BLOCK #4
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #4 10-12, warpins: 1 ---
		--- END OF BLOCK #4 ---

		if data.value <= cur then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #5 13-15, warpins: 1 ---
		--- END OF BLOCK #5 ---

		slot3 = if data.lastTime then
		JUMP TO BLOCK #6
		else
		JUMP TO BLOCK #7
		end


		--- BLOCK #6 16-24, warpins: 1 ---
		--- END OF BLOCK #6 ---

		if data.space/1000 < socket.gettime()
		 - data.lastTime then
		JUMP TO BLOCK #7
		else
		JUMP TO BLOCK #10
		end


		--- BLOCK #7 25-29, warpins: 2 ---
		--- END OF BLOCK #7 ---

		if type(objList)
		 == "function" then
		JUMP TO BLOCK #8
		else
		JUMP TO BLOCK #9
		end


		--- BLOCK #8 30-32, warpins: 1 ---
		objList()
		--- END OF BLOCK #8 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #10


		--- BLOCK #9 33-36, warpins: 1 ---
		useItem(data, objList)

		--- END OF BLOCK #9 ---

		FLOW; TARGET BLOCK #10


		--- BLOCK #10 37-37, warpins: 6 ---
		return 
		--- END OF BLOCK #10 ---



	end

	local function smallExit(data, cur)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 4-6, warpins: 1 ---
		--- END OF BLOCK #1 ---

		if data.uses == "小退" then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 7-9, warpins: 1 ---
		local min = data.value

		--- END OF BLOCK #2 ---

		if cur <= min then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 10-13, warpins: 1 ---
		main_scene:smallExit()

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 14-14, warpins: 4 ---
		return 
		--- END OF BLOCK #4 ---



	end

	local function heroExit(data, cur)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if data.enable then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 4-9, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot2 = if main_scene.ground.player.hero then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 10-12, warpins: 1 ---
		local min = data.value

		--- END OF BLOCK #2 ---

		if cur <= min then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 13-24, warpins: 1 ---
		net.send({
			CM_HERO_LOGOUT,
			recog = main_scene.ground.player.hero.roleid
		})

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 25-25, warpins: 4 ---
		return 
		--- END OF BLOCK #4 ---



	end

	--- END OF BLOCK #2 ---

	slot2 = if isHero then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 11-12, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot1 = if isHp then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 13-28, warpins: 1 ---
	heroExit(g_data.setting.protected.hero.hp, g_data.hero.ability:get("HP") - value)
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #5 29-44, warpins: 1 ---
	heroExit(g_data.setting.protected.hero.mp, g_data.hero.ability:get("MP") - value)
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #6 45-46, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot1 = if isHp then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 47-62, warpins: 1 ---
	smallExit(g_data.setting.protected.role.hp, g_data.player.ability:get("HP") - value)
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #8 63-77, warpins: 1 ---
	smallExit(g_data.setting.protected.role.mp, g_data.player.ability:get("MP") - value)

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 78-79, warpins: 4 ---
	return 
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 80-80, warpins: 2 ---
	--- END OF BLOCK #10 ---



end
settingLogic.isRattingItem = function (itemName)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.setting.item.pickOnRatting then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if g_data.setting.item.filt[itemName] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-21, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot1 = if g_data.setting.item.filt[itemName].pickOnRatting then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-23, warpins: 3 ---
	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-24, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
settingLogic.isGoodItem = function (itemName)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.setting.item.hindGood then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if g_data.setting.item.filt[itemName] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-21, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot1 = if g_data.setting.item.filt[itemName].isGood then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-23, warpins: 3 ---
	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-24, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
settingLogic.showItemName = function (itemName)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.setting.item.showName then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if g_data.setting.item.filt[itemName] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-21, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot1 = if g_data.setting.item.filt[itemName].hintName then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-23, warpins: 3 ---
	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-24, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
settingLogic.isPickUp = function (itemName)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not g_data.setting.item.pickUp then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 7-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if g_data.setting.item.filt[itemName] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-21, warpins: 1 ---
	--- END OF BLOCK #2 ---

	slot1 = if g_data.setting.item.filt[itemName].pickUp then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 22-23, warpins: 3 ---
	return true
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 24-24, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
settingLogic.filterChat = function (text, ident, msg)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if SM_WHISPER == ident then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 4-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if g_data.setting.chat.whisperLimit ~= 0 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-16, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if msg.tag < g_data.setting.chat.whisperLimit then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 17-18, warpins: 2 ---
	return false
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 19-20, warpins: 3 ---
	return true
	--- END OF BLOCK #4 ---



end

return settingLogic
--- END OF BLOCK #0 ---



