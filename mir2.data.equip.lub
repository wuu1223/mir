--- BLOCK #0 1-35, warpins: 1 ---
local equip = {
	serverUnlockTime = 0,
	isHero = false,
	lockState = 0,
	lockTime = 180000
}
equip.items = {}
equip.takeOffing = {}
equip.set = function (self, buf, bufLen)
	--- BLOCK #0 1-4, warpins: 1 ---
	self.items = {}
	self.takeOffing = {}
	--- END OF BLOCK #0 ---

	FLOW; TARGET BLOCK #1


	--- BLOCK #1 5-7, warpins: 3 ---
	--- END OF BLOCK #1 ---

	if 0 < bufLen then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #2 8-8, warpins: 1 ---
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 9-31, warpins: 1 ---
	local equip = nil
	equip, buf, bufLen = net.record("TClientEquip", buf, bufLen)
	local index = equip.get(equip, "nPos")
	self.items[index] = equip.get(equip, "cliEquip")

	--- END OF BLOCK #3 ---

	slot5 = if self.isHero then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #1
	end


	--- BLOCK #4 32-39, warpins: 1 ---
	print(self.items[index].getVar("name"))

	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #5 40-40, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end
equip.upt = function (self, buf, bufLen)
	--- BLOCK #0 1-13, warpins: 1 ---
	local data = getRecord("TClientItem")

	net.record(data, buf, bufLen)
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 14-23, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "makeIndex")
	 == data.get(data, "makeIndex")
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 24-31, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v.getVar("name")
	 == data.getVar("name")
	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 32-46, warpins: 1 ---
	print("equip:upt ", v.getVar("name"))
	dump(data)

	self.items[k] = data

	return data.get(data, "makeIndex")
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 47-48, warpins: 4 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 49-49, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end
equip.isEquipped = function (self, equipName)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.getVar("name")

	 == equipName then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-11, warpins: 1 ---
	return true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 12-13, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 14-14, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
equip.checkEquips = function (self, equipTbl)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for _, equipName in ipairs(equipTbl)

	LOOP BLOCK #1
	GO OUT TO BLOCK #6


	--- BLOCK #1 5-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #2
	GO OUT TO BLOCK #5


	--- BLOCK #2 9-13, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v.getVar("name")

	 == equipName then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 14-16, warpins: 1 ---
	return true, v
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 17-18, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #5 19-20, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #6 21-21, warpins: 1 ---
	return 
	--- END OF BLOCK #6 ---



end
equip.checkAmulet = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	amuletNames = {
		"护身符",
		"护身符(大)",
		"超级护身符"
	}

	return self.checkEquips(self, amuletNames)
	--- END OF BLOCK #0 ---



end
equip.isBlurryEquipped = function (self, itemsName)
	--- BLOCK #0 1-6, warpins: 1 ---
	local names = {}

	--- END OF BLOCK #0 ---

	if type(itemsName)

	 == "string" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-8, warpins: 1 ---
	names[1] = itemsName

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #2 9-13, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if type(itemsName)

	 == "table" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 14-14, warpins: 1 ---
	names = itemsName

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 15-18, warpins: 3 ---
	--- END OF BLOCK #4 ---

	for i, name in ipairs(names)

	LOOP BLOCK #5
	GO OUT TO BLOCK #11


	--- BLOCK #5 19-23, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if type(name)
	 == "string" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #6 24-27, warpins: 1 ---
	--- END OF BLOCK #6 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #7
	GO OUT TO BLOCK #10


	--- BLOCK #7 28-36, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot13 = if string.find(v.getVar("name"), name)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 37-38, warpins: 1 ---
	return true
	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 39-40, warpins: 3 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #10 41-42, warpins: 3 ---
	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #11 43-43, warpins: 1 ---
	return 
	--- END OF BLOCK #11 ---



end
equip.duraChange = function (self, idx, dura, duraMax)
	--- BLOCK #0 1-7, warpins: 1 ---
	local item = self.items[tonumber(idx)]

	--- END OF BLOCK #0 ---

	slot4 = if item then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-17, warpins: 1 ---
	item.set(item, "dura", dura)
	item.set(item, "duraMax", duraMax)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 18-18, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
equip.getItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if makeIndex == v.get(v, "makeIndex")

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-13, warpins: 1 ---
	return k, v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 14-15, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 16-16, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
equip.delItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if tonumber(makeIndex)
	 == v.get(v, "makeIndex")

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-18, warpins: 1 ---
	self.items[k] = nil

	return true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 19-20, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 21-21, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
equip.setItem = function (self, where, item)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.items[tonumber(where)] = item

	return 
	--- END OF BLOCK #0 ---



end
equip.takeOff = function (self, makeIndex, params)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if self.takeOffing.item then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 5-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if socket.gettime()

	 - self.takeOffing.time < 5 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-14, warpins: 1 ---
	return 

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-18, warpins: 3 ---
	--- END OF BLOCK #3 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #4
	GO OUT TO BLOCK #7


	--- BLOCK #4 19-24, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if makeIndex == v.get(v, "makeIndex")

	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 25-38, warpins: 1 ---
	self.takeOffing.item = v
	self.takeOffing.time = socket.gettime()
	self.takeOffing.params = params
	self.items[k] = nil

	return true
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 39-40, warpins: 3 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #7 41-41, warpins: 1 ---
	return 
	--- END OF BLOCK #7 ---



end
equip.takeOffEnd = function (self, isSuccess)
	--- BLOCK #0 1-3, warpins: 1 ---
	local ret = nil

	--- END OF BLOCK #0 ---

	slot1 = if not isSuccess then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 4-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot3 = if self.takeOffing.item then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-22, warpins: 1 ---
	self.setItem(self, self.takeOffing.params.where, self.takeOffing.item)

	ret = self.takeOffing.item:get("makeIndex")
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 23-25, warpins: 3 ---
	self.takeOffing = {}

	return ret
	--- END OF BLOCK #3 ---



end
equip.setLock = function (self, key)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.lockState = key

	return 
	--- END OF BLOCK #0 ---



end
equip.setServerUnlockTime = function (self, time)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.serverUnlockTime = time

	return 
	--- END OF BLOCK #0 ---



end

return equip
--- END OF BLOCK #0 ---



