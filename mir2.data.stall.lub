--- BLOCK #0 1-27, warpins: 1 ---
local stall = {
	isOther = false,
	name = "",
	time = 0,
	state = 0,
	id = 0,
	allTm = 0,
	level = 0,
	msgCnt = 0
}
stall.items = {}
stall.set = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-16, warpins: 1 ---
	self.items = {}
	local head = nil
	head, buf, bufLen = net.record("TStallHeadInfo", buf, bufLen)
	--- END OF BLOCK #0 ---

	for i=1, head.cnt, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 17-32, warpins: 2 ---
	local item = nil
	item, buf, bufLen = net.record("TStallBodyInfo", buf, bufLen)
	self.items[#self.items + 1] = item
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 33-36, warpins: 1 ---
	--- END OF BLOCK #2 ---

	for i=1, head.cnt, 1
	LOOP BLOCK #3
	GO OUT TO BLOCK #4

	--- BLOCK #3 37-48, warpins: 2 ---
	self.items[i].info, buf, bufLen = net.record("TClientItem", buf, bufLen)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #4 49-63, warpins: 1 ---
	self.state = head.state
	self.level = head.level
	self.name = head.name
	self.msgCnt = head.msgCnt

	self.setTime(self, head.time)

	self.id = head.id

	return 
	--- END OF BLOCK #4 ---



end
stall.uptAddItem = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-29, warpins: 1 ---
	local item = nil
	item, buf, bufLen = net.record("TStallBodyInfo", buf, bufLen)
	item.info, buf, bufLen = net.record("TClientItem", buf, bufLen)

	local function addItem(item)
		--- BLOCK #0 1-6, warpins: 1 ---
		--- END OF BLOCK #0 ---

		for i=1, self.level*5, 1
		LOOP BLOCK #1
		GO OUT TO BLOCK #4

		--- BLOCK #1 7-11, warpins: 2 ---
		--- END OF BLOCK #1 ---

		slot5 = if not self.items[i] then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #3
		end


		--- BLOCK #2 12-15, warpins: 1 ---
		self.items[i] = item

		return i
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 16-16, warpins: 2 ---
		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #0


		--- BLOCK #4 17-17, warpins: 1 ---
		return 
		--- END OF BLOCK #4 ---



	end

	addItem(item)

	return item.info:get("makeIndex")
	--- END OF BLOCK #0 ---



end
stall.uptDelItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.info:get("makeIndex")
	 == tonumber(makeIndex)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-20, warpins: 1 ---
	self.items[k] = nil

	return k, v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 21-22, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 23-23, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
stall.getItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in ipairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.info:get("makeIndex")
	 == tonumber(makeIndex)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-17, warpins: 1 ---
	return k, v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 18-19, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 20-20, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
stall.setLevel = function (self, level)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.level = level

	return 
	--- END OF BLOCK #0 ---



end
stall.setAllTm = function (self, time)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.allTm = time

	return 
	--- END OF BLOCK #0 ---



end
stall.setName = function (self, name)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.name = name

	return 
	--- END OF BLOCK #0 ---



end
stall.setTime = function (self, time)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.handle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-9, warpins: 1 ---
	scheduler.unscheduleGlobal(self.handle)

	self.handle = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-14, warpins: 2 ---
	self.time = time
	--- END OF BLOCK #2 ---

	if 0 < self.time then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 15-20, warpins: 1 ---
	self.handle = scheduler.scheduleGlobal(function ()
		--- BLOCK #0 1-5, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if 0 < self.time then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 6-11, warpins: 1 ---
		self.time = self.time - 1

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 12-19, warpins: 1 ---
		scheduler.unscheduleGlobal(self.handle)

		self.handle = nil

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 20-20, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end, 1)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 21-22, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
stall.start = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if self.state == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-8, warpins: 1 ---
	self.setTime(self, self.allTm*3600)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-11, warpins: 2 ---
	self.state = 1

	return 
	--- END OF BLOCK #2 ---



end
stall.pause = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.state = 2

	return 
	--- END OF BLOCK #0 ---



end
stall.cleanup = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.handle then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-9, warpins: 1 ---
	scheduler.unscheduleGlobal(self.handle)

	self.handle = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-10, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end

return stall
--- END OF BLOCK #0 ---



