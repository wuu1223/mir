--- BLOCK #0 1-35, warpins: 1 ---
local cls = class("loginer")
cls.ctor = function (self, uuid)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.ip = nil
	self.host = nil
	self.uuid = uuid

	return 
	--- END OF BLOCK #0 ---



end
cls._getXhr = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.xhr then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-9, warpins: 1 ---
	self.xhr:release()

	self.xhr = nil
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-26, warpins: 2 ---
	local xhr = cc.XMLHttpRequest:new()

	xhr.registerScriptHandler(xhr, handler(self, self.onReadyStateChange))
	xhr.retain(xhr)

	self.xhr = xhr

	return xhr
	--- END OF BLOCK #2 ---



end
cls.destroy = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.xhr then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-9, warpins: 1 ---
	self.xhr:release()

	self.xhr = nil

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-10, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
cls.selectServer = function (self, ip, port)
	--- BLOCK #0 1-10, warpins: 1 ---
	self.ip = ip
	self.port = port
	local url = string.format("http://%s:%s/", ip, port)
	self.serverUrl = url

	return 
	--- END OF BLOCK #0 ---



end
cls.genUrl = function (self, operator, data)
	--- BLOCK #0 1-7, warpins: 1 ---
	local url = self.serverUrl .. operator
	local s = "?"
	slot5 = pairs
	--- END OF BLOCK #0 ---

	slot6 = if not data then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-8, warpins: 1 ---
	slot6 = {}

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-10, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for k, v in slot5(slot6)


	LOOP BLOCK #3
	GO OUT TO BLOCK #5


	--- BLOCK #3 11-22, warpins: 1 ---
	url = string.format("%s%s%s", url, s, k .. "=" .. v)
	s = "&"

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 23-24, warpins: 2 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #5 25-25, warpins: 1 ---
	return url
	--- END OF BLOCK #5 ---



end
cls.send_ = function (self, op, params, reqfunc)
	--- BLOCK #0 1-8, warpins: 1 ---
	local xhr = self._getXhr(self)
	xhr.responseType = cc.XMLHTTPREQUEST_RESPONSE_STRING
	--- END OF BLOCK #0 ---

	slot3 = if not reqfunc then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 9-9, warpins: 1 ---
	reqfunc = "GET"
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-12, warpins: 2 ---
	local url, body = nil
	--- END OF BLOCK #2 ---

	if reqfunc == "GET" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 13-19, warpins: 1 ---
	url = self.genUrl(self, op, params)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 20-24, warpins: 1 ---
	url = self.genUrl(self, op)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-38, warpins: 2 ---
	print(url)

	local req = network.createHTTPRequest(handler(self, self.onRequestEvent), url, reqfunc)

	--- END OF BLOCK #5 ---

	if reqfunc == "POST" then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #6 39-42, warpins: 1 ---
	--- END OF BLOCK #6 ---

	for k, v in pairs(params)

	LOOP BLOCK #7
	GO OUT TO BLOCK #9


	--- BLOCK #7 43-47, warpins: 1 ---
	req.addPOSTValue(req, k, v)
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 48-49, warpins: 2 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #9 50-59, warpins: 2 ---
	print("#####################")
	print(reqfunc)
	req.start(req)

	return 
	--- END OF BLOCK #9 ---



end
cls.send = function (self, op, params, reqfunc, ex)
	--- BLOCK #0 1-6, warpins: 1 ---
	print(ex)

	--- END OF BLOCK #0 ---

	slot5 = if self.sending then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-7, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-22, warpins: 2 ---
	self.retry = 3

	self.send_(self, op, params, reqfunc)

	self.sending = {
		op,
		params,
		reqfunc,
		ex
	}

	return 
	--- END OF BLOCK #2 ---



end
cls.onRequestEvent = function (self, event)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if event.name ~= "completed" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 6-6, warpins: 1 ---
	local ok = true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 7-10, warpins: 2 ---
	local request = event.request

	--- END OF BLOCK #3 ---

	if event.name == "progress" then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 11-11, warpins: 1 ---
	return 

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 12-17, warpins: 1 ---
	print("onRequestEvent", event.name)

	--- END OF BLOCK #5 ---

	slot4 = if ok then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 18-20, warpins: 1 ---
	local code = request.getResponseStatusCode(request)
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 21-22, warpins: 2 ---
	--- END OF BLOCK #7 ---

	slot2 = if ok then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #8 23-25, warpins: 1 ---
	--- END OF BLOCK #8 ---

	if 200 <= code then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #9 26-28, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if code <= 300 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #10 29-44, warpins: 1 ---
	local response = request.getResponseString(request)

	print(response)
	print("response:\n", response)

	local r = json.decode(response)

	--- END OF BLOCK #10 ---

	slot6 = if r then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 45-57, warpins: 1 ---
	dump(self.sending[4])
	self.onEvt(self, r.code, r.des, r, self.sending[4])
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #12 58-61, warpins: 1 ---
	print("decode faild!")
	--- END OF BLOCK #12 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #13 62-65, warpins: 3 ---
	--- END OF BLOCK #13 ---

	if 0 < self.retry then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 66-86, warpins: 1 ---
	print("network error", code)

	self.retry = self.retry - 1

	scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-9, warpins: 1 ---
		self:send_(unpack(self.sending))

		return 
		--- END OF BLOCK #0 ---



	end, math.pow(1.4, self.retry - 3)*0.5)

	return 

	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #15 87-95, warpins: 1 ---
	self.onEvt(self, request.getErrorCode(request), request.getErrorMessage(request))

	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 96-99, warpins: 4 ---
	self.sending = false

	return 
	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 100-100, warpins: 2 ---
	--- END OF BLOCK #17 ---



end
cls.bind = function (self, acc, psw, code)
	--- BLOCK #0 1-11, warpins: 1 ---
	self.send(self, "bind", {
		id = acc,
		psw = psw,
		safecode = code,
		machineid = self.uuid
	})

	return 
	--- END OF BLOCK #0 ---



end
cls.register = function (self, acc, psw, safecode)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.send(self, "reg", {
		id = acc,
		psw = psw,
		safecode = safecode
	})

	return 
	--- END OF BLOCK #0 ---



end
cls.chgPsw = function (self, acc, psw, safecode)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.send(self, "modifypsw", {
		id = acc,
		psw = psw,
		safecode = safecode
	})

	return 
	--- END OF BLOCK #0 ---



end
cls.login = function (self, acc, psw, guest)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if guest then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-14, warpins: 1 ---
	print("guest", self.uuid)
	self.send(self, "account", {
		guest = 1,
		id = self.uuid
	})
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 15-25, warpins: 1 ---
	print(id, psw)
	self.send(self, "account", {
		id = acc,
		psw = psw
	})

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 26-26, warpins: 2 ---
	return 
	--- END OF BLOCK #3 ---



end
cls.verifyReceipt = function (self, gameorderid, productid, iosreceipt, extend, transaction_id, identify)
	--- BLOCK #0 1-17, warpins: 1 ---
	print("verifyReceipt", identify)
	self.send(self, "paycb", {
		productid = productid,
		gameorderid = gameorderid,
		iosreceipt = iosreceipt,
		extend = extend,
		tid = transaction_id
	}, "POST", identify)

	return 
	--- END OF BLOCK #0 ---



end
cls.setEvtListener = function (self, obj)
	--- BLOCK #0 1-4, warpins: 1 ---
	slot2 = print
	slot3 = "setEvtListener"
	--- END OF BLOCK #0 ---

	slot4 = if obj then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-5, warpins: 1 ---
	slot4 = obj.onCetSvrEvt

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-10, warpins: 2 ---
	slot2(slot3, slot4)

	self.evtListener = obj
	slot2 = assert
	--- END OF BLOCK #2 ---

	slot3 = if obj then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 11-11, warpins: 1 ---
	slot3 = obj.onCetSvrEvt

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 12-14, warpins: 2 ---
	slot2(slot3, "should imp onLoginEvt")

	return 
	--- END OF BLOCK #4 ---



end
cls.onEvt = function (self, code, desc, res, ex)
	--- BLOCK #0 1-7, warpins: 1 ---
	print("onEvt", self.evtListener)

	--- END OF BLOCK #0 ---

	slot5 = if self.evtListener then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-15, warpins: 1 ---
	local evtListener = self.evtListener

	evtListener.onCetSvrEvt(evtListener, code, desc, res, ex)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-16, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end

return cls
--- END OF BLOCK #0 ---



