--- BLOCK #0 1-63, warpins: 1 ---
local item = import("..common.item")
local common = import("..common.common")
local storage = class("storage", function ()
	--- BLOCK #0 1-3, warpins: 1 ---
	return display.newNode()
	--- END OF BLOCK #0 ---



end)

table.merge(storage, {
	merchant,
	quick,
	tabs,
	currentTab,
	gridCnt,
	gridMax
})

storage.ctor = function (self, merchant, count, gridCnt, buf, bufLen)
	--- BLOCK #0 1-250, warpins: 1 ---
	self._scale = self.getScale(self)
	self._supportMove = true

	self.setNodeEventEnabled(self, true)

	self.merchant = merchant
	self.quick = false
	self.gridMax = 48
	local bg = res.get2("pic/panels/bag/bg.png"):anchor(0, 0):addto(self, 1)

	self.anchor(self, 1, 1):pos(display.cx + 5, display.height - 50):size(cc.size(bg.getContentSize(bg).width, bg.getContentSize(bg).height)):scale(1)
	res.get2("pic/panels/storage/title.png"):add2(bg):pos(bg.getw(bg)/2, bg.geth(bg) - 22)
	an.newBtn(res.gettex2("pic/common/close10.png"), function ()
		--- BLOCK #0 1-9, warpins: 1 ---
		sound.playSound("103")
		self:hidePanel()

		return 
		--- END OF BLOCK #0 ---



	end, {
		pressImage = res.gettex2("pic/common/close11.png"),
		size = cc.size(64, 64)
	}):anchor(1, 1):pos(bg.getw(bg) - 12, bg.geth(bg) - 9):addto(self, 2)
	an.newBtn(res.gettex2("pic/common/btn10.png"), function ()
		--- BLOCK #0 1-6, warpins: 1 ---
		self.quick = not self.quick

		return 
		--- END OF BLOCK #0 ---



	end, {
		manual = true,
		sprite = res.gettex2("pic/panels/storage/quick.png"),
		select = {
			res.gettex2("pic/common/btn11.png")
		}
	}):addTo(self, 2):pos(20, 36):anchor(0, 0.5)
	an.newBtn(res.gettex2("pic/common/btn70.png"), function ()
		--- BLOCK #0 1-9, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if g_data.client:checkLastTime("orderStorage", 1)
		 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 10-25, warpins: 1 ---
		g_data.client:setLastTime("orderStorage", true)
		self:copybak()
		self:reload()
		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 26-31, warpins: 1 ---
		main_scene.ui:tip("你整理的太快了。")

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 32-32, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end, {
		pressImage = res.gettex2("pic/common/btn71.png"),
		sprite = res.gettex2("pic/panels/storage/sort.png")
	}):pos(310, 36):add2(self, 2)

	local scaleBtn = nil
	scaleBtn = an.newBtn(res.gettex2("pic/common/scaleBig20.png"), function ()
		--- BLOCK #0 1-16, warpins: 1 ---
		sound.playSound("103")
		self:stopAllActions()

		local scale = self:getScale() + 0.1
		--- END OF BLOCK #0 ---

		if 1.6 < scale then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 17-17, warpins: 1 ---
		scale = 1
		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 18-47, warpins: 2 ---
		self._scale = scale

		self:scaleTo(0.3, scale)
		g_data.client:setLastScale("storage", scale)
		scaleBtn.label:setString("x" .. string.format("%01d", (scale - 1)*10 + 1))

		return 
		--- END OF BLOCK #2 ---



	end, {
		pressImage = res.gettex2("pic/common/scaleBig21.png"),
		label = {
			"x" .. string.format("%01d", (self.getScale(self) - 1)*10 + 1),
			20,
			1,
			{
				color = def.colors.btn40
			}
		}
	}):pos(385, 32):add2(self, 2)

	scaleBtn.label:pos(68, 30)

	self.gridCnt = gridCnt
	self.items = {}
	self.itemDatas = {}
	self.itemDatasBak = {}
	--- END OF BLOCK #0 ---

	for i=1, count, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 251-269, warpins: 2 ---
	local item = nil
	item, buf, bufLen = net.record("TClientItem", buf, bufLen)
	self.itemDatasBak[#self.itemDatasBak + 1] = item

	self.copybak(self)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 270-292, warpins: 1 ---
	local sprs = {
		"pic/panels/storage/tab_one.png",
		"pic/panels/storage/tab_two.png",
		"pic/panels/storage/tab_three.png",
		"pic/panels/storage/tab_four.png"
	}
	self.tabs = common.tabs(self, {
		oy = 10,
		sprs = sprs
	}, function (idx, btn)
		--- BLOCK #0 1-7, warpins: 1 ---
		self.currentTab = idx

		self:reload()

		return 
		--- END OF BLOCK #0 ---



	end, {
		tabTp = 1,
		pos = {
			x = 5,
			offset = 70,
			y = 365,
			anchor = cc.p(1, 1)
		}
	})
	--- END OF BLOCK #2 ---

	slot9 = if main_scene.ground.player then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 293-302, warpins: 1 ---
	self.x = main_scene.ground.player.x
	self.y = main_scene.ground.player.y

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 303-332, warpins: 2 ---
	main_scene.ui:hidePanel("npc")
	main_scene.ui:showPanel("bag")
	main_scene.ui.panels.bag:resetPanelPosition("storage")
	main_scene.ui.panels.bag:setScaleMul(1)

	return 
	--- END OF BLOCK #4 ---



end
storage.copybak = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.itemDatas = {}

	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.itemDatasBak)


	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 7-8, warpins: 1 ---
	self.itemDatas[i] = v

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-10, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 11-11, warpins: 1 ---
	return 
	--- END OF BLOCK #3 ---



end
storage.onCleanup = function (self)
	--- BLOCK #0 1-6, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if main_scene.ui.panels.bag then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 7-14, warpins: 1 ---
	main_scene.ui.panels.bag:resetPanelPosition("left")

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 15-15, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
storage.reload = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 5-7, warpins: 1 ---
	v.removeSelf(v)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-9, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 10-15, warpins: 1 ---
	self.items = {}
	--- END OF BLOCK #3 ---

	for i=1, self.gridMax, 1
	LOOP BLOCK #4
	GO OUT TO BLOCK #9

	--- BLOCK #4 16-30, warpins: 2 ---
	local idx = i + (self.currentTab - 1)*self.gridMax
	local x, y = self.idx2pos(self, idx)

	--- END OF BLOCK #4 ---

	slot8 = if self.gridIsOpen(self, idx)
	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #5 31-48, warpins: 1 ---
	res.get2("pic/common/grid.png"):addTo(self, 2):pos(x, y)

	local v = self.itemDatas[idx]
	--- END OF BLOCK #5 ---

	slot8 = if v then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 49-68, warpins: 1 ---
	self.items[i] = item.new(v, self, {
		idx = idx
	}):addto(self, 2):pos(x, y)
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 69-105, warpins: 1 ---
	local item = res.get2("pic/panels/storage/icon_lock_bg.png"):addto(self, 2):pos(x, y)

	res.get2("pic/common/lock.png"):addto(item):pos(item.getw(item)/2, item.geth(item)/2)

	item.block = true
	self.items[i] = item

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 106-106, warpins: 3 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #9 107-107, warpins: 1 ---
	return 
	--- END OF BLOCK #9 ---



end
storage.idx2pos = function (self, idx)
	--- BLOCK #0 1-16, warpins: 1 ---
	local newIdx = idx - 1 - (self.currentTab - 1)*self.gridMax
	local h = newIdx%8
	local v = math.modf(newIdx/8)

	return h*46.5 + 48, v*46.5 - 321
	--- END OF BLOCK #0 ---



end
storage.pos2idx = function (self, x, y)
	--- BLOCK #0 1-9, warpins: 1 ---
	local h = (x - 48)/46.5 + 0.5
	local v = (y - 321)/46.5 + 0.5

	--- END OF BLOCK #0 ---

	if 0 < h then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 10-12, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if h < 8 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #2 13-15, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if 0 < v then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #3 16-18, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v < 6 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 19-35, warpins: 1 ---
	return math.floor(v)*8 + math.floor(h) + 1 + (self.currentTab - 1)*self.gridMax
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 36-37, warpins: 5 ---
	return -1
	--- END OF BLOCK #5 ---



end
storage.gridIsOpen = function (self, idx)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if idx > self.gridCnt then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 6-6, warpins: 1 ---
	local open = true

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 7-7, warpins: 2 ---
	return open
	--- END OF BLOCK #3 ---



end
storage.addItem = function (self, data)
	--- BLOCK #0 1-11, warpins: 1 ---
	self.itemDatasBak[#self.itemDatasBak + 1] = data

	local function add(idx)
		--- BLOCK #0 1-14, warpins: 1 ---
		self.itemDatas[idx] = data
		local belongTab = math.ceil(idx/self.gridMax)

		--- END OF BLOCK #0 ---

		if belongTab ~= self.currentTab then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 15-20, warpins: 1 ---
		self.tabs.click(belongTab)

		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #3


		--- BLOCK #2 21-48, warpins: 1 ---
		local itemidx = (idx - 1)%self.gridMax + 1
		self.items[itemidx] = item.new(data, self, {
			idx = idx
		}):addto(self, 2):pos(self:idx2pos(idx))

		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 49-49, warpins: 2 ---
		return 
		--- END OF BLOCK #3 ---



	end

	--- END OF BLOCK #0 ---

	for i=1, self.gridMax*4, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #4

	--- BLOCK #1 12-15, warpins: 2 ---
	--- END OF BLOCK #1 ---

	slot7 = if not self.itemDatas[i] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 16-19, warpins: 1 ---
	add(i)

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 20-20, warpins: 1 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 21-22, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
storage.delItem = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-14, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.data:get("makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 15-23, warpins: 1 ---
	self.items[k]:removeSelf()

	self.items[k] = nil

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 24-25, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 26-26, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
storage.findItem = function (self, idx)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.items)


	LOOP BLOCK #1
	GO OUT TO BLOCK #5


	--- BLOCK #1 5-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot7 = if not v.block then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 8-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if idx == v.params.idx then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-12, warpins: 1 ---
	return v
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 13-14, warpins: 4 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 15-15, warpins: 1 ---
	return 
	--- END OF BLOCK #5 ---



end
storage.delItemData = function (self, makeIndex)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.itemDatas)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "makeIndex")
	 == tonumber(makeIndex)

	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-17, warpins: 1 ---
	self.itemDatas[k] = nil

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 18-19, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 20-23, warpins: 2 ---
	--- END OF BLOCK #4 ---

	for i, v in ipairs(self.itemDatasBak)

	LOOP BLOCK #5
	GO OUT TO BLOCK #8


	--- BLOCK #5 24-32, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if v.get(v, "makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 33-38, warpins: 1 ---
	table.remove(self.itemDatasBak, i)

	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 39-40, warpins: 2 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #8 41-41, warpins: 2 ---
	return 
	--- END OF BLOCK #8 ---



end
storage.changePos = function (self, idx1, idx2)
	--- BLOCK #0 1-9, warpins: 1 ---
	self.itemDatas[idx2] = self.itemDatas[idx1]
	self.itemDatas[idx1] = self.itemDatas[idx2]

	return 
	--- END OF BLOCK #0 ---



end
storage.duraChange = function (self, makeIndex, dura, duraMax, price)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.itemDatas)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-13, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 14-24, warpins: 1 ---
	v.set(v, "dura", dura)
	v.set(v, "duraMax", duraMax)
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 25-26, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 27-30, warpins: 2 ---
	--- END OF BLOCK #4 ---

	for k, v in ipairs(self.itemDatasBak)

	LOOP BLOCK #5
	GO OUT TO BLOCK #8


	--- BLOCK #5 31-39, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if v.get(v, "makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 40-50, warpins: 1 ---
	v.set(v, "dura", dura)
	v.set(v, "duraMax", duraMax)
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #7 51-52, warpins: 2 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #8 53-56, warpins: 2 ---
	--- END OF BLOCK #8 ---

	for k, v in pairs(self.items)

	LOOP BLOCK #9
	GO OUT TO BLOCK #12


	--- BLOCK #9 57-66, warpins: 1 ---
	--- END OF BLOCK #9 ---

	if v.data:get("makeIndex")
	 == tonumber(makeIndex)
	 then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 67-70, warpins: 1 ---
	v.duraChange(v)

	--- END OF BLOCK #10 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #11 71-72, warpins: 2 ---
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #8


	--- BLOCK #12 73-73, warpins: 2 ---
	return 
	--- END OF BLOCK #12 ---



end
storage.putInItem = function (self, item)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not g_data.client.storageItem then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 6-12, warpins: 1 ---
	local data = item.data

	--- END OF BLOCK #1 ---

	slot3 = if main_scene.ui.panels.bag then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 13-23, warpins: 1 ---
	main_scene.ui.panels.bag:delItem(data.get(data, "makeIndex"))
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 24-63, warpins: 2 ---
	g_data.bag:delItem(data.get(data, "makeIndex"))
	g_data.client:setStorageItem(data)

	local makeIndex = data.get(data, "makeIndex")

	net.send({
		CM_USERSTORAGEITEM,
		recog = self.merchant,
		param = Loword(makeIndex),
		tag = Hiword(makeIndex)
	}, {
		data.getVar("name")
	})

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 64-64, warpins: 2 ---
	return 
	--- END OF BLOCK #4 ---



end
storage.getBackItem = function (self, item)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not g_data.client.storageGetBackItem then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-51, warpins: 1 ---
	local data = item.data

	self.delItem(self, data.get(data, "makeIndex"))
	self.delItemData(self, data.get(data, "makeIndex"))
	g_data.client:setStorageGetBackItem(data)

	local makeIndex = data.get(data, "makeIndex")
	local name = data.getVar("name")

	net.send({
		CM_USERTAKEBACKSTORAGEITEM,
		recog = self.merchant,
		param = Loword(makeIndex),
		tag = Hiword(makeIndex)
	}, {
		name
	})

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 52-52, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
storage.putItem = function (self, item, x, y)
	--- BLOCK #0 1-4, warpins: 1 ---
	local form = item.formPanel.__cname

	--- END OF BLOCK #0 ---

	if form == "bag" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	self.putInItem(self, item)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #18


	--- BLOCK #2 10-11, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if form == "storage" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #18
	end


	--- BLOCK #3 12-24, warpins: 1 ---
	local putIdx = self.pos2idx(self, x/self.getScale(self), y/self.getScale(self))

	--- END OF BLOCK #3 ---

	if putIdx ~= -1 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 25-28, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if item.params.idx ~= putIdx then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 29-32, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if self.gridMax*4 < putIdx then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 33-33, warpins: 3 ---
	return 

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 34-39, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot6 = if not self.gridIsOpen(self, putIdx)

	 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 40-40, warpins: 1 ---
	return 

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 41-53, warpins: 1 ---
	local srcIdx = item.params.idx

	local function canPileUp(data1, data2)
		--- BLOCK #0 1-2, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if data1 then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #1 3-4, warpins: 1 ---
		--- END OF BLOCK #1 ---

		slot1 = if data2 then
		JUMP TO BLOCK #2
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #2 5-9, warpins: 1 ---
		--- END OF BLOCK #2 ---

		slot2 = if data1.isCanPileUp(data2)

		 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 10-11, warpins: 1 ---
		return true
		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 12-13, warpins: 4 ---
		return false
		--- END OF BLOCK #4 ---



	end

	local srcItem = self.findItem(self, srcIdx)
	local putItem = self.findItem(self, putIdx)

	--- END OF BLOCK #9 ---

	slot9 = if putItem then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #10 54-59, warpins: 1 ---
	--- END OF BLOCK #10 ---

	slot10 = if canPileUp(srcItem.data, putItem.data)

	 then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #14
	end


	--- BLOCK #11 60-70, warpins: 1 ---
	local item1 = putItem.data
	local makeIndex2 = srcItem.data:get("makeIndex")

	--- END OF BLOCK #11 ---

	slot12 = if item1.isNeedResetPos(srcItem.data)
	 then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 71-84, warpins: 1 ---
	putItem.pos(putItem, self.idx2pos(self, putIdx))
	srcItem.pos(srcItem, self.idx2pos(self, srcIdx))
	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 85-110, warpins: 2 ---
	net.send({
		CM_PILEUPITEM,
		series = 0,
		recog = item1.get(item1, "makeIndex"),
		param = Loword(makeIndex2),
		tag = Hiword(makeIndex2)
	})
	g_data.player:setIsinPileUping(true)

	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #14 111-121, warpins: 2 ---
	item.params.idx = putIdx

	item.pos(item, self.idx2pos(self, putIdx))

	--- END OF BLOCK #14 ---

	slot9 = if putItem then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 122-130, warpins: 1 ---
	putItem.params.idx = srcIdx

	putItem.pos(putItem, self.idx2pos(self, srcIdx))

	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 131-147, warpins: 2 ---
	putIdx = (putIdx - 1)%self.gridMax + 1
	srcIdx = (srcIdx - 1)%self.gridMax + 1
	self.items[putIdx] = srcItem
	self.items[srcIdx] = putItem

	self.changePos(self, srcIdx, putIdx)

	--- END OF BLOCK #16 ---

	FLOW; TARGET BLOCK #17


	--- BLOCK #17 148-150, warpins: 2 ---
	return true
	--- END OF BLOCK #17 ---

	FLOW; TARGET BLOCK #18


	--- BLOCK #18 151-151, warpins: 3 ---
	return 
	--- END OF BLOCK #18 ---

	FLOW; TARGET BLOCK #19


	--- BLOCK #19 152-152, warpins: 2 ---
	--- END OF BLOCK #19 ---

	FLOW; TARGET BLOCK #20


	--- BLOCK #20 153-153, warpins: 2 ---
	--- END OF BLOCK #20 ---



end
storage.splitNemItem = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if 0 < bufLen then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-17, warpins: 1 ---
	local item = nil
	item, buf, bufLen = net.record("TClientItem", buf, bufLen)

	self.addItem(self, item)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 18-18, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end

return storage
--- END OF BLOCK #0 ---



