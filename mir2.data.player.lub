--- BLOCK #0 1-237, warpins: 1 ---
local player = {
	isTeamLeader = false,
	stamina = 0,
	staminaMax = 0,
	expPoolValue = 0,
	gold = 0,
	IsSplliteItem = false,
	inPileUping = false,
	job = 0,
	initedAbility = false,
	vitality = 0,
	groupEnable = false,
	sex = 0,
	vitaliyitemValue = 0,
	attackMode = "",
	vitalityMax = 0,
	roleid = 0
}
player.goldNum = {
	point = 0,
	diamond = 0,
	limtGird = 0,
	gird = 0,
	gold = 0,
	silver = 0,
	silverExp = 0
}
player.goldName = {
	point = "",
	diamond = "",
	limtGird = "",
	gird = "",
	gold = "",
	silver = "",
	silverExp = ""
}
player.ability = getRecord("TAbility")
player.ability2 = getRecord("TSub2Ability")
player.ability3 = getRecord("TSub3Ability")
player.magicList = {}
player.hitEnables = {
	long = false
}
player.groupMembers = {}
player.nearMemInfo = {}
player.nearGroupInfo = {}
player.guild = {
	isAllowAlly = false,
	memberShowType = false,
	curIndex = 0,
	focusVer = 0,
	allyVer = 0,
	rankName = "",
	isLastAllyPage = false,
	isGetRelationShipInfo = false,
	recruitGuildInfo = "",
	recvAllyVer = 0,
	guildRight = 0,
	heroTeamMember = 0,
	killVer = 0,
	hasGuild = false,
	guildName = "",
	log = {},
	relationShip = {},
	hasAllyList = {}
}
player.slaves = {}
player.setIsSplliting = function (self, inSplliting)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.IsSplliteItem = inSplliting

	return 
	--- END OF BLOCK #0 ---



end
player.setIsinPileUping = function (self, isinPileUping)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.inPileUping = isinPileUping

	return 
	--- END OF BLOCK #0 ---



end
player.setRoleID = function (self, roleid)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.roleid = roleid

	return 
	--- END OF BLOCK #0 ---



end
player.setIdentify = function (self, identify)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.identify = identify

	return 
	--- END OF BLOCK #0 ---



end
player.setSex = function (self, sex)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.sex = sex

	return 
	--- END OF BLOCK #0 ---



end
player.setWineExp = function (self, cur, next)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.wineCurExp = cur
	self.wineNextExp = next

	return 
	--- END OF BLOCK #0 ---



end
player.setdrinkDrugStatus = function (self, cur, next)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.drinkDrugStatusValue = cur
	self.drinkDrugStatusValueNext = next

	return 
	--- END OF BLOCK #0 ---



end
player.setdrinkStatus = function (self, cur, next)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.drinkStatusValue = cur
	self.drinkStatusMaxValue = next

	return 
	--- END OF BLOCK #0 ---



end
player.setGold = function (self, gold)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.gold = gold

	return 
	--- END OF BLOCK #0 ---



end
player.setIngot = function (self, gold)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.goldNum.gold = gold

	return 
	--- END OF BLOCK #0 ---



end
player.getIngot = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.goldNum.gold
	--- END OF BLOCK #0 ---



end
player.setGird = function (self, gold)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.goldNum.gird = gold

	return 
	--- END OF BLOCK #0 ---



end
player.getGird = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.goldNum.gird
	--- END OF BLOCK #0 ---



end
player.setLimitGird = function (self, gold)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.goldNum.limtGird = gold

	return 
	--- END OF BLOCK #0 ---



end
player.getLimitGird = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.goldNum.limtGird
	--- END OF BLOCK #0 ---



end
player.setDiamond = function (self, gold)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.goldNum.diamond = gold

	return 
	--- END OF BLOCK #0 ---



end
player.getDiamond = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.goldNum.diamond
	--- END OF BLOCK #0 ---



end
player.setSilver = function (self, gold)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.goldNum.silver = gold

	return 
	--- END OF BLOCK #0 ---



end
player.getSilver = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.goldNum.silver
	--- END OF BLOCK #0 ---



end
player.setCapitalInfo = function (self, buf, bufLen)
	--- BLOCK #0 1-46, warpins: 1 ---
	local msgCapital = getRecord("TMessageCapitalInfo")

	net.record(msgCapital, buf, bufLen)

	self.goldNum.gold = msgCapital.get(msgCapital, "yuanbao")
	self.goldNum.diamond = msgCapital.get(msgCapital, "diamon")
	self.goldNum.gird = msgCapital.get(msgCapital, "linfu")
	self.goldNum.limtGird = msgCapital.get(msgCapital, "limitLf")
	self.goldNum.silver = msgCapital.get(msgCapital, "silver")
	self.goldNum.silverExp = msgCapital.get(msgCapital, "silverExp")

	return 
	--- END OF BLOCK #0 ---



end
player.setAbility = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-21, warpins: 1 ---
	local tmpAll = getRecord("TAllAbility")

	net.record(tmpAll, buf, bufLen)

	self.gold = msg.recog
	self.job = Byte(msg.param)
	self.initedAbility = true

	--- END OF BLOCK #0 ---

	for k, v in pairs(self.ability)

	LOOP BLOCK #1
	GO OUT TO BLOCK #3


	--- BLOCK #1 22-30, warpins: 1 ---
	self.ability:set(k, tmpAll.get(tmpAll, k))
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 31-32, warpins: 2 ---
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #3 33-36, warpins: 1 ---
	--- END OF BLOCK #3 ---

	for k, v in pairs(self.ability2)

	LOOP BLOCK #4
	GO OUT TO BLOCK #6


	--- BLOCK #4 37-45, warpins: 1 ---
	self.ability2:set(k, tmpAll.get(tmpAll, k))
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 46-47, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #6 48-51, warpins: 1 ---
	--- END OF BLOCK #6 ---

	for k, v in pairs(self.ability3)

	LOOP BLOCK #7
	GO OUT TO BLOCK #9


	--- BLOCK #7 52-60, warpins: 1 ---
	self.ability3:set(k, tmpAll.get(tmpAll, k))
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 61-62, warpins: 2 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #9 63-70, warpins: 1 ---
	print("attackLuck ", tmpAll.get(tmpAll, "attackLuck"))

	return 
	--- END OF BLOCK #9 ---



end
player.setStamina = function (self, cur, max)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if not cur then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot3 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-6, warpins: 2 ---
	self.stamina = slot3
	--- END OF BLOCK #2 ---

	slot3 = if not max then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 7-7, warpins: 1 ---
	slot3 = 0
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 8-9, warpins: 2 ---
	self.staminaMax = slot3

	return 
	--- END OF BLOCK #4 ---



end
player.setVitality = function (self, cur, max)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if not cur then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot3 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-6, warpins: 2 ---
	self.vitality = slot3
	--- END OF BLOCK #2 ---

	slot3 = if not max then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 7-7, warpins: 1 ---
	slot3 = 0
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 8-9, warpins: 2 ---
	self.vitalityMax = slot3

	return 
	--- END OF BLOCK #4 ---



end
player.setExpPoolValue = function (self, cur)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not cur then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	self.expPoolValue = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.setVitaliyitemValue = function (self, cur)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not cur then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	self.vitaliyitemValue = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.getJobStr = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if self.job == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-6, warpins: 1 ---
	return "战士"
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #2 7-9, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if self.job == 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 10-12, warpins: 1 ---
	return "法师"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #4 13-15, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if self.job == 2 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 16-17, warpins: 1 ---
	return "道士"
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 18-19, warpins: 4 ---
	return "刺客"
	--- END OF BLOCK #6 ---



end
player.getOtherJobStr = function (self, job)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if job == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-5, warpins: 1 ---
	return "战士"
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #2 6-7, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if job == 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 8-10, warpins: 1 ---
	return "法师"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #4 11-12, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if job == 2 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 13-14, warpins: 1 ---
	return "道士"
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 15-16, warpins: 4 ---
	return "刺客"
	--- END OF BLOCK #6 ---



end
player.setAttackMode = function (self, mode)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.attackMode = mode

	return 
	--- END OF BLOCK #0 ---



end
player.setHitEnable = function (self, key, value)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.hitEnables[key] = value

	return 
	--- END OF BLOCK #0 ---



end
player.setIsUnlimitedMove = function (self, b)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.isUnlimitedMove = b

	return 
	--- END OF BLOCK #0 ---



end
player.setMagicList = function (self, buf, bufLen)
	--- BLOCK #0 1-5, warpins: 1 ---
	self.magicList = {}
	local size = getRecordSize("TNewClientMagic")
	--- END OF BLOCK #0 ---

	FLOW; TARGET BLOCK #1


	--- BLOCK #1 6-7, warpins: 2 ---
	--- END OF BLOCK #1 ---

	if size <= bufLen then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 8-8, warpins: 1 ---
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 9-22, warpins: 1 ---
	self.magicList[#self.magicList + 1], buf, bufLen = net.record("TNewClientMagic", buf, bufLen)

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #4 23-25, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot4 = if WIN32_OPERATE then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 26-30, warpins: 1 ---
	g_data.hotKey:loadMagicHotKey()

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 31-31, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
player.getMagicDelay = function (self, magicId)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in pairs(self.magicList)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "magicId")

	 == magicId then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-14, warpins: 1 ---
	return v.get(v, "delayTime")
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-16, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 17-17, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
player.addMagic = function (self, buf, bufLen)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if getRecordSize("TNewClientMagic")

	 <= bufLen then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-17, warpins: 1 ---
	local magic = net.record("TNewClientMagic", buf, bufLen)
	self.magicList[#self.magicList + 1] = magic

	return magic
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 18-18, warpins: 2 ---
	return 
	--- END OF BLOCK #2 ---



end
player.setMagicExp = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-5, warpins: 1 ---
	local magic = nil

	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.magicList)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 6-12, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "magicId")

	 == msg.recog then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 13-14, warpins: 1 ---
	magic = v

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 15-16, warpins: 2 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 17-18, warpins: 2 ---
	--- END OF BLOCK #4 ---

	slot4 = if not magic then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 19-19, warpins: 1 ---
	return 

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 20-24, warpins: 2 ---
	--- END OF BLOCK #6 ---

	if bufLen < getRecordSize("TClientSkillExp")
	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #7 25-39, warpins: 1 ---
	magic.set(magic, "level", msg.param)
	magic.set(magic, "curTrain", MakeLong(msg.tag, msg.series))
	--- END OF BLOCK #7 ---

	if bufLen == 4 then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 40-49, warpins: 1 ---
	magic.set(magic, "maxTrain", net.int(buf, bufLen))

	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #9 50-78, warpins: 1 ---
	local record = getRecord("TClientSkillExp", buf, bufLen)

	magic.set(magic, "level", record.get(record, "skillLv"))
	magic.set(magic, "curTrain", record.get(record, "curExp"))
	magic.set(magic, "maxTrain", record.get(record, "nextExp"))

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 79-79, warpins: 3 ---
	return magic
	--- END OF BLOCK #10 ---



end
player.setMagicKey = function (self, magicID, key)
	--- BLOCK #0 1-5, warpins: 1 ---
	local changes = {}

	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.magicList)

	LOOP BLOCK #1
	GO OUT TO BLOCK #7


	--- BLOCK #1 6-11, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "magicId")
	 == magicID then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 12-20, warpins: 1 ---
	v.set(v, "key", key)

	changes[#changes + 1] = v

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #3 21-26, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v.get(v, "key")
	 == key then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 27-28, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if key ~= 0 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 29-36, warpins: 1 ---
	v.set(v, "key", 0)

	changes[#changes + 1] = v

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 37-38, warpins: 5 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 39-39, warpins: 1 ---
	return changes
	--- END OF BLOCK #7 ---



end
player.getMagic = function (self, magicID)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.magicList)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-10, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.get(v, "magicId")

	 == magicID then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 11-11, warpins: 1 ---
	return v
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 12-13, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 14-14, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
player.weightChanged = function (self, weight, wearWeight, handWeight)
	--- BLOCK #0 1-19, warpins: 1 ---
	self.ability:set("weight", weight)
	self.ability:set("wearWeight", wearWeight)
	self.ability:set("handWeight", handWeight)

	return 
	--- END OF BLOCK #0 ---



end
player.setAllowGroup = function (self, groupEnable)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.groupEnable = groupEnable

	return 
	--- END OF BLOCK #0 ---



end
player.setGroupMembers = function (self, list)
	--- BLOCK #0 1-4, warpins: 1 ---
	self.groupMembers = {}

	--- END OF BLOCK #0 ---

	slot1 = if list then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 5-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for i, v in ipairs(list)


	LOOP BLOCK #2
	GO OUT TO BLOCK #5


	--- BLOCK #2 9-10, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v ~= "" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 11-20, warpins: 1 ---
	self.groupMembers[#self.groupMembers + 1] = string.sub(v, 2)

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 21-22, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #5 23-23, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---



end
player.initGroupMembers = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-7, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if msg.recog*getRecordSize("TClientGroupMemInfo")

	 ~= bufLen then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 8-8, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 9-15, warpins: 2 ---
	self.groupMembers = {}
	local mem = nil
	--- END OF BLOCK #2 ---

	for i=1, msg.recog, 1
	LOOP BLOCK #3
	GO OUT TO BLOCK #4

	--- BLOCK #3 16-39, warpins: 2 ---
	mem, buf, bufLen = net.record("TClientGroupMemInfo", buf, bufLen)
	self.groupMembers[#self.groupMembers + 1] = mem

	g_data.mark:addGroup(mem.get(mem, "name"))

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #4 40-40, warpins: 1 ---
	return 
	--- END OF BLOCK #4 ---



end
player.getLeaderName = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not self.groupMembers then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-5, warpins: 1 ---
	return ""

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-9, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for i, v in ipairs(self.groupMembers)

	LOOP BLOCK #3
	GO OUT TO BLOCK #6


	--- BLOCK #3 10-15, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v.get(v, "isCaptain")

	 == 1 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 16-19, warpins: 1 ---
	return v.get(v, "name")
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 20-21, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 22-23, warpins: 1 ---
	return ""
	--- END OF BLOCK #6 ---



end
player.setTeamLeader = function (self, leader)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.isTeamLeader = leader

	return 
	--- END OF BLOCK #0 ---



end
player.getIsTeamLeader = function (self)
	--- BLOCK #0 1-2, warpins: 1 ---
	return self.isTeamLeader
	--- END OF BLOCK #0 ---



end
player.delGroupMember = function (self, buf)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not self.groupMembers then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-4, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-8, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for i, v in ipairs(self.groupMembers)


	LOOP BLOCK #3
	GO OUT TO BLOCK #6


	--- BLOCK #3 9-27, warpins: 1 ---
	local name = string.sub(v.get(v, "name"), 2)

	print("name " .. name)
	--- END OF BLOCK #3 ---

	if name == net.str(buf)
	 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 28-33, warpins: 1 ---
	table.remove(self.groupMembers, i)

	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #5 34-35, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 36-36, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
player.initNearPlayer = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.nearMemInfo = {}
	--- END OF BLOCK #0 ---

	for i=1, msg.param, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 7-20, warpins: 2 ---
	self.nearMemInfo[#self.nearMemInfo + 1], buf, bufLen = net.record("TClientNearbyGroupInfo", buf, bufLen)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 21-21, warpins: 1 ---
	return 
	--- END OF BLOCK #2 ---



end
player.initNearGroup = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.nearGroupInfo = {}
	--- END OF BLOCK #0 ---

	for i=1, msg.param, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #2

	--- BLOCK #1 7-20, warpins: 2 ---
	self.nearGroupInfo[#self.nearGroupInfo + 1], buf, bufLen = net.record("TClientNearbyGroupInfo", buf, bufLen)

	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #2 21-21, warpins: 1 ---
	return 
	--- END OF BLOCK #2 ---



end
player.exitGuildSuccess = function (self)
	--- BLOCK #0 1-49, warpins: 1 ---
	self.guild.info = nil
	self.guild.guildName = ""
	self.guild.rankName = ""
	self.guild.rankList = nil
	self.guild.memberList = {}
	self.guild.guildRight = 0
	self.guild.hasGuild = false
	self.guild.isAllowAlly = false
	self.guild.log = {}
	self.guild.heroTeamMember = 0
	self.guild.relationShip = {}
	self.guild.isGetRelationShipInfo = false
	self.guild.recvAllyVer = 0
	self.guild.allyVer = 0
	self.guild.focusVer = 0
	self.guild.killVer = 0

	return 
	--- END OF BLOCK #0 ---



end
player.setGuildInfo = function (self, guildinfo)
	--- BLOCK #0 1-4, warpins: 1 ---
	self.guild.info = guildinfo

	--- END OF BLOCK #0 ---

	slot1 = if guildinfo then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 5-29, warpins: 1 ---
	self.setGuildRight(self, guildinfo.get(guildinfo, "conferRight"))

	local value = ycFunction:band(def.guild.guildFlag.tfAllowAlly, self.guild.info:get("guildFlag"))
	slot4 = self
	slot3 = self.setAllowAlly
	--- END OF BLOCK #1 ---

	if value ~= 1 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 30-31, warpins: 1 ---
	slot5 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 32-32, warpins: 1 ---
	slot5 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 33-33, warpins: 2 ---
	slot3(slot4, slot5)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 34-34, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---



end
player.getIsLeader = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.guild.info then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 5-26, warpins: 1 ---
	local value = ycFunction:band(ycFunction:rshift(self.guild.info:get("conferRight"), def.guild.guildPrivilege.gpOwner - 1), 1)
	--- END OF BLOCK #1 ---

	if value ~= 1 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 27-28, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 29-29, warpins: 1 ---
	slot2 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 30-30, warpins: 2 ---
	return slot2

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 31-35, warpins: 2 ---
	print("info is nil")

	return false
	--- END OF BLOCK #5 ---



end
player.getIsFirstLeader = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.guild.info then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 5-26, warpins: 1 ---
	local value = ycFunction:band(ycFunction:rshift(self.guild.info:get("conferRight"), def.guild.guildPrivilege.gpFirstOwner - 1), 1)
	--- END OF BLOCK #1 ---

	if value ~= 1 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 27-28, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 29-29, warpins: 1 ---
	slot2 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 30-30, warpins: 2 ---
	return slot2

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 31-35, warpins: 2 ---
	print("info is nil")

	return false
	--- END OF BLOCK #5 ---



end
player.getDisTime = function (self, timeNow, timeLocal)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not timeLocal then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-15, warpins: 1 ---
	timeLocal = math.floor(self.guild.info:get("gsTime"):double())
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 16-22, warpins: 2 ---
	local disTime = math.floor(timeLocal - timeNow)

	--- END OF BLOCK #2 ---

	if disTime < 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 23-25, warpins: 1 ---
	return "1天内"
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #4 26-28, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if 14 <= disTime then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 29-31, warpins: 1 ---
	return "14天前"
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #7


	--- BLOCK #6 32-35, warpins: 1 ---
	return disTime .. "天前"
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 36-36, warpins: 3 ---
	return 
	--- END OF BLOCK #7 ---



end
player.setGuildName = function (self, guildName)
	--- BLOCK #0 1-11, warpins: 1 ---
	self.guild.guildName = guildName
	slot3 = self
	slot2 = self.setHasGuild

	--- END OF BLOCK #0 ---

	if 0 >= string.length(guildName)

	 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 12-13, warpins: 1 ---
	slot4 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 14-14, warpins: 1 ---
	slot4 = true

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-16, warpins: 2 ---
	slot2(slot3, slot4)

	return 
	--- END OF BLOCK #3 ---



end
player.getGuildName = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if self.guild.info then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-11, warpins: 1 ---
	return self.guild.info:get("gName")
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 12-13, warpins: 1 ---
	return ""
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 14-14, warpins: 2 ---
	return 
	--- END OF BLOCK #3 ---



end
player.setHasGuild = function (self, hasGuild)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.hasGuild = hasGuild

	return 
	--- END OF BLOCK #0 ---



end
player.getHasGuild = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.hasGuild
	--- END OF BLOCK #0 ---



end
player.setAllowAlly = function (self, isAllowAlly)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.isAllowAlly = isAllowAlly

	return 
	--- END OF BLOCK #0 ---



end
player.getAllowAlly = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.isAllowAlly
	--- END OF BLOCK #0 ---



end
player.parseLog = function (self, buf, bufLen, type)
	--- BLOCK #0 1-6, warpins: 1 ---
	local ibegin = 1
	local strs = {}

	--- END OF BLOCK #0 ---

	for i=1, bufLen, 1
	LOOP BLOCK #1
	GO OUT TO BLOCK #5

	--- BLOCK #1 7-13, warpins: 2 ---
	--- END OF BLOCK #1 ---

	if string.byte(buf, i)

	 == 0 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #2 14-15, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if i ~= ibegin then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 16-33, warpins: 1 ---
	local tmpLabel = string.sub(buf, ibegin, i)
	tmpLabel = ycFunction:a2u(tmpLabel, i - ibegin + 1)
	strs[#strs + 1] = tmpLabel
	ibegin = i + 1
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 34-34, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #5 35-38, warpins: 1 ---
	self.guild.log[type] = strs

	return 
	--- END OF BLOCK #5 ---



end
player.isNeedSendrelationship = function (self)
	--- BLOCK #0 1-2, warpins: 1 ---
	return isGetRelationShipInfo
	--- END OF BLOCK #0 ---



end
player.relationShip = function (self, buf, bufLen, type)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not bufLen then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	bufLen = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-9, warpins: 2 ---
	local ibegin = 1
	local strs = {}

	--- END OF BLOCK #2 ---

	for i=1, bufLen, 1
	LOOP BLOCK #3
	GO OUT TO BLOCK #7

	--- BLOCK #3 10-16, warpins: 2 ---
	--- END OF BLOCK #3 ---

	if string.byte(buf, i)

	 == 0 then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #4 17-18, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if i ~= ibegin then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 19-36, warpins: 1 ---
	local tmpLabel = string.sub(buf, ibegin, i)
	tmpLabel = ycFunction:a2u(tmpLabel, i - ibegin + 1)
	strs[#strs + 1] = tmpLabel
	ibegin = i + 1
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 37-37, warpins: 3 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #7 38-43, warpins: 1 ---
	isGetRelationShipInfo = true
	self.guild.relationShip[type] = strs

	return 
	--- END OF BLOCK #7 ---



end
player.getRelationShip = function (self, type)
	--- BLOCK #0 1-4, warpins: 1 ---
	return self.guild.relationShip[type]
	--- END OF BLOCK #0 ---



end
player.getLog = function (self, type)
	--- BLOCK #0 1-4, warpins: 1 ---
	return self.guild.log[type]
	--- END OF BLOCK #0 ---



end
player.setHeroTeamMember = function (self, shotCode)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.heroTeamMember = shotCode

	return 
	--- END OF BLOCK #0 ---



end
player.getHeroTeamMember = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.heroTeamMember
	--- END OF BLOCK #0 ---



end
player.setRankName = function (self, rankName)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.rankName = rankName

	return 
	--- END OF BLOCK #0 ---



end
player.getRankName = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.rankName
	--- END OF BLOCK #0 ---



end
player.setGuildName = function (self, guildName)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.guildName = guildName

	return 
	--- END OF BLOCK #0 ---



end
player.getGuildName = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.guildName
	--- END OF BLOCK #0 ---



end
player.setRankList = function (self, rankList)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.rankList = rankList

	return 
	--- END OF BLOCK #0 ---



end
player.getRankList = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.rankList
	--- END OF BLOCK #0 ---



end
player.getOtherRankName = function (self, rankId)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not rankId then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-4, warpins: 1 ---
	return ""

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 5-9, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for i, v in ipairs(self.guild.rankList)

	LOOP BLOCK #3
	GO OUT TO BLOCK #6


	--- BLOCK #3 10-15, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if v.get(v, "rankID")

	 == rankId then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 16-19, warpins: 1 ---
	return v.get(v, "rankName")
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 20-21, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 22-23, warpins: 1 ---
	return ""
	--- END OF BLOCK #6 ---



end
player.setMemberList = function (self, RankKey, memberList)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if not self.guild.memberList then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	self.guild.memberList = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-11, warpins: 2 ---
	self.guild.memberList[RankKey] = memberList

	return 
	--- END OF BLOCK #2 ---



end
player.getMemberList = function (self, RankKey)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not self.guild.memberList then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-6, warpins: 1 ---
	return {}

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-11, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot2 = if not self.guild.memberList[RankKey] then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 12-12, warpins: 1 ---
	slot2 = {}

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 13-13, warpins: 2 ---
	return slot2
	--- END OF BLOCK #4 ---



end
player.DelMember = function (self, name)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for i, v in pairs(self.guild.memberList)

	LOOP BLOCK #1
	GO OUT TO BLOCK #6


	--- BLOCK #1 6-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	for j, value in ipairs(v)

	LOOP BLOCK #2
	GO OUT TO BLOCK #5


	--- BLOCK #2 10-15, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if value.get(value, "chrName")
	 == name then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 16-21, warpins: 1 ---
	table.remove(v, j)

	return i
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 22-23, warpins: 3 ---
	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #5 24-25, warpins: 2 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #6 26-26, warpins: 1 ---
	return 
	--- END OF BLOCK #6 ---



end
player.updateMemberInfo = function (self, member)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not self.guild.memberList then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-5, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-10, warpins: 2 ---
	--- END OF BLOCK #2 ---

	for i, v in pairs(self.guild.memberList)

	LOOP BLOCK #3
	GO OUT TO BLOCK #8


	--- BLOCK #3 11-14, warpins: 1 ---
	--- END OF BLOCK #3 ---

	for j, value in ipairs(v)

	LOOP BLOCK #4
	GO OUT TO BLOCK #7


	--- BLOCK #4 15-24, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if value.get(value, "chrName")
	 == member.get(member, "chrName")
	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 25-29, warpins: 1 ---
	table.remove(v, j)

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 30-31, warpins: 3 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #7 32-33, warpins: 2 ---
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #8 34-42, warpins: 1 ---
	local rankList = self.guild.memberList[member.get(member, "rankID")]
	--- END OF BLOCK #8 ---

	slot2 = if not rankList then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 43-50, warpins: 1 ---
	rankList = {}
	self.guild.memberList[member.get(member, "rankID")] = rankList
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 51-54, warpins: 2 ---
	rankList[#rankList + 1] = member

	return 
	--- END OF BLOCK #10 ---



end
player.setGuildInfoText = function (self, info)
	--- BLOCK #0 1-5, warpins: 1 ---
	print("player:setGuildInfoText")

	--- END OF BLOCK #0 ---

	slot1 = if not info then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-6, warpins: 1 ---
	info = ""
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-9, warpins: 2 ---
	self.guild.recruitGuildInfo = info

	return 
	--- END OF BLOCK #2 ---



end
player.getGuildInfoText = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.recruitGuildInfo
	--- END OF BLOCK #0 ---



end
player.setAllyVer = function (self, value)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not value then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	allyVer = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.setRecvAllyVer = function (self, value)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not value then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	recvAllyVer = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.setFocusVer = function (self, value)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not value then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	focusVer = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.setKillVer = function (self, value)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if not value then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	slot2 = 0
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-5, warpins: 2 ---
	killVer = slot2

	return 
	--- END OF BLOCK #2 ---



end
player.setMemberShowType = function (self, type)
	--- BLOCK #0 1-3, warpins: 1 ---
	self.guild.memberShowType = type

	return 
	--- END OF BLOCK #0 ---



end
player.getMemberShowType = function (self)
	--- BLOCK #0 1-3, warpins: 1 ---
	return self.guild.memberShowType
	--- END OF BLOCK #0 ---



end
player.chargeRight = function (self, setType, value)
	--- BLOCK #0 1-13, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if ycFunction:band(ycFunction:rshift(value, setType), 1)

	 ~= 1 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 14-15, warpins: 1 ---
	slot3 = false
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 16-16, warpins: 1 ---
	slot3 = true

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 17-17, warpins: 2 ---
	return slot3
	--- END OF BLOCK #3 ---



end
player.AddLshift = function (self, a, b, c)
	--- BLOCK #0 1-11, warpins: 1 ---
	return ycFunction:bor(a, ycFunction:lshift(b, c))
	--- END OF BLOCK #0 ---



end
player.setGuildRight = function (self, guildPrivilege)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not guildPrivilege then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-19, warpins: 2 ---
	print("设置行会权限")

	local tmpGuildPrivilege = def.guild.guildPrivilege
	local tmpGuildRight = 0
	local privilege = {}

	--- END OF BLOCK #2 ---

	slot5 = if self.chargeRight(self, tmpGuildPrivilege.gpOwner - 1, guildPrivilege)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 20-82, warpins: 1 ---
	privilege = {
		def.guild.guildActiveRight.garChgNotice,
		def.guild.guildActiveRight.garAddMember,
		def.guild.guildActiveRight.garDelMember,
		def.guild.guildActiveRight.garStartKill,
		def.guild.guildActiveRight.garAllyGuild,
		def.guild.guildActiveRight.garMoveRankMember,
		def.guild.guildActiveRight.garCreateRank,
		def.guild.guildActiveRight.garEditRank,
		def.guild.guildActiveRight.garSetFactoryRank,
		def.guild.guildActiveRight.garBuildWeapon,
		def.guild.guildActiveRight.garUpgradeWeapon,
		def.guild.guildActiveRight.garUseWeapon
	}

	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #4 83-90, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot5 = if self.chargeRight(self, tmpGuildPrivilege.gpLeader - 1, guildPrivilege)

	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 91-118, warpins: 1 ---
	privilege[#privilege + 1] = def.guild.guildActiveRight.garMoveRankMember
	privilege[#privilege + 1] = def.guild.guildActiveRight.garBuildWeapon
	privilege[#privilege + 1] = def.guild.guildActiveRight.garUpgradeWeapon
	privilege[#privilege + 1] = def.guild.guildActiveRight.garUseWeapon

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 119-126, warpins: 2 ---
	--- END OF BLOCK #6 ---

	slot5 = if self.chargeRight(self, tmpGuildPrivilege.gpDomestic - 1, guildPrivilege)

	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 127-140, warpins: 1 ---
	privilege[#privilege + 1] = def.guild.guildActiveRight.garAddMember
	privilege[#privilege + 1] = def.guild.guildActiveRight.garDelMember

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 141-148, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot5 = if self.chargeRight(self, tmpGuildPrivilege.gpForeign - 1, guildPrivilege)

	 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 149-162, warpins: 1 ---
	privilege[#privilege + 1] = def.guild.guildActiveRight.garStartKill
	privilege[#privilege + 1] = def.guild.guildActiveRight.garAllyGuild
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 163-166, warpins: 3 ---
	--- END OF BLOCK #10 ---

	for i=1, #privilege, 1
	LOOP BLOCK #11
	GO OUT TO BLOCK #12

	--- BLOCK #11 167-174, warpins: 2 ---
	tmpGuildRight = self.AddLshift(self, tmpGuildRight, 1, privilege[i])
	--- END OF BLOCK #11 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #12 175-177, warpins: 1 ---
	self.guild.guildRight = tmpGuildRight

	return 
	--- END OF BLOCK #12 ---



end
player.hasStartKill = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	return self.chargeRight(self, def.guild.guildActiveRight.garStartKill, self.guild.guildRight)
	--- END OF BLOCK #0 ---



end
player.hasEditRank = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	return self.chargeRight(self, def.guild.guildActiveRight.garEditRank, self.guild.guildRight)
	--- END OF BLOCK #0 ---



end
player.hasMoveRankMember = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	return self.chargeRight(self, def.guild.guildActiveRight.garMoveRankMember, self.guild.guildRight)
	--- END OF BLOCK #0 ---



end
player.hasChangeMember = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	return self.chargeRight(self, def.guild.guildActiveRight.garAddMember, self.guild.guildRight)
	--- END OF BLOCK #0 ---



end
player.hasAllyGuild = function (self)
	--- BLOCK #0 1-9, warpins: 1 ---
	return self.chargeRight(self, def.guild.guildActiveRight.garAllyGuild, self.guild.guildRight)
	--- END OF BLOCK #0 ---



end
player.initTitle = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if bufLen == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-7, warpins: 2 ---
	local titleInfo = {}
	--- END OF BLOCK #2 ---

	if msg.tag == 1 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 8-9, warpins: 1 ---
	slot5 = 0
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 10-10, warpins: 1 ---
	slot5 = msg.param
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 11-32, warpins: 2 ---
	titleInfo.curTitleID = slot5
	titleInfo.ActorID = msg.recog
	local titleCount = msg.tag
	titleInfo.data = {}

	print("bufLen " .. bufLen .. " TClientTitleInfo " .. getRecordSize("TClientTitleInfo"), " msg.tag " .. msg.tag)

	--- END OF BLOCK #5 ---

	if 0 < msg.tag then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #6 33-36, warpins: 1 ---
	--- END OF BLOCK #6 ---

	for i=1, msg.tag, 1
	LOOP BLOCK #7
	GO OUT TO BLOCK #8

	--- BLOCK #7 37-50, warpins: 2 ---
	titleInfo.data[#titleInfo.data + 1], buf, bufLen = net.record("TClientTitleInfo", buf, bufLen)
	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #8 51-53, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot6 = if not self.titleInfo then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 54-54, warpins: 1 ---
	slot6 = {}
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 55-59, warpins: 2 ---
	self.titleInfo = slot6

	--- END OF BLOCK #10 ---

	for i, v in ipairs(self.titleInfo)

	LOOP BLOCK #11
	GO OUT TO BLOCK #14


	--- BLOCK #11 60-63, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if v.ActorID == titleInfo.ActorID then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 64-68, warpins: 1 ---
	table.remove(self.titleInfo, i)

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 69-70, warpins: 3 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #14 71-76, warpins: 1 ---
	self.titleInfo[#self.titleInfo + 1] = titleInfo

	return 
	--- END OF BLOCK #14 ---



end
player.setTitleResult = function (self, msg)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot2 = if self.titleInfo then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 4-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if #self.titleInfo == 0 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-8, warpins: 2 ---
	return 

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 9-12, warpins: 2 ---
	--- END OF BLOCK #3 ---

	for i, v in ipairs(self.titleInfo)


	LOOP BLOCK #4
	GO OUT TO BLOCK #9


	--- BLOCK #4 13-16, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if v.ActorID == self.roleid then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #5 17-19, warpins: 1 ---
	--- END OF BLOCK #5 ---

	if msg.tag == 0 then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 20-22, warpins: 1 ---
	v.curTitleID = 0
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #7 23-25, warpins: 1 ---
	v.curTitleID = msg.param

	--- END OF BLOCK #7 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #9


	--- BLOCK #8 26-27, warpins: 2 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #9 28-28, warpins: 3 ---
	return 
	--- END OF BLOCK #9 ---



end
player.updateTitleInfo = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-3, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if msg.tag == 0 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #1 4-17, warpins: 1 ---
	local title = nil
	title, buf, bufLen = net.record("TClientTitleInfo", buf, bufLen)

	--- END OF BLOCK #1 ---

	for i, v in ipairs(self.titleInfo)

	LOOP BLOCK #2
	GO OUT TO BLOCK #9


	--- BLOCK #2 18-21, warpins: 1 ---
	--- END OF BLOCK #2 ---

	if v.ActorID == self.roleid then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #3 22-25, warpins: 1 ---
	--- END OF BLOCK #3 ---

	for j, t in ipairs(v.data)

	LOOP BLOCK #4
	GO OUT TO BLOCK #7


	--- BLOCK #4 26-35, warpins: 1 ---
	--- END OF BLOCK #4 ---

	if t.get(t, "ID")
	 == title.get(title, "ID")
	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 36-40, warpins: 1 ---
	table.remove(v.data, j)

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 41-42, warpins: 3 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #7 43-47, warpins: 1 ---
	v.data[#v.data + 1] = title

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 48-49, warpins: 3 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #9 50-50, warpins: 1 ---
	--- END OF BLOCK #9 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #17


	--- BLOCK #10 51-54, warpins: 1 ---
	--- END OF BLOCK #10 ---

	for i, v in ipairs(self.titleInfo)

	LOOP BLOCK #11
	GO OUT TO BLOCK #17


	--- BLOCK #11 55-58, warpins: 1 ---
	--- END OF BLOCK #11 ---

	if v.ActorID == self.roleid then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #12 59-62, warpins: 1 ---
	--- END OF BLOCK #12 ---

	for j, t in ipairs(v.data)

	LOOP BLOCK #13
	GO OUT TO BLOCK #16


	--- BLOCK #13 63-69, warpins: 1 ---
	--- END OF BLOCK #13 ---

	if t.get(t, "ID")
	 == msg.param then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 70-74, warpins: 1 ---
	table.remove(v.data, j)

	--- END OF BLOCK #14 ---

	FLOW; TARGET BLOCK #15


	--- BLOCK #15 75-76, warpins: 3 ---
	--- END OF BLOCK #15 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #12


	--- BLOCK #16 77-78, warpins: 3 ---
	--- END OF BLOCK #16 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #17 79-79, warpins: 2 ---
	return 
	--- END OF BLOCK #17 ---



end
player.updateTitleCount = function (self, msg, buf, bufLen)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.titleInfo)

	LOOP BLOCK #1
	GO OUT TO BLOCK #7


	--- BLOCK #1 5-8, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.ActorID == self.roleid then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #2 9-12, warpins: 1 ---
	--- END OF BLOCK #2 ---

	for j, t in ipairs(v.data)

	LOOP BLOCK #3
	GO OUT TO BLOCK #6


	--- BLOCK #3 13-19, warpins: 1 ---
	--- END OF BLOCK #3 ---

	if t.get(t, "ID")
	 == msg.param then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 20-24, warpins: 1 ---
	t.set(t, "UseTimes", msg.tag)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-26, warpins: 3 ---
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #2


	--- BLOCK #6 27-28, warpins: 3 ---
	--- END OF BLOCK #6 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #7 29-29, warpins: 1 ---
	return 
	--- END OF BLOCK #7 ---



end
player.addSlave = function (self, name)
	--- BLOCK #0 1-6, warpins: 1 ---
	table.insert(self.slaves, name)

	return 
	--- END OF BLOCK #0 ---



end
player.removeSlave = function (self, name)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for k, v in ipairs(self.slaves)

	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-6, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v == name then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 7-13, warpins: 1 ---
	table.remove(self.slaves, k)

	return true
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 14-15, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 16-17, warpins: 1 ---
	return false
	--- END OF BLOCK #4 ---



end
player.hasSlave = function (self, name)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not name then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #1 3-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if 0 >= #self.slaves then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-9, warpins: 1 ---
	slot2 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 10-10, warpins: 1 ---
	slot2 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 11-11, warpins: 2 ---
	return slot2

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 12-15, warpins: 2 ---
	--- END OF BLOCK #5 ---

	for k, v in ipairs(self.slaves)

	LOOP BLOCK #6
	GO OUT TO BLOCK #9


	--- BLOCK #6 16-22, warpins: 1 ---
	--- END OF BLOCK #6 ---

	slot7 = if string.find(v, name)

	 then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 23-24, warpins: 1 ---
	return true
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 25-26, warpins: 3 ---
	--- END OF BLOCK #8 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #9 27-27, warpins: 1 ---
	return 
	--- END OF BLOCK #9 ---



end
player.fixStrLen = function (self, text, len)
	--- BLOCK #0 1-6, warpins: 1 ---
	local strs = utf8strs(text)
	--- END OF BLOCK #0 ---

	if len < #strs then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #1 7-11, warpins: 1 ---
	local ret = ""
	--- END OF BLOCK #1 ---

	for k=1, len, 1
	LOOP BLOCK #2
	GO OUT TO BLOCK #3

	--- BLOCK #2 12-15, warpins: 2 ---
	ret = ret .. strs[k]

	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #1


	--- BLOCK #3 16-19, warpins: 1 ---
	return ret .. "..."
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 20-20, warpins: 2 ---
	return text
	--- END OF BLOCK #4 ---



end

return player
--- END OF BLOCK #0 ---



