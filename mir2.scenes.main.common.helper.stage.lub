--- BLOCK #0 1-35, warpins: 1 ---
local map = import("...map.map")
local mapdef = import("...map.def")
local stage = class("simulationStage", function ()
	--- BLOCK #0 1-5, warpins: 1 ---
	local scene = display.newScene("SimulateStage")

	return scene
	--- END OF BLOCK #0 ---



end)

table.merge(stage, {})

stage.ctor = function (self, mapid, x, y, image, disableSkip)
	--- BLOCK #0 1-23, warpins: 1 ---
	local ground = display.newNode():add2(self)
	self.ground = ground
	self.player = {
		node = display.newNode():size(1, 1),
		x = x,
		y = y
	}
	--- END OF BLOCK #0 ---

	if mapid == "image" then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 24-26, warpins: 1 ---
	mapid = "0"
	self.image = true
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 27-28, warpins: 2 ---
	--- END OF BLOCK #2 ---

	slot1 = if mapid then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #3 29-53, warpins: 1 ---
	local map = map.new(mapid):add2(ground)
	ground.map = map
	self.map = map

	self.player.node:addTo(map.layers.obj)
	map.layers.infoHpBg:setVisible(false)
	--- END OF BLOCK #3 ---

	slot4 = if image then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #4 54-60, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot8 = if not string.find(image, ".")

	 then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 61-63, warpins: 1 ---
	image = image .. ".png"
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 64-85, warpins: 2 ---
	self.image = res.get2_helper("pic/helperScript/" .. image):add2(ground)

	self.image:setLocalZOrder(-999)
	self.image:schedule(function ()
		--- BLOCK #0 1-17, warpins: 1 ---
		self.image:setPosition(self.player.node:convertToWorldSpace(cc.p(0, 0)))

		return 
		--- END OF BLOCK #0 ---



	end, 0)
	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 86-140, warpins: 2 ---
	ground.scale(ground, g_data.setting.display.mapScale)
	map.setPlayer(map, self.player)

	self.cury = y
	self.curx = x

	self.moveTo(self, x, y, false)

	local pos = self.player.node:convertToWorldSpace(cc.p(0, 0))
	local offx = display.cx - pos.x
	local offy = display.cy - pos.y

	self.ground:setPosition(offx, offy)
	self.schedule(self, function ()
		--- BLOCK #0 1-15, warpins: 1 ---
		local dt = cc.Director:getInstance():getDeltaTime()

		self.map:update(dt)

		return 
		--- END OF BLOCK #0 ---



	end, 0)

	self.map.screenw = 50
	self.map.screenh = 50

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 141-142, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot5 = if not disableSkip then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 143-145, warpins: 1 ---
	self.enableSkip(self)

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 146-147, warpins: 2 ---
	return 
	--- END OF BLOCK #10 ---



end
stage.setEvtCallback = function (self, cb)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.evtCallback = cb

	return 
	--- END OF BLOCK #0 ---



end
stage.onEnterTransitionFinish = function (self)
	--- BLOCK #0 1-4, warpins: 1 ---
	self.evtCallback("stage_onTransFinish")

	return 
	--- END OF BLOCK #0 ---



end
stage.enableSkip = function (self)
	--- BLOCK #0 1-38, warpins: 1 ---
	local node = display.newNode():add2(self)

	node.setGlobalZOrder(node, 99999999)

	self.skipLayer = node
	local eventDispatcher = node.getEventDispatcher(node)
	local listener = cc.EventListenerTouchOneByOne:create()

	listener.setSwallowTouches(listener, true)
	listener.registerScriptHandler(listener, function (touch, event)
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot2 = if node.entered then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-5, warpins: 1 ---
		return 

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 6-17, warpins: 1 ---
		node.entered = true

		an.newMsgbox("确定要跳过剧情吗?", function (idx)
			--- BLOCK #0 1-5, warpins: 1 ---
			node.entered = false

			--- END OF BLOCK #0 ---

			if idx == 1 then
			JUMP TO BLOCK #1
			else
			JUMP TO BLOCK #2
			end


			--- BLOCK #1 6-9, warpins: 1 ---
			self.runner.skip()

			--- END OF BLOCK #1 ---

			FLOW; TARGET BLOCK #2


			--- BLOCK #2 10-10, warpins: 2 ---
			return 
			--- END OF BLOCK #2 ---



		end, {
			center = true,
			hasCancel = true
		})

		return true
		--- END OF BLOCK #2 ---

		FLOW; TARGET BLOCK #3


		--- BLOCK #3 18-18, warpins: 2 ---
		--- END OF BLOCK #3 ---



	end, cc.Handler.EVENT_TOUCH_BEGAN)
	eventDispatcher.addEventListenerWithSceneGraphPriority(eventDispatcher, listener, node)

	return 
	--- END OF BLOCK #0 ---



end
stage.disableSkip = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	self.skipLayer:removeSelf()

	return 
	--- END OF BLOCK #0 ---



end
stage.updateLookArea = function (self)
	--- BLOCK #0 1-29, warpins: 1 ---
	local mx, my = self.map:getPosition()
	mx = -mx + display.cx
	my = -my + display.cy
	mx = mx + mapdef.tile.w/2
	my = my + mapdef.tile.h/2

	self.map:updateLookArea(mx, my)

	return 
	--- END OF BLOCK #0 ---



end
stage.moveTo = function (self, x, y, isAnim, dur)
	--- BLOCK #0 1-15, warpins: 1 ---
	local dis = cc.pGetDistance(cc.p(self.curx, self.cury), cc.p(x, y))
	--- END OF BLOCK #0 ---

	slot4 = if not dur then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 16-16, warpins: 1 ---
	dur = dis*2
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 17-35, warpins: 2 ---
	local mx, my = self.map:getMapPos(x, y)
	mx = mx + mapdef.tile.w/2
	my = my + mapdef.tile.h/2
	--- END OF BLOCK #2 ---

	slot8 = if not self.image then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 36-37, warpins: 1 ---
	--- END OF BLOCK #3 ---

	slot3 = if isAnim then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 38-63, warpins: 1 ---
	local step = 0
	local disX = x - self.curx
	local disY = y - self.cury
	local dis = math.sqrt(disX*disX + disY*disY)

	local function cb()
		--- BLOCK #0 1-6, warpins: 1 ---
		local per = step/dis
		--- END OF BLOCK #0 ---

		if 1 <= per then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 7-27, warpins: 1 ---
		self.player.x = x
		self.player.y = y

		self.map:load(x, y)
		self:stopAction(hAct)

		return 

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 28-62, warpins: 2 ---
		local nx = math.floor(per*disX + 0.5) + self.curx
		local ny = math.floor(per*disY + 0.5) + self.cury
		self.player.x = nx
		self.player.y = ny

		self.map:load(nx, ny)

		step = step + 1

		return 
		--- END OF BLOCK #2 ---



	end

	local hAct = nil
	hAct = self.schedule(self, cb, dur/dis/2)
	self.cury = y
	self.curx = x

	cb()

	--- END OF BLOCK #4 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #5 64-73, warpins: 1 ---
	self.player.x = x
	self.player.y = y

	self.map:load(x, y)

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 74-94, warpins: 3 ---
	self.map.isStage = true

	self.player.node:setPosition(mx, my)
	self.map:scroll(isAnim, dur)

	self.cury = y
	self.curx = x

	return 
	--- END OF BLOCK #6 ---



end
stage.setMapScale = function (self, s)
	--- BLOCK #0 1-19, warpins: 1 ---
	self.ground:setScale(s)
	self.map:updateMapScale(s)
	self.moveTo(self, self.player.x, self.player.y, true)

	return 
	--- END OF BLOCK #0 ---



end
stage.getMap = function (self)
	--- BLOCK #0 1-2, warpins: 1 ---
	return self.map
	--- END OF BLOCK #0 ---



end

return stage
--- END OF BLOCK #0 ---



