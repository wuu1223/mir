--- BLOCK #0 1-26, warpins: 1 ---
local messageBox = class("messageBox")

table.merge(messageBox, {
	panel,
	view,
	viewSize = {
		w = 370,
		h = 165
	}
})

messageBox.messageBox = function (self, titlePng, btnList, callback, params)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if not params then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	params = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-89, warpins: 2 ---
	local scene = cc.Director:getInstance():getRunningScene().s
	local panel = display.newSprite(res.gettex2("pic/common/msgbox.png")):add2(scene, 999):center()

	panel.enableClick(panel, function ()
		--- BLOCK #0 1-1, warpins: 1 ---
		return 
		--- END OF BLOCK #0 ---



	end, {
		support = "drag"
	})

	local view = an.newScroll(4, 4, self.viewSize.w, self.viewSize.h):anchor(0, 1):add2(panel):pos(26, 231)
	local title = display.newSprite(res.gettex2(titlePng)):add2(panel)

	title.pos(title, panel.getw(panel)/2, panel.geth(panel) - title.geth(title)/2 - 5)

	local co = coroutine.running()

	local function onBtn(v)
		--- BLOCK #0 1-7, warpins: 1 ---
		sound.playSound("103")
		--- END OF BLOCK #0 ---

		slot1 = if v.cb then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 8-10, warpins: 1 ---
		v.cb()
		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #6


		--- BLOCK #2 11-13, warpins: 1 ---
		--- END OF BLOCK #2 ---

		slot1 = if callback then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 14-17, warpins: 1 ---
		callback(v)
		--- END OF BLOCK #3 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #6


		--- BLOCK #4 18-20, warpins: 1 ---
		--- END OF BLOCK #4 ---

		slot1 = if co then
		JUMP TO BLOCK #5
		else
		JUMP TO BLOCK #6
		end


		--- BLOCK #5 21-25, warpins: 1 ---
		coroutine.resume(co, v.evt)
		--- END OF BLOCK #5 ---

		FLOW; TARGET BLOCK #6


		--- BLOCK #6 26-30, warpins: 4 ---
		panel:removeSelf()

		return 
		--- END OF BLOCK #6 ---



	end

	--- END OF BLOCK #2 ---

	slot11 = if not params.btnInterval then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 90-90, warpins: 1 ---
	local btnInterval = 20
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 91-114, warpins: 2 ---
	local btnBase = display.newNode():add2(panel):anchor(0.5, 0.5):pos(panel.getw(panel)/2, 20)
	local listWidth = 0
	slot14 = ipairs
	--- END OF BLOCK #4 ---

	slot15 = if not btnList then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #5 115-119, warpins: 1 ---
	slot15 = {
		{
			title = "确 定",
			evt = "ok"
		},
		{
			title = "取 消",
			evt = "cancel"
		}
	}

	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 120-121, warpins: 2 ---
	--- END OF BLOCK #6 ---

	for k, v in slot14(slot15)


	LOOP BLOCK #7
	GO OUT TO BLOCK #14


	--- BLOCK #7 122-124, warpins: 1 ---
	--- END OF BLOCK #7 ---

	slot19 = if v.image then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 125-127, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot19 = if not v.press then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 128-128, warpins: 2 ---
	local pressImage = "pic/common/btn21.png"
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 129-135, warpins: 2 ---
	slot20 = an.newBtn
	slot21 = res.gettex2
	--- END OF BLOCK #10 ---

	slot22 = if not v.image then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 136-136, warpins: 1 ---
	slot22 = "pic/common/btn20.png"
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 137-179, warpins: 2 ---
	local btn = slot20(slot21(slot22), handler(v, onBtn), {
		pressImage = res.gettex2(pressImage),
		label = {
			v.title,
			18,
			1,
			{
				color = def.colors.btn30
			}
		}
	}):add2(btnBase):anchor(0, 0):pos(listWidth + btnInterval/2, 0)
	listWidth = listWidth + btn.getw(btn) + btnInterval
	v.idx = k

	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 180-181, warpins: 2 ---
	--- END OF BLOCK #13 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #6


	--- BLOCK #14 182-189, warpins: 1 ---
	btnBase.setContentSize(btnBase, listWidth, 20)
	--- END OF BLOCK #14 ---

	slot14 = if params.popStyle then
	JUMP TO BLOCK #15
	else
	JUMP TO BLOCK #16
	end


	--- BLOCK #15 190-193, warpins: 1 ---
	common.enablePopStyle(panel)

	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 194-199, warpins: 2 ---
	self.panel = panel
	self.view = view

	return panel, view
	--- END OF BLOCK #16 ---



end
messageBox.enableScroll = function (self, enable)
	--- BLOCK #0 1-6, warpins: 1 ---
	self.view:enableTouch(false)

	return 
	--- END OF BLOCK #0 ---



end
messageBox.confirm = function (titlePng, text, btnList, callback, params)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if not params then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	params = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-17, warpins: 2 ---
	local msgbox = messageBox.new()
	local panel, view = msgbox.messageBox(msgbox, titlePng, btnList, callback, params)
	local content = nil
	--- END OF BLOCK #2 ---

	slot9 = if params.center then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 18-23, warpins: 1 ---
	slot9 = an.newLabel
	slot10 = text
	--- END OF BLOCK #3 ---

	slot11 = if not params.fontSize then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #5
	end


	--- BLOCK #4 24-24, warpins: 1 ---
	slot11 = 18
	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 25-63, warpins: 2 ---
	content = slot9(slot10, slot11, 1, {
		color = cc.c3b(228, 219, 193)
	}):pos(0, msgbox.viewSize.h):add2(view):anchor(0.5, 0.5):debug()

	content.pos(content, msgbox.viewSize.w/2, msgbox.viewSize.h/2)

	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #6 64-70, warpins: 1 ---
	slot9 = an.newLabelM
	slot10 = msgbox.viewSize.w
	--- END OF BLOCK #6 ---

	slot11 = if not params.fontSize then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #7 71-71, warpins: 1 ---
	slot11 = 18
	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 72-105, warpins: 2 ---
	content = slot9(slot10, slot11, 1):pos(0, msgbox.viewSize.h):add2(view):anchor(0, 1):addLabel(text, cc.c3b(228, 219, 193))

	--- END OF BLOCK #8 ---

	if content.geth(content)
	 < 160 then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 106-109, warpins: 1 ---
	msgbox.enableScroll(msgbox, false)

	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 110-114, warpins: 3 ---
	local co = coroutine.running()

	--- END OF BLOCK #10 ---

	slot9 = if co then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #11 115-116, warpins: 1 ---
	--- END OF BLOCK #11 ---

	slot3 = if not callback then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 117-120, warpins: 1 ---
	return coroutine.yield("messageBox")
	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 121-123, warpins: 3 ---
	return panel, view
	--- END OF BLOCK #13 ---



end
messageBox.prompt = function (titlePng, placeholder, btnList, callback, params)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if not params then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-3, warpins: 1 ---
	params = {}
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 4-77, warpins: 2 ---
	local msgbox = messageBox.new()
	local input = nil
	local co = coroutine.running()
	local panel, view = msgbox.messageBox(msgbox, titlePng, btnList, function (event)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot1 = if callback then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-11, warpins: 1 ---
		callback(event, input:getString())
		--- END OF BLOCK #1 ---

		UNCONDITIONAL JUMP; TARGET BLOCK #4


		--- BLOCK #2 12-14, warpins: 1 ---
		--- END OF BLOCK #2 ---

		slot1 = if co then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 15-23, warpins: 1 ---
		coroutine.resume(co, event.evt, input:getString())

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 24-24, warpins: 3 ---
		return 
		--- END OF BLOCK #4 ---



	end, params)

	msgbox.enableScroll(msgbox, false)

	local base = display.newScale9Sprite(res.getframe2("pic/scale/scale16.png"), 0, 0, cc.size(view.getw(view) - 20, 40)):anchor(0.5, 0.5):pos(msgbox.viewSize.w/2, msgbox.viewSize.h/2 + 10):add2(view, 2)
	slot11 = an.newInput
	slot12 = 10
	slot13 = base.geth(base)/2
	slot14 = view.getw(view) - 40
	slot15 = 40
	slot16 = params.max
	slot17 = {
		label = {
			"",
			20
		}
	}
	slot18 = {
		nil,
		20,
		1
	}
	--- END OF BLOCK #2 ---

	slot19 = if not placeholder then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 78-78, warpins: 1 ---
	slot19 = ""
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 79-96, warpins: 2 ---
	slot18[1] = slot19
	slot17.tip = slot18
	slot17.checkCLen = params.max
	input = slot11(slot12, slot13, slot14, slot15, slot16, slot17):addTo(base):anchor(0, 0.5)
	--- END OF BLOCK #4 ---

	slot11 = if params.tip then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #8
	end


	--- BLOCK #5 97-102, warpins: 1 ---
	slot11 = an.newLabel
	slot12 = params.tip
	--- END OF BLOCK #5 ---

	slot13 = if not params.fontSize then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 103-103, warpins: 1 ---
	slot13 = 18

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 104-127, warpins: 2 ---
	slot11(slot12, slot13, 1, {
		color = cc.c3b(228, 219, 193)
	}):pos(-10, 50):anchor(0, 0):add2(input)

	--- END OF BLOCK #7 ---

	FLOW; TARGET BLOCK #8


	--- BLOCK #8 128-129, warpins: 2 ---
	--- END OF BLOCK #8 ---

	slot7 = if co then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #9 130-131, warpins: 1 ---
	--- END OF BLOCK #9 ---

	slot3 = if not callback then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 132-136, warpins: 1 ---
	return coroutine.yield("messageBox")
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 137-140, warpins: 3 ---
	return panel, view
	--- END OF BLOCK #11 ---



end
messageBox.test = function ()
	--- BLOCK #0 1-49, warpins: 1 ---
	local i = 1
	local testList = {}

	function nextTest()
		--- BLOCK #0 1-5, warpins: 1 ---
		--- END OF BLOCK #0 ---

		slot0 = if testList[i] then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 6-12, warpins: 1 ---
		testList[i]()

		i = i + 1

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 13-13, warpins: 2 ---
		return 
		--- END OF BLOCK #2 ---



	end

	local function testWithCoroutine()
		--- BLOCK #0 1-11, warpins: 1 ---
		local function test()
			--- BLOCK #0 1-23, warpins: 1 ---
			print(messageBox.confirm("pic/panels/friend/add.PNG", "基于协程实现的messagebox，当前线程是协程的情况下，直到按钮列表被触发时返回", {
				{
					title = "点击返回",
					evt = "应当在按下返回按钮后,在控制台看到这个文本"
				}
			}))
			print(messageBox.prompt("pic/panels/friend/add.PNG", "测试输入", {
				{
					title = "点击返回",
					evt = "应当在按下返回按钮后,在控制台看到这个文本,以及你输入的内容"
				}
			}))
			nextTest()

			return 
			--- END OF BLOCK #0 ---



		end

		local co = coroutine.create(function ()
			--- BLOCK #0 1-7, warpins: 1 ---
			print(xpcall(test, __G__TRACKBACK__))

			return 
			--- END OF BLOCK #0 ---



		end)

		coroutine.resume(co)

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testWithCoroutine)

	local function btnCB(btnData)
		--- BLOCK #0 1-7, warpins: 1 ---
		print("btnCB", btnData.evt)
		nextTest()

		return 
		--- END OF BLOCK #0 ---



	end

	local function testScroll()
		--- BLOCK #0 1-10, warpins: 1 ---
		print(messageBox.confirm("pic/panels/friend/add.PNG", [[
测试自动滚动===\n
			巴拉巴拉巴拉快乐圣诞节疯狂就类似的恢复高考加
			对方会尽快收到回复即可收到回复即可收到后房价快速
			的恢复健康是的话拉巴拉巴拉拉巴拉阿拉巴拉拉比拉力赛
			的法律会计师的罚款了坚实的快乐分手的房价快速贷款结
			尾我开了房间为科技凤凰网科技而恢复客户看完就二婚中文
			中文中文中文中文中文中文中文中文中文中文中文中文中文
			中文中文中文中文中文中文中文中文中文中文中文中文中文中文]], nil, btnCB))

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testScroll)

	local function testCenterAlign()
		--- BLOCK #0 1-11, warpins: 1 ---
		print(messageBox.confirm("pic/panels/friend/add.PNG", "测试居中", nil, btnCB, {
			center = true,
			fontSize = 25
		}))

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testCenterAlign)

	local function testBtnList()
		--- BLOCK #0 1-17, warpins: 1 ---
		print(messageBox.confirm("pic/panels/friend/add.PNG", "测试按钮列表", {
			{
				title = "按钮1",
				evt = "btn1"
			},
			{
				title = "按钮2",
				evt = "btn2"
			},
			{
				title = "按钮3",
				evt = "btn3"
			}
		}, btnCB, {
			center = true
		}))

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testBtnList)

	local function testBtnInterval()
		--- BLOCK #0 1-15, warpins: 1 ---
		print(messageBox.confirm("pic/panels/friend/add.PNG", "测试按钮间隙,间隔0", {
			{
				title = "按钮1",
				evt = "btn1"
			},
			{
				title = "按钮2",
				evt = "btn2"
			}
		}, btnCB, {
			btnInterval = 0
		}))

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testBtnInterval)

	local function testBtnInterval2()
		--- BLOCK #0 1-15, warpins: 1 ---
		print(messageBox.confirm("pic/panels/friend/add.PNG", "测试按钮间隙,间隔100", {
			{
				title = "按钮1",
				evt = "btn1"
			},
			{
				title = "按钮2",
				evt = "btn2"
			}
		}, btnCB, {
			btnInterval = 100
		}))

		return 
		--- END OF BLOCK #0 ---



	end

	table.insert(testList, testBtnInterval2)

	messageBox = import(".messageBox")

	nextTest()

	return 
	--- END OF BLOCK #0 ---



end

return messageBox
--- END OF BLOCK #0 ---



