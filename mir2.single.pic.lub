--- BLOCK #0 1-25, warpins: 1 ---
local pic = {}
pic[1] = listenner
pic.downloads = {}
pic.setListenner = function (listenner)
	--- BLOCK #0 1-3, warpins: 1 ---
	pic.listenner = listenner

	return 
	--- END OF BLOCK #0 ---



end
pic.removeListenner = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	pic.listenner = nil

	return 
	--- END OF BLOCK #0 ---



end
pic.call = function (key, ...)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if pic.listenner then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	--- END OF BLOCK #1 ---

	slot1 = if pic.listenner[key] then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 10-14, warpins: 1 ---
	pic.listenner[key](...)

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 15-15, warpins: 3 ---
	return 
	--- END OF BLOCK #3 ---



end
pic.filename = function (user, msgID)
	--- BLOCK #0 1-12, warpins: 1 ---
	return string.sub(crypto.md5(user .. msgID .. "mir2pic"), 1, 16)
	--- END OF BLOCK #0 ---



end
pic.canScreenshot = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if pic.uploadMsg then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	return false, "您的上一张截屏正在发送中, 请稍候!"
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-9, warpins: 2 ---
	return true
	--- END OF BLOCK #2 ---



end
pic.upload = function (node, player)
	--- BLOCK #0 1-34, warpins: 1 ---
	local msgID = string.sub(crypto.md5(socket.gettime()), 1, 8)
	local filename = pic.filename(player, msgID)
	local diskpath = cache.getPicPathFull() .. filename .. ".jpg"

	printscreen(node, {
		file = diskpath
	})
	scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if device.platform == "ios" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 5-14, warpins: 1 ---
		luaoc.callStaticMethod("iosFuncs", "compressJPG", {
			input = diskpath,
			output = diskpath
		})

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 15-41, warpins: 2 ---
		local size = math.modf(io.filesize(diskpath)/1000)
		size = math.min(size, 999)

		yaya.uploadPic(diskpath, size, msgID)

		pic.uploadMsg = {
			size = size,
			msgID = msgID
		}

		return 
		--- END OF BLOCK #2 ---



	end, 1)

	return 
	--- END OF BLOCK #0 ---



end
pic.uploadEnd = function (result, errmsg, url)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot3 = if not pic.uploadMsg then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-5, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 6-22, warpins: 2 ---
	pic.call("onUploadEnd", result, errmsg, url, pic.uploadMsg.size, pic.uploadMsg.msgID)

	pic.uploadMsg = nil

	return 
	--- END OF BLOCK #2 ---



end
pic.download = function (user, msgID, url, channel)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot4 = if pic.downloads[msgID] then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-6, warpins: 1 ---
	return 

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 7-33, warpins: 1 ---
	pic.downloads[msgID] = true

	pic.call("onDownloading", msgID, channel)

	local filename = pic.filename(user, msgID)
	local path = cache.getPicPathFull() .. filename .. ".jpg"

	--- END OF BLOCK #2 ---

	slot6 = if not io.exists(path)

	 then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 34-42, warpins: 1 ---
	local request = network.createHTTPRequest(function (event)
		--- BLOCK #0 1-3, warpins: 1 ---
		--- END OF BLOCK #0 ---

		if event.name ~= "completed" then
		JUMP TO BLOCK #1
		else
		JUMP TO BLOCK #2
		end


		--- BLOCK #1 4-4, warpins: 1 ---
		return 

		--- END OF BLOCK #1 ---

		FLOW; TARGET BLOCK #2


		--- BLOCK #2 5-10, warpins: 2 ---
		local request = event.request
		local code = request.getResponseStatusCode(request)

		--- END OF BLOCK #2 ---

		if code ~= 200 then
		JUMP TO BLOCK #3
		else
		JUMP TO BLOCK #4
		end


		--- BLOCK #3 11-17, warpins: 1 ---
		pic.downloadEnd(false, msgID, channel)

		return 

		--- END OF BLOCK #3 ---

		FLOW; TARGET BLOCK #4


		--- BLOCK #4 18-33, warpins: 2 ---
		io.writefile(path, request.getResponseData(request))
		pic.downloadEnd(true, msgID, channel, path, user)

		return 
		--- END OF BLOCK #4 ---



	end, url)

	request.start(request)
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #5


	--- BLOCK #4 43-50, warpins: 1 ---
	pic.downloadEnd(true, msgID, channel, path, user)

	--- END OF BLOCK #4 ---

	FLOW; TARGET BLOCK #5


	--- BLOCK #5 51-52, warpins: 2 ---
	return 
	--- END OF BLOCK #5 ---

	FLOW; TARGET BLOCK #6


	--- BLOCK #6 53-53, warpins: 2 ---
	--- END OF BLOCK #6 ---



end
pic.downloadEnd = function (result, msgID, channel, path, user)
	--- BLOCK #0 1-14, warpins: 1 ---
	pic.downloads[msgID] = nil

	pic.call("onDownloadEnd", msgID, channel, result, path, user)

	return 
	--- END OF BLOCK #0 ---



end

return pic
--- END OF BLOCK #0 ---



