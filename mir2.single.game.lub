--- BLOCK #0 1-18, warpins: 1 ---
local current = ...
local game = {}
game[1] = deviceInfo
game[2] = loopBegin
game[3] = sourceSize
game.init = function ()
	--- BLOCK #0 1-9, warpins: 1 ---
	game.sourceSize = display.size
	--- END OF BLOCK #0 ---

	if display.width < 960 then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 10-279, warpins: 1 ---
	CONFIG_SCREEN_WIDTH = 960
	CONFIG_SCREEN_HEIGHT = 640
	local sharedDirector = cc.Director:getInstance()
	local glview = sharedDirector.getOpenGLView(sharedDirector)
	local size = glview.getFrameSize(glview)
	display.sizeInPixels = {
		width = size.width,
		height = size.height
	}
	local w = display.sizeInPixels.width
	local h = display.sizeInPixels.height
	local scaleX = w/CONFIG_SCREEN_WIDTH
	local scaleY = h/CONFIG_SCREEN_HEIGHT
	local scale = scaleX
	CONFIG_SCREEN_AUTOSCALE = "FIXED_WIDTH"
	CONFIG_SCREEN_HEIGHT = h/scale

	glview.setDesignResolutionSize(glview, CONFIG_SCREEN_WIDTH, CONFIG_SCREEN_HEIGHT, cc.ResolutionPolicy.NO_BORDER)

	local winSize = sharedDirector.getWinSize(sharedDirector)
	display.screenScale = 2
	display.contentScaleFactor = scale
	display.size = {
		width = winSize.width,
		height = winSize.height
	}
	display.width = display.size.width
	display.height = display.size.height
	display.cx = display.width/2
	display.cy = display.height/2
	display.c_left = -display.width/2
	display.c_right = display.width/2
	display.c_top = display.height/2
	display.c_bottom = -display.height/2
	display.left = 0
	display.right = display.width
	display.top = display.height
	display.bottom = 0
	display.widthInPixels = display.sizeInPixels.width
	display.heightInPixels = display.sizeInPixels.height

	printInfo(string.format("# CONFIG_SCREEN_AUTOSCALE      = %s", CONFIG_SCREEN_AUTOSCALE))
	printInfo(string.format("# CONFIG_SCREEN_WIDTH          = %0.2f", CONFIG_SCREEN_WIDTH))
	printInfo(string.format("# CONFIG_SCREEN_HEIGHT         = %0.2f", CONFIG_SCREEN_HEIGHT))
	printInfo(string.format("# display.widthInPixels        = %0.2f", display.widthInPixels))
	printInfo(string.format("# display.heightInPixels       = %0.2f", display.heightInPixels))
	printInfo(string.format("# display.contentScaleFactor   = %0.2f", display.contentScaleFactor))
	printInfo(string.format("# display.width                = %0.2f", display.width))
	printInfo(string.format("# display.height               = %0.2f", display.height))
	printInfo(string.format("# display.cx                   = %0.2f", display.cx))
	printInfo(string.format("# display.cy                   = %0.2f", display.cy))
	printInfo(string.format("# display.left                 = %0.2f", display.left))
	printInfo(string.format("# display.right                = %0.2f", display.right))
	printInfo(string.format("# display.top                  = %0.2f", display.top))
	printInfo(string.format("# display.bottom               = %0.2f", display.bottom))
	printInfo(string.format("# display.c_left               = %0.2f", display.c_left))
	printInfo(string.format("# display.c_right              = %0.2f", display.c_right))
	printInfo(string.format("# display.c_top                = %0.2f", display.c_top))
	printInfo(string.format("# display.c_bottom             = %0.2f", display.c_bottom))
	printInfo("#")

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 280-283, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if device.platform == "mac" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #4
	end


	--- BLOCK #3 284-290, warpins: 1 ---
	luaoc = require(cc.PACKAGE_NAME .. ".luaoc")
	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 291-294, warpins: 2 ---
	--- END OF BLOCK #4 ---

	if device.platform == "android" then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #5 295-305, warpins: 1 ---
	local ok = luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "Mir2", "startFilterConnectivityAction", {}, "()V")

	--- END OF BLOCK #5 ---

	slot0 = if not ok then
	JUMP TO BLOCK #6
	else
	JUMP TO BLOCK #7
	end


	--- BLOCK #6 306-309, warpins: 1 ---
	p2("warnning", "startFilterConnectivityAction faild")

	--- END OF BLOCK #6 ---

	FLOW; TARGET BLOCK #7


	--- BLOCK #7 310-320, warpins: 2 ---
	local ok = luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "Mir2", "startFilterBatteryAction", {}, "()V")

	--- END OF BLOCK #7 ---

	slot1 = if not ok then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #9
	end


	--- BLOCK #8 321-324, warpins: 1 ---
	p2("warnning", "startFilterBatteryAction faild")

	--- END OF BLOCK #8 ---

	FLOW; TARGET BLOCK #9


	--- BLOCK #9 325-331, warpins: 3 ---
	_G.MAIN_LOOP_BEGIN = function ()
		--- BLOCK #0 1-6, warpins: 1 ---
		game.loopBegin = socket.gettime()

		return 
		--- END OF BLOCK #0 ---



	end

	--- END OF BLOCK #9 ---

	if device.platform == "windows" then
	JUMP TO BLOCK #10
	else
	JUMP TO BLOCK #11
	end


	--- BLOCK #10 332-335, warpins: 1 ---
	scheduler.scheduleUpdateGlobal(function ()
		--- BLOCK #0 1-4, warpins: 1 ---
		_G.MAIN_LOOP_BEGIN()

		return 
		--- END OF BLOCK #0 ---



	end)
	--- END OF BLOCK #10 ---

	FLOW; TARGET BLOCK #11


	--- BLOCK #11 336-353, warpins: 2 ---
	cc.FileUtils:getInstance():purgeCachedEntries()
	math.randomseed(os.time())
	--- END OF BLOCK #11 ---

	if 0 < DEBUG then
	JUMP TO BLOCK #12
	else
	JUMP TO BLOCK #13
	end


	--- BLOCK #12 354-361, warpins: 1 ---
	cc.Director:getInstance():enableDebugdraw()
	--- END OF BLOCK #12 ---

	FLOW; TARGET BLOCK #13


	--- BLOCK #13 362-544, warpins: 2 ---
	cc.Director:getInstance():setAnimationInterval(0.03333333333333333)

	display.DEFAULT_TTF_FONT = def.font
	display.DEFAULT_TTF_FONT_SIZE = 16

	jpush.init()
	scheduler.performWithDelayGlobal(function ()
		--- BLOCK #0 1-1, warpins: 1 ---
		return 
		--- END OF BLOCK #0 ---



	end, 3)
	an.msgbox.init({
		inputListBgScale = 1,
		contentLabelSize = 20,
		btny = 13,
		btnAlignStyle = "center",
		btnLabelSize = 20,
		bg = res.gettex2("pic/common/msgbox.png"),
		confirm = res.gettex2("pic/common/btn20.png"),
		confirm2 = res.gettex2("pic/common/btn21.png"),
		confirmText = res.gettex2("pic/common/confirm.png"),
		cancel = res.gettex2("pic/common/btn20.png"),
		cancel2 = res.gettex2("pic/common/btn21.png"),
		cancelText = res.gettex2("pic/common/cancel.png"),
		close = res.gettex2("pic/common/close10.png"),
		close2 = res.gettex2("pic/common/close11.png"),
		title = res.gettex2("pic/common/msgtitle.png"),
		titlepos = cc.p(210, 269),
		inputListBg = res.gettex2("pic/console/guessbg.png"),
		sound = sound.root .. "104" .. sound.suffix,
		content = {
			w = 370,
			x = 25,
			h = 150,
			y = 74
		},
		btnColor = def.colors.btn20,
		btnSColor = def.colors.btn20s
	})
	an.voiceBubble.init({
		bg = {
			附近 = res.gettex2("pic/scale/msg1.png"),
			喊话 = res.gettex2("pic/scale/msg2.png"),
			组队 = res.gettex2("pic/scale/msg3.png"),
			行会 = res.gettex2("pic/scale/msg4.png"),
			私聊self = res.gettex2("pic/scale/msg5.png"),
			私聊 = res.gettex2("pic/scale/msg6.png"),
			default = res.gettex2("pic/scale/msg7.png")
		},
		hornAni = res.getani2("pic/voice/play%d.png", 1, 3, 0.2),
		loadingAni = res.getani2("pic/effect/loading/%d.png", 1, 12, 0.06),
		errTex = res.gettex2("pic/voice/err.png"),
		unreadTex = res.gettex2("pic/voice/unread.png")
	})
	cache.checkAll()
	--- END OF BLOCK #13 ---

	slot0 = if cache.cgCheckFirstIn()

	 then
	JUMP TO BLOCK #14
	else
	JUMP TO BLOCK #15
	end


	--- BLOCK #14 545-558, warpins: 1 ---
	local scene = display.newScene("CGScene")
	local entered = false
	scene.onEnterTransitionFinish = function (self)
		--- BLOCK #0 1-5, warpins: 1 ---
		game.gotoscene("login")

		return 
		--- END OF BLOCK #0 ---



	end

	display.replaceScene(scene, "fade", 0.5)

	--- END OF BLOCK #14 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #16


	--- BLOCK #15 559-571, warpins: 1 ---
	local s = nil
	local uptScene = require("upt.scene")
	s = uptScene.new(function ()
		--- BLOCK #0 1-8, warpins: 1 ---
		game.gotoscene("sfselect", {
			logout = false
		}, "crossFade", 1)

		return 
		--- END OF BLOCK #0 ---



	end, true)

	display.replaceScene(s)

	--- END OF BLOCK #15 ---

	FLOW; TARGET BLOCK #16


	--- BLOCK #16 572-572, warpins: 2 ---
	return 
	--- END OF BLOCK #16 ---



end
game.gotoscene = function (name, params, ...)
	--- BLOCK #0 1-15, warpins: 1 ---
	display.replaceScene(import("..scenes." .. name .. ".scene", current).new(params), ...)

	return 
	--- END OF BLOCK #0 ---



end
game.loadDeviceInfo = function ()
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot0 = if game.deviceInfo then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-7, warpins: 1 ---
	return game.deviceInfo

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 8-11, warpins: 2 ---
	--- END OF BLOCK #2 ---

	if device.platform == "ios" then
	JUMP TO BLOCK #3
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #3 12-18, warpins: 1 ---
	local ok, ret = luaoc.callStaticMethod("iosFuncs", "devicesInfo")
	--- END OF BLOCK #3 ---

	slot0 = if ok then
	JUMP TO BLOCK #4
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #4 19-20, warpins: 1 ---
	--- END OF BLOCK #4 ---

	slot1 = if ret then
	JUMP TO BLOCK #5
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #5 21-27, warpins: 1 ---
	game.deviceInfo = json.decode(ret)
	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #10


	--- BLOCK #6 28-31, warpins: 1 ---
	--- END OF BLOCK #6 ---

	if device.platform == "android" then
	JUMP TO BLOCK #7
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #7 32-42, warpins: 1 ---
	local ok, ret = luaj.callStaticMethod(ANDROID_PACKAGE_NAME .. "DeviceUtil", "getJsonDeviceInfo", {}, "()Ljava/lang/String;")
	--- END OF BLOCK #7 ---

	slot0 = if ok then
	JUMP TO BLOCK #8
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #8 43-44, warpins: 1 ---
	--- END OF BLOCK #8 ---

	slot1 = if ret then
	JUMP TO BLOCK #9
	else
	JUMP TO BLOCK #10
	end


	--- BLOCK #9 45-50, warpins: 1 ---
	game.deviceInfo = json.decode(ret)
	--- END OF BLOCK #9 ---

	FLOW; TARGET BLOCK #10


	--- BLOCK #10 51-55, warpins: 7 ---
	slot0 = game
	--- END OF BLOCK #10 ---

	slot1 = if not game.deviceInfo then
	JUMP TO BLOCK #11
	else
	JUMP TO BLOCK #12
	end


	--- BLOCK #11 56-56, warpins: 1 ---
	slot1 = {}
	--- END OF BLOCK #11 ---

	FLOW; TARGET BLOCK #12


	--- BLOCK #12 57-65, warpins: 2 ---
	slot0.deviceInfo = slot1
	game.deviceInfo._platform = device.platform

	return game.deviceInfo
	--- END OF BLOCK #12 ---



end
game.initLoginer = function (cls, ...)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not game.loginer then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 5-9, warpins: 1 ---
	game.loginer = cls.new(...)

	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-12, warpins: 2 ---
	return game.loginer
	--- END OF BLOCK #2 ---



end

return game
--- END OF BLOCK #0 ---



