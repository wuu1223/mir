--- BLOCK #0 1-60, warpins: 1 ---
local login = {
	selectIndex = 1,
	pw = "",
	type = "",
	ac = "",
	groupIndex = 1,
	ipLine = 1
}
login[1] = verinfo
login[2] = shopUrl
login[3] = servers
login.notice = {}
login[4] = forces
login[5] = netLastName
login[6] = localLastSer
login.groups = {}
login[7] = serverMsg
login[8] = serverMsg2
login[9] = loginRet1
login[10] = loginRet2
login[11] = isSDKLogin
login[12] = queue
login.resetLogin = function (self)
	--- BLOCK #0 1-15, warpins: 1 ---
	self.shopUrl = nil
	self.verinfo = nil
	self.servers = nil
	self.notice = nil
	self.forces = nil
	self.netLastName = nil
	self.localLastSer = nil

	return 
	--- END OF BLOCK #0 ---



end
login.setShopUrl = function (self, url)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.shopUrl = url

	return 
	--- END OF BLOCK #0 ---



end
login.setVerInfo = function (self, verinfo)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.verinfo = verinfo

	return 
	--- END OF BLOCK #0 ---



end
login.getVerName = function (self, verid)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.verinfo)


	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.verid == verid then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-9, warpins: 1 ---
	return v.vername
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 10-11, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 12-13, warpins: 1 ---
	return ""
	--- END OF BLOCK #4 ---



end
login.getClientVer = function (self, verid)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	for i, v in ipairs(self.verinfo)


	LOOP BLOCK #1
	GO OUT TO BLOCK #4


	--- BLOCK #1 5-7, warpins: 1 ---
	--- END OF BLOCK #1 ---

	if v.verid == verid then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 8-9, warpins: 1 ---
	return v.clientver
	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 10-11, warpins: 3 ---
	--- END OF BLOCK #3 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #0


	--- BLOCK #4 12-13, warpins: 1 ---
	return nil
	--- END OF BLOCK #4 ---



end
login.setServerList = function (self, data)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.servers = data

	return 
	--- END OF BLOCK #0 ---



end
login.setNotice = function (self, data)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.notice = data

	return 
	--- END OF BLOCK #0 ---



end
login.setForceList = function (self, data)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.forces = data

	return 
	--- END OF BLOCK #0 ---



end
login.setNetLastName = function (self, name)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.netLastName = name

	return 
	--- END OF BLOCK #0 ---



end
login.setLocalLastServer = function (self, data)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.localLastSer = data

	return 
	--- END OF BLOCK #0 ---



end
login.setGroupList = function (self, msg, buf, buflen)
	--- BLOCK #0 1-4, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if 0 < msg.param then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #6
	end


	--- BLOCK #1 5-8, warpins: 1 ---
	slot4 = assert
	--- END OF BLOCK #1 ---

	if msg.series == 1 then
	JUMP TO BLOCK #2
	else
	JUMP TO BLOCK #3
	end


	--- BLOCK #2 9-10, warpins: 1 ---
	slot5 = false
	--- END OF BLOCK #2 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #3 11-11, warpins: 1 ---
	slot5 = true

	--- END OF BLOCK #3 ---

	FLOW; TARGET BLOCK #4


	--- BLOCK #4 12-19, warpins: 2 ---
	slot4(slot5, "sdoaµÇÂ¼·½Ê½ÒÑÌÔÌ­£¡")

	self.groups = {}
	--- END OF BLOCK #4 ---

	for i=1, msg.param, 1
	LOOP BLOCK #5
	GO OUT TO BLOCK #6

	--- BLOCK #5 20-33, warpins: 2 ---
	self.groups[#self.groups + 1], buf, buflen = net.record("TServerGroupInfo", buf, buflen)

	--- END OF BLOCK #5 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #4


	--- BLOCK #6 34-34, warpins: 2 ---
	return 
	--- END OF BLOCK #6 ---



end
login.getSelectGroup = function (self)
	--- BLOCK #0 1-5, warpins: 1 ---
	--- END OF BLOCK #0 ---

	if self.groupIndex <= #self.groups then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 6-9, warpins: 1 ---
	return self.groups[self.groupIndex]
	--- END OF BLOCK #1 ---

	FLOW; TARGET BLOCK #2


	--- BLOCK #2 10-11, warpins: 2 ---
	return {}
	--- END OF BLOCK #2 ---



end
login.setSDKLogin = function (self, b)
	--- BLOCK #0 1-2, warpins: 1 ---
	self.isSDKLogin = b

	return 
	--- END OF BLOCK #0 ---



end
login.setQueueData = function (self, msg)
	--- BLOCK #0 1-2, warpins: 1 ---
	--- END OF BLOCK #0 ---

	slot1 = if not msg then
	JUMP TO BLOCK #1
	else
	JUMP TO BLOCK #2
	end


	--- BLOCK #1 3-5, warpins: 1 ---
	self.queue = nil
	--- END OF BLOCK #1 ---

	UNCONDITIONAL JUMP; TARGET BLOCK #3


	--- BLOCK #2 6-13, warpins: 1 ---
	self.queue = {
		pos = msg.param,
		cnt = msg.tag,
		sec = msg.series
	}

	--- END OF BLOCK #2 ---

	FLOW; TARGET BLOCK #3


	--- BLOCK #3 14-14, warpins: 2 ---
	return 
	--- END OF BLOCK #3 ---



end
--- END OF BLOCK #0 ---

slot1 = if IOS_REVIEW then
JUMP TO BLOCK #1
else
JUMP TO BLOCK #2
end


--- BLOCK #1 61-64, warpins: 1 ---
login.servers = {
	{
		name = "À×öª",
		ip = "center.peiban.com",
		area = 504,
		ver = 185
	}
}
--- END OF BLOCK #1 ---

FLOW; TARGET BLOCK #2


--- BLOCK #2 65-67, warpins: 2 ---
--- END OF BLOCK #2 ---

slot1 = if VERSION_REVIEW then
JUMP TO BLOCK #3
else
JUMP TO BLOCK #4
end


--- BLOCK #3 68-71, warpins: 1 ---
login.servers = {
	{
		name = "ÈÈÑª´«Ææ",
		ip = "center.peiban.com",
		area = 0,
		ver = 185
	}
}

--- END OF BLOCK #3 ---

FLOW; TARGET BLOCK #4


--- BLOCK #4 72-73, warpins: 2 ---
return login
--- END OF BLOCK #4 ---



